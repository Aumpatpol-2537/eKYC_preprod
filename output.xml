<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20220622 10:04:59.209" rpa="false">
<suite id="s1" name="24.BU testing" source="/Users/patcharapol/Documents/GitHub/eKYC_preprod/api-ekyc/Test case/24.BU_testing.robot">
<test id="s1-t1" name="start_bu_journeys">
<kw name="BU_journey" library="Support_Test_BU_Page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="${customer_row} IN RANGE [ ${get_start_row} | 200 ]" type="for">
<kw name="${customer_row} = 4" type="foritem">
<kw name="Get_data_information" library="Support_Test_BU_Page">
<arguments>
<arg>${customer_row}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_BU_NAME}</arg>
<arg>doc_id=doc2</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:00.066" endtime="20220622 10:05:00.297"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_journey}</var>
</assign>
<msg timestamp="20220622 10:05:00.298" level="INFO">${get_journey} = QR</msg>
<status status="PASS" starttime="20220622 10:05:00.297" endtime="20220622 10:05:00.298"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_qr_string}</var>
</assign>
<msg timestamp="20220622 10:05:00.299" level="INFO">${get_qr_string} = 2431514481351032490982719</msg>
<status status="PASS" starttime="20220622 10:05:00.298" endtime="20220622 10:05:00.299"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_term}</var>
</assign>
<msg timestamp="20220622 10:05:00.299" level="INFO">${get_term} = true</msg>
<status status="PASS" starttime="20220622 10:05:00.299" endtime="20220622 10:05:00.299"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_consent}</var>
</assign>
<msg timestamp="20220622 10:05:00.300" level="INFO">${get_consent} = true</msg>
<status status="PASS" starttime="20220622 10:05:00.300" endtime="20220622 10:05:00.300"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220622 10:05:00.301" level="INFO">${get_cid} = 1240300143474</msg>
<status status="PASS" starttime="20220622 10:05:00.300" endtime="20220622 10:05:00.301"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220622 10:05:00.301" level="INFO">${name} = เพชรลดา</msg>
<status status="PASS" starttime="20220622 10:05:00.301" endtime="20220622 10:05:00.301"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220622 10:05:00.302" level="INFO">${surname} = มะตัง</msg>
<status status="PASS" starttime="20220622 10:05:00.301" endtime="20220622 10:05:00.302"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220622 10:05:00.303" level="INFO">${name_en} = Pechlada</msg>
<status status="PASS" starttime="20220622 10:05:00.302" endtime="20220622 10:05:00.303"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220622 10:05:00.303" level="INFO">${surname_en} = Matang</msg>
<status status="PASS" starttime="20220622 10:05:00.303" endtime="20220622 10:05:00.303"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=12</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220622 10:05:00.304" level="INFO">${bithdate} = 17-12-2536</msg>
<status status="PASS" starttime="20220622 10:05:00.303" endtime="20220622 10:05:00.304"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=13</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220622 10:05:00.304" level="INFO">${get_mobile} = 0625801026</msg>
<status status="PASS" starttime="20220622 10:05:00.304" endtime="20220622 10:05:00.304"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=14</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220622 10:05:00.305" level="INFO">${get_lasercode} = JT3104941469</msg>
<status status="PASS" starttime="20220622 10:05:00.305" endtime="20220622 10:05:00.305"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=15</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_cid_image}</var>
</assign>
<msg timestamp="20220622 10:05:00.306" level="INFO">${get_cid_image} = CID_Image_Pechlada</msg>
<status status="PASS" starttime="20220622 10:05:00.305" endtime="20220622 10:05:00.306"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=16</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_selfie_image}</var>
</assign>
<msg timestamp="20220622 10:05:00.306" level="INFO">${get_selfie_image} = Selfie_Pechlada_7</msg>
<status status="PASS" starttime="20220622 10:05:00.306" endtime="20220622 10:05:00.306"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CONSENT}</arg>
<arg>${get_consent}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.307" level="INFO">${GET_CONSENT} = true</msg>
<status status="PASS" starttime="20220622 10:05:00.306" endtime="20220622 10:05:00.307"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_TERM}</arg>
<arg>${get_term}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.307" level="INFO">${GET_TERM} = true</msg>
<status status="PASS" starttime="20220622 10:05:00.307" endtime="20220622 10:05:00.307"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${get_qr_string}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.310" level="INFO">${QR_VALUE} = 2431514481351032490982719</msg>
<status status="PASS" starttime="20220622 10:05:00.307" endtime="20220622 10:05:00.310"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_JOURNEY}</arg>
<arg>${get_journey}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.311" level="INFO">${GET_JOURNEY} = QR</msg>
<status status="PASS" starttime="20220622 10:05:00.310" endtime="20220622 10:05:00.311"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.311" level="INFO">${GET_CID} = 1240300143474</msg>
<status status="PASS" starttime="20220622 10:05:00.311" endtime="20220622 10:05:00.311"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.315" level="INFO">${FIRST_NAME} = เพชรลดา</msg>
<status status="PASS" starttime="20220622 10:05:00.312" endtime="20220622 10:05:00.315"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.315" level="INFO">${SURNAME} = มะตัง</msg>
<status status="PASS" starttime="20220622 10:05:00.315" endtime="20220622 10:05:00.315"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.318" level="INFO">${FIRST_NAME_EN} = Pechlada</msg>
<status status="PASS" starttime="20220622 10:05:00.315" endtime="20220622 10:05:00.318"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.319" level="INFO">${SURNAME_EN} = Matang</msg>
<status status="PASS" starttime="20220622 10:05:00.318" endtime="20220622 10:05:00.319"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.321" level="INFO">${BIRTH_DATE} = 17-12-2536</msg>
<status status="PASS" starttime="20220622 10:05:00.319" endtime="20220622 10:05:00.321"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.322" level="INFO">${GET_MOBILE} = 0625801026</msg>
<status status="PASS" starttime="20220622 10:05:00.322" endtime="20220622 10:05:00.322"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.322" level="INFO">${GET_LASER_CODE} = JT3104941469</msg>
<status status="PASS" starttime="20220622 10:05:00.322" endtime="20220622 10:05:00.323"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VAR_IMG}</arg>
<arg>${get_cid_image}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.326" level="INFO">${VAR_IMG} = CID_Image_Pechlada</msg>
<status status="PASS" starttime="20220622 10:05:00.323" endtime="20220622 10:05:00.326"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VAR_SELFIE}</arg>
<arg>${get_selfie_image}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.329" level="INFO">${VAR_SELFIE} = Selfie_Pechlada_7</msg>
<status status="PASS" starttime="20220622 10:05:00.326" endtime="20220622 10:05:00.329"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220622 10:05:00.329" endtime="20220622 10:05:00.329"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.065" endtime="20220622 10:05:00.330"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${GET_JOURNEY}' == 'None'</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:00.330" endtime="20220622 10:05:00.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_JOURNEY}' == 'Uplift'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Uplift_journey</arg>
<arg>${customer_row}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:00.330" endtime="20220622 10:05:00.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${GET_JOURNEY}' == 'QR'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>QR_journey</arg>
<arg>${customer_row}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>QR_journey</arg>
<arg>${customer_row}</arg>
</arguments>
<kw name="QR_journey" library="Support_Test_BU_Page">
<arguments>
<arg>${customer_row}</arg>
</arguments>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.333" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:00.333" endtime="20220622 10:05:00.333"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.332" endtime="20220622 10:05:00.334"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:00.334" endtime="20220622 10:05:00.334"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:00.335" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:00.346" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:00.766" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:00.335" endtime="20220622 10:05:00.766"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:00.767" endtime="20220622 10:05:00.767"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.334" endtime="20220622 10:05:00.768"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:00.770" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:00.770" level="INFO">${TextFileContent} = 3i7gkHY/hztxe/RT7N4RYVxzJGfp+Z4iPmp3rrepb9sSk39QOqDK/oJMEUJ5HokMoBB4BM7CBqjAVqL/33Rzpx27bwZxDkHJjLfzcD8GOL4dYtZwS7SOiDk7Vf/hAivoZswiy6Q=</msg>
<status status="PASS" starttime="20220622 10:05:00.769" endtime="20220622 10:05:00.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.775" level="INFO">${RESULT_ENCRYPT_DATA} = 3i7gkHY/hztxe/RT7N4RYVxzJGfp+Z4iPmp3rrepb9sSk39QOqDK/oJMEUJ5HokMoBB4BM7CBqjAVqL/33Rzpx27bwZxDkHJjLfzcD8GOL4dYtZwS7SOiDk7Vf/hAivoZswiy6Q=</msg>
<status status="PASS" starttime="20220622 10:05:00.770" endtime="20220622 10:05:00.775"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.768" endtime="20220622 10:05:00.776"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:00.777" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:00.776" endtime="20220622 10:05:00.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220622 10:05:00.778" level="INFO">&amp;{body} = { data=3i7gkHY/hztxe/RT7N4RYVxzJGfp+Z4iPmp3rrepb9sSk39QOqDK/oJMEUJ5HokMoBB4BM7CBqjAVqL/33Rzpx27bwZxDkHJjLfzcD8GOL4dYtZwS7SOiDk7Vf/hAivoZswiy6Q= }</msg>
<status status="PASS" starttime="20220622 10:05:00.777" endtime="20220622 10:05:00.778"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:09.886" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "3i7gkHY/hztxe/RT7N4RYVxzJGfp+Z4iPmp3rrepb9sSk39QOqDK/oJMEUJ5HokMoBB4BM7CBqjAVqL/33Rzpx27bwZxDkHJjLfzcD8GOL4dYtZwS7SOiDk7Vf/hAivoZswiy6Q="}' 
 </msg>
<msg timestamp="20220622 10:05:09.887" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:09 GMT', 'x-amzn-RequestId': '3f7a4656-2602-46fe-ab0b-2c894547d8ef', 'x-amz-apigw-id': 'UGoCkEXOyQ0Fr-Q=', 'X-Amzn-Trace-Id': 'Root=1-62b286dd-260d4cfe6932df4761a1f107', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 7a03cbda34c5bf86ff654a89bb256fac.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'Vm4D3oC8qR3SCOFJihSgyRUfyd8yPRJwRw-qnJMVATd3wlFMORDnNQ=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220622 10:05:09.888" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:09.889" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:00.778" endtime="20220622 10:05:09.889"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:09.897" level="INFO">${RESPONSE_ENCRYPT_TYPE} = o+55kLBrVws4J4UFMIqMsBO87v4ZBv/biFK3MwHlYSdpcW9+ix8yHIUEBnCNT2DZ30/oxarGkyk/u2+qqVOiPffP3lwQ8KFLp3OfmwzwLyFQLKlP+EY3H3GZfqdQ/7eOB437zeis78eIXSt+8uL0CRaVu7Fn9lB+cPn5NpiLyxE//NldgJWGBD9Y7qI5LlgissE5YLl+...</msg>
<status status="PASS" starttime="20220622 10:05:09.889" endtime="20220622 10:05:09.897"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:09.900" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220622 10:05:09.907" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:10.072" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:09.898" endtime="20220622 10:05:10.073"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:10.074" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:10.073" endtime="20220622 10:05:10.074"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.074" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjE0NDlhYThmLTk4MmMtNDhlNS04ZTAwLWUwZmQ4ZmM0YzViNCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTU4Njc0MDgsImlhdCI6MTY1NTg2NzEwOCwianRpIjoiZmU4MDYxYmItODA2Ny00NTJlLTgxOTYtMDVmYTJiNTNhYjI2IiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.g9DhNEZ25yx-e9y3wpLz6C4ZopM7ISZ3U5XuUoV35VQuQQtfUjPVXROF3SHvoICWQkTP26ZqLWfDxrP6iTnq5tVNjkgbE-J44iTJYStfG0i3clt1PaIfHISWnOFzHt8c9wosldTUlOa7WYuURJ5ynsn-HryYrcjO1P_55tMPV6GSLIfhHBKHXmi9X_1CimVe3_gDpihI7I9UVrDbaS43GtaQhoFpqpiZpEV5cShtukZwhyR7xLPMlMl9qCLy5RxXWcKTbXTmTGLA9VCvM1URG-cVkNxhO2Ym0N8TgTEaA5HPVFtPkYXrx2ZU8Lpbwf8jKPss2Gz2CDC0T1rIUcaglQ","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.TTXYPTRrlm3zIQ_zowb6ao7NZV8hAMn5Gaj-GH2uJAqlANzJ8a9ihOFJu-gbbIP9FPQVQz_KOD1s02oT1H7tONN40ktzK1XdNLc5nc6OP-IOZbmVbSJJJ2eLsXrli_MDKvN6pBPzYZGUEH8tLctzJiInUGREOiM1swiD-QLMmjs_nCpUldKxEACPHTOGpEq_PNtgfOjC66yl-EoLtsrKJldJMF_wQryVa3vLk2gD80_bs3TW52VRHpAYieuxdI75EXweHd0Ypod3MeYWRte4RrXHb9F3Zq_GwzZMZQbyz2REkNoEBevTUvGdz9n3txwVce1vS2CaNLKVwHX_DLrxjQ.n412dL4RK5LHQhTK.BBkFs_NDy2Bgh2ziykjbSkd94T6XHirQS8_6gw5iPu3LTeUiCkCdGyvE-Mwomy_0p1rQkPcEEAElkXOgANVyZHhe1VCRA8V-y_dUAPNHWjg4pCRbG9kybiTAyz3ytV9MKXdJ3bETNec4wYwrHLVC020GEHGIA2Q9XQ-_2k3SYaOdisQ6urDo5UyfJH6Z7HRr6sb3eBdEnkpbIg3OpL0GyF-PNBeW3CUzW9Oxmq_VVqkPxzaPiePHvxLipKkMmikXGRizIjv84ISin7dCLrjrIYec0FX5Sfg7pBijmWo2wWVfmmInxmArf_qIpGhiJZKzpb7IcRzKO5c1HjxE4dBSe0vSmxBFKCUaavycPM6W1_f6m9R9qQ4kSG0ZVhrGc3MExIMVBy4R-ksJDBuopU-EKjZNRwG6fhjcF12MTm_XbGzkEvjvO_9ROWSt6Ms0Et9WGvpfSAQTx5i7kW1pHKBL7x24mFA6K6Tadiur5QDeNqjJqXMFJVWOBQyem_juIboEvPF99aAzRTPTxzR6FMtVU2RN13G8852xWx-ovSZnBlQwbDzEdNGtiCWCHFGovm7z4uGvkXbp81-czVibiG8YnBLIhSkznf7vs-xv3H35-iZBh1BMEB7pTPYDDsi5v11H7MECQQIn5dsYerGr_i11k2e88rZ5O1J-rlGo4ES2vP7ZZxH7PrAysB-knrZ5kNNHzjYTwbb8tvC-ArZVCVJu06ao8vAkLkFr4wb9tYhxC3C8Ly5E_h_DM1qea_Yt3AnkUoX5McGififDipj0ojsWZ4QWfhMme4ZTknz-_MqbZtunSff5x5IzyBcol4ozlhy-0RB-Uuu8fGu-vWueFab505pyEoBi1hTOOKMbng1Fv_qI_W7sZ1T0-63OdTdwkZs5b9_lmvwTvKFUIG2_UsGfxvDPiZ1sapdNk9W3fmpJacbT2Y8Ne51FNSTyP2i4_7ueklicf-de0KeRFIMTJ5PAbUNq80N0aBM8T2dBM6cdSllGt409jBvwjkzAPkzwOY4hwTtqOz1QRgbe7uGPH8Uri2MSN2amiDwlO4ExsBAQWLnsgqMzEGLh_Nui-pg81wxWkdNv1pnuEvp3zZNeecHRL9LYAOTU5JSHGe-a6vs8j8ETE7-unmDq4RhkTVB79738TVrokBNYnnNzBDBnm_eqO2PC0NoEyBAmI2GCpyZMM0x0sLC5ZMobj1ZuFhUZxeBq-e-S_2VaP4v5OeW5qGQgmDyG3MsUNjSfMumCqCs26ZpErkmggHgM_p-N1ziCVzCTV-b3Z7nYybz5qmsMn9aVRE3GynVa.GR-0JwnjgxUhaHEnvQJYhA","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA"}}</msg>
<status status="PASS" starttime="20220622 10:05:10.074" endtime="20220622 10:05:10.075"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.078" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220622 10:05:10.075" endtime="20220622 10:05:10.078"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:10.078" endtime="20220622 10:05:10.079"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:09.897" endtime="20220622 10:05:10.079"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:10.080" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220622 10:05:10.079" endtime="20220622 10:05:10.080"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220622 10:05:10.108" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220622 10:05:10.080" endtime="20220622 10:05:10.108"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.109" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA']</msg>
<status status="PASS" starttime="20220622 10:05:10.108" endtime="20220622 10:05:10.109"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.112" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220622 10:05:10.109" endtime="20220622 10:05:10.112"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.332" endtime="20220622 10:05:10.112"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.332" endtime="20220622 10:05:10.112"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CS_VALIDATE}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:10.113" endtime="20220622 10:05:10.113"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CS_VALIDATE}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.114" level="INFO">{'X-Correlation-Id': 'qwtge40453df', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:10.114" endtime="20220622 10:05:10.114"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.114" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:10.114" endtime="20220622 10:05:10.115"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.116" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:10.116" endtime="20220622 10:05:10.116"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:10.115" endtime="20220622 10:05:10.116"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:10.117" endtime="20220622 10:05:10.117"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:10.118" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:10.124" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:10.273" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:10.117" endtime="20220622 10:05:10.273"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:10.274" endtime="20220622 10:05:10.274"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:10.117" endtime="20220622 10:05:10.275"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:10.277" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:10.277" level="INFO">${TextFileContent} = OTeA/ZgkbXEBovM6lo4XY4yivBHl3fRZQBNfYlFPVdwU37mQ3BXU+WBnBNncOQvtIm+rsC8E9gK2FgkagVIfHe3m0ALOTx8IpfWsfirbdCXF0lmLow+6nEITWsplHfqCrkFvI94hvmaB8OpOa8Kq/Ondq84j0HkMNDEem7V5w6raGZomNPS4sxYBeaeMAMyqEsfkx+iS...</msg>
<status status="PASS" starttime="20220622 10:05:10.276" endtime="20220622 10:05:10.277"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:10.279" level="INFO">${RESULT_ENCRYPT_DATA} = OTeA/ZgkbXEBovM6lo4XY4yivBHl3fRZQBNfYlFPVdwU37mQ3BXU+WBnBNncOQvtIm+rsC8E9gK2FgkagVIfHe3m0ALOTx8IpfWsfirbdCXF0lmLow+6nEITWsplHfqCrkFvI94hvmaB8OpOa8Kq/Ondq84j0HkMNDEem7V5w6raGZomNPS4sxYBeaeMAMyqEsfkx+iS...</msg>
<status status="PASS" starttime="20220622 10:05:10.278" endtime="20220622 10:05:10.279"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:10.275" endtime="20220622 10:05:10.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220622 10:05:10.280" level="INFO">&amp;{body} = { data=OTeA/ZgkbXEBovM6lo4XY4yivBHl3fRZQBNfYlFPVdwU37mQ3BXU+WBnBNncOQvtIm+rsC8E9gK2FgkagVIfHe3m0ALOTx8IpfWsfirbdCXF0lmLow+6nEITWsplHfqCrkFvI94hvmaB8OpOa8Kq/Ondq84j0HkMNDEem7V5w6raGZomNPS4sxYBeaeMAMyqE...</msg>
<status status="PASS" starttime="20220622 10:05:10.279" endtime="20220622 10:05:10.280"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_CS_VALIDATE}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:16.897" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwtge40453df', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '340'} 
 body=b'{"data": "OTeA/ZgkbXEBovM6lo4XY4yivBHl3fRZQBNfYlFPVdwU37mQ3BXU+WBnBNncOQvtIm+rsC8E9gK2FgkagVIfHe3m0ALOTx8IpfWsfirbdCXF0lmLow+6nEITWsplHfqCrkFvI94hvmaB8OpOa8Kq/Ondq84j0HkMNDEem7V5w6raGZomNPS4sxYBeaeMAMyqEsfkx+iSeCgN+RoB/icdnRdVzSB8XpzYrs9vHOXBCHocmSUR0VSLSte+xm/DWPRx3uHpQtZcOXBRaXjBLQsaiFJQp4z9hj9QqQSTtBf3ZQGiHrjHdfc19HcQqoWEQYxtq2SN9aIT"}' 
 </msg>
<msg timestamp="20220622 10:05:16.897" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '411', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:16 GMT', 'x-amzn-RequestId': 'eb79d215-8828-4c2e-9cf4-e5cb42b6422c', 'x-amz-apigw-id': 'UGoECGU-SQ0FU0Q=', 'X-Amzn-Trace-Id': 'Root=1-62b286e6-2ef38c3b7e1f6cd52e47c0d7', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d1213591a98aaf070e22a40b4f832f80.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'Z9HiKCdEAUTJPxXMtz8u7HI0pyIWjQfyfL0Dma5zDcgMlGz0sR75lg=='} 
 body={"data":"Jf/OJFHbE1ixGwYYwjjOuUvIBPeP53P7HjnW9ylVnTYeDx5TaDJXfTbzd1XWs89eXMKlW5TkEo5lSM1LshGCZBZjeZ2efxJhXviqOcU+ltGD2kMKcAEwvCVLJI/JqPq4wGq2EHqXBloRaLvIcoNn+4Yc2/O3NMY85xrDXj5E6r2iF4E/C579OvE4Y7BLbX6nkWwAFjDQ7yCfLN6AcGpf0IfZMDKTLcUJDw7tHIW+zMq9A2g8RUYPWcnUHAi2vsrN9pny2F5orizjvxQfEfENHTChut6OGfF9TFhldLtuxrMCokbLd5YjSk1bcLARrDJPiUWNhMQRtD5heqfnMrTs3WylM2mP5BuG/ZgNEHFvdXlgfnyx/5sQR6Jk99z7uHixv3iLOxRwg8jAJQ=="} 
 </msg>
<msg timestamp="20220622 10:05:16.898" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:16.898" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:10.280" endtime="20220622 10:05:16.898"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:16.900" level="INFO">${RESPONSE_ENCRYPT_TYPE} = Jf/OJFHbE1ixGwYYwjjOuUvIBPeP53P7HjnW9ylVnTYeDx5TaDJXfTbzd1XWs89eXMKlW5TkEo5lSM1LshGCZBZjeZ2efxJhXviqOcU+ltGD2kMKcAEwvCVLJI/JqPq4wGq2EHqXBloRaLvIcoNn+4Yc2/O3NMY85xrDXj5E6r2iF4E/C579OvE4Y7BLbX6nkWwAFjDQ...</msg>
<status status="PASS" starttime="20220622 10:05:16.899" endtime="20220622 10:05:16.901"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:16.904" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text Jf/OJFHbE1ixGwYYwjjOuUvIBPeP53P7HjnW9ylVnTYeDx5TaDJXfTbzd1XWs89eXMKlW5TkEo5lSM1LshGCZBZjeZ2efxJhXviqOcU+ltGD2kMKcAEwvCVLJI/JqPq4wGq2EHqXBloRaLvIcoNn+4Yc2/O3NMY85xrDXj5E6r2iF4E/C579OvE4Y7BLbX6nkWwAFjDQ7yCfLN6AcGpf0IfZMDKTLcUJDw7tHIW+zMq9A2g8RUYPWcnUHAi2vsrN9pny2F5orizjvxQfEfENHTChut6OGfF9TFhldLtuxrMCokbLd5YjSk1bcLARrDJPiUWNhMQRtD5heqfnMrTs3WylM2mP5BuG/ZgNEHFvdXlgfnyx/5sQR6Jk99z7uHixv3iLOxRwg8jAJQ==</msg>
<msg timestamp="20220622 10:05:16.912" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:17.083" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:16.902" endtime="20220622 10:05:17.083"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:17.085" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:17.084" endtime="20220622 10:05:17.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.086" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN004","journey_name":"EKYC QR Forgot PIN","kyc_trans_id":"EQ2022062200005"}}</msg>
<status status="PASS" starttime="20220622 10:05:17.086" endtime="20220622 10:05:17.086"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.087" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN004","journey_name":"EKYC QR Forgot...</msg>
<status status="PASS" starttime="20220622 10:05:17.086" endtime="20220622 10:05:17.087"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:17.087" endtime="20220622 10:05:17.087"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:16.901" endtime="20220622 10:05:17.087"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:17.089" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN004', 'journey_name'...</msg>
<status status="PASS" starttime="20220622 10:05:17.088" endtime="20220622 10:05:17.089"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.114" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:05:17.089" endtime="20220622 10:05:17.114"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.118" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:05:17.114" endtime="20220622 10:05:17.118"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.139" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:05:17.118" endtime="20220622 10:05:17.140"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.143" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:05:17.140" endtime="20220622 10:05:17.143"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.165" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:17.143" endtime="20220622 10:05:17.165"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.169" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220622 10:05:17.165" endtime="20220622 10:05:17.169"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.190" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:05:17.169" endtime="20220622 10:05:17.190"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.193" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:05:17.190" endtime="20220622 10:05:17.193"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.215" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220622 10:05:17.194" endtime="20220622 10:05:17.215"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.219" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220622 10:05:17.215" endtime="20220622 10:05:17.219"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.240" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:17.219" endtime="20220622 10:05:17.240"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.244" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220622 10:05:17.240" endtime="20220622 10:05:17.244"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.267" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:17.244" endtime="20220622 10:05:17.267"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.271" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220622 10:05:17.267" endtime="20220622 10:05:17.271"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.292" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220622 10:05:17.271" endtime="20220622 10:05:17.292"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.295" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220622 10:05:17.292" endtime="20220622 10:05:17.296"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:17.318" level="INFO">${values_code} = ['EQ2022062200005']</msg>
<status status="PASS" starttime="20220622 10:05:17.296" endtime="20220622 10:05:17.318"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.321" level="INFO">${TRANS_ID} = EQ2022062200005</msg>
<status status="PASS" starttime="20220622 10:05:17.318" endtime="20220622 10:05:17.321"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:10.113" endtime="20220622 10:05:17.322"></status>
</kw>
<kw name="Actions_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GET_TERM}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:17.322" endtime="20220622 10:05:17.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_GET_TERM}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.323" level="INFO">{'X-Correlation-Id': '123456789', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:17.323" endtime="20220622 10:05:17.323"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.324" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:17.323" endtime="20220622 10:05:17.324"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : ${GET_TERM} }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.325" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:17.325" endtime="20220622 10:05:17.325"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:17.324" endtime="20220622 10:05:17.326"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:17.326" endtime="20220622 10:05:17.327"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:17.327" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:17.333" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:17.486" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:17.327" endtime="20220622 10:05:17.487"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:17.487" endtime="20220622 10:05:17.488"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:17.326" endtime="20220622 10:05:17.488"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:17.490" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:17.490" level="INFO">${TextFileContent} = AGaqVvWQFTjWBTmPNJV+iwCBR7a7NVYFMTvsTDJK4W8VAwXRGB0vGfGtJfxbGVITGu+aEd8cQJcO2tRAUGg5ngVXuCY9K8sn/VaEA1+PBut7I7s=</msg>
<status status="PASS" starttime="20220622 10:05:17.489" endtime="20220622 10:05:17.490"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:17.491" level="INFO">${RESULT_ENCRYPT_DATA} = AGaqVvWQFTjWBTmPNJV+iwCBR7a7NVYFMTvsTDJK4W8VAwXRGB0vGfGtJfxbGVITGu+aEd8cQJcO2tRAUGg5ngVXuCY9K8sn/VaEA1+PBut7I7s=</msg>
<status status="PASS" starttime="20220622 10:05:17.490" endtime="20220622 10:05:17.491"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:17.489" endtime="20220622 10:05:17.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220622 10:05:17.493" level="INFO">&amp;{body} = { data=AGaqVvWQFTjWBTmPNJV+iwCBR7a7NVYFMTvsTDJK4W8VAwXRGB0vGfGtJfxbGVITGu+aEd8cQJcO2tRAUGg5ngVXuCY9K8sn/VaEA1+PBut7I7s= }</msg>
<status status="PASS" starttime="20220622 10:05:17.492" endtime="20220622 10:05:17.493"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_GET_TERM}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:20.821" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': '123456789', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "AGaqVvWQFTjWBTmPNJV+iwCBR7a7NVYFMTvsTDJK4W8VAwXRGB0vGfGtJfxbGVITGu+aEd8cQJcO2tRAUGg5ngVXuCY9K8sn/VaEA1+PBut7I7s="}' 
 </msg>
<msg timestamp="20220622 10:05:20.821" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:20 GMT', 'x-amzn-RequestId': 'b2250435-31b5-48e6-8296-3128f674d0f0', 'x-amz-apigw-id': 'UGoFKFVoyQ0FgyA=', 'X-Amzn-Trace-Id': 'Root=1-62b286ed-21860ab042915f881c1ef820', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 2e8acdffa9374e6a45e33a53b84b8648.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '_kRnkm1KigQoLQCES7D8Aj6B7rh2FqDoq5vt_RP64nEP0tFHdsUTEA=='} 
 body={"data":"UGsJwSkLpm8ElagQtvLQRcxQfneR79eJ6AOHJTbxTGAMSJqeUmOO/3IWSZxhPF6typQHNXdG4/mWUY9XWvNIWRfusO9xund6Rl9K0iF71vclkx1zWSqXhFFNPUrR/gQY8lDZBhRXt4b5wSgYVt4o+jXGn87pnvxj+2GCxAgty9D4FZXDU4Qapm7s7azv6WVkpZqXDswTEamZ0jP2hx0Wj6fXOO9Wf5zgLGp9SomHaxJ3i23/OP2n1eUSNxX9iL6kvPr+s5vlNSLTq3HFWX6dlbQ="} 
 </msg>
<msg timestamp="20220622 10:05:20.821" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:20.822" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:17.493" endtime="20220622 10:05:20.822"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:20.823" level="INFO">${RESPONSE_ENCRYPT_TYPE} = UGsJwSkLpm8ElagQtvLQRcxQfneR79eJ6AOHJTbxTGAMSJqeUmOO/3IWSZxhPF6typQHNXdG4/mWUY9XWvNIWRfusO9xund6Rl9K0iF71vclkx1zWSqXhFFNPUrR/gQY8lDZBhRXt4b5wSgYVt4o+jXGn87pnvxj+2GCxAgty9D4FZXDU4Qapm7s7azv6WVkpZqXDswT...</msg>
<status status="PASS" starttime="20220622 10:05:20.822" endtime="20220622 10:05:20.823"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:20.826" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text UGsJwSkLpm8ElagQtvLQRcxQfneR79eJ6AOHJTbxTGAMSJqeUmOO/3IWSZxhPF6typQHNXdG4/mWUY9XWvNIWRfusO9xund6Rl9K0iF71vclkx1zWSqXhFFNPUrR/gQY8lDZBhRXt4b5wSgYVt4o+jXGn87pnvxj+2GCxAgty9D4FZXDU4Qapm7s7azv6WVkpZqXDswTEamZ0jP2hx0Wj6fXOO9Wf5zgLGp9SomHaxJ3i23/OP2n1eUSNxX9iL6kvPr+s5vlNSLTq3HFWX6dlbQ=</msg>
<msg timestamp="20220622 10:05:20.834" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:20.987" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:20.824" endtime="20220622 10:05:20.987"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:20.988" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:20.988" endtime="20220622 10:05:20.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:20.989" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:20.988" endtime="20220622 10:05:20.989"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:20.990" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:20.989" endtime="20220622 10:05:20.990"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:20.990" endtime="20220622 10:05:20.991"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:20.824" endtime="20220622 10:05:20.991"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:20.992" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220622 10:05:20.991" endtime="20220622 10:05:20.992"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:21.042" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:20.992" endtime="20220622 10:05:21.042"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.045" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220622 10:05:21.042" endtime="20220622 10:05:21.045"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:21.067" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:05:21.046" endtime="20220622 10:05:21.067"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.068" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:05:21.067" endtime="20220622 10:05:21.068"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:17.322" endtime="20220622 10:05:21.068"></status>
</kw>
<kw name="Validate_customer_qr_code_BU_Journey" library="validate_customer_API_page">
<arguments>
<arg>${row}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CS_VALIDATE}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:21.068" endtime="20220622 10:05:21.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CS_VALIDATE}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.069" level="INFO">{'X-Correlation-Id': 'qwtge40453df', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:21.069" endtime="20220622 10:05:21.069"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.070" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:21.069" endtime="20220622 10:05:21.070"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${${VAR_IMG}}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.073" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:21.072" endtime="20220622 10:05:21.073"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:21.071" endtime="20220622 10:05:21.073"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:21.074" endtime="20220622 10:05:21.074"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:21.074" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:21.080" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:21.273" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:21.074" endtime="20220622 10:05:21.273"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:21.274" endtime="20220622 10:05:21.275"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:21.073" endtime="20220622 10:05:21.275"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:21.277" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:21.278" level="INFO">${TextFileContent} = YcYfRK5kmhKcV+uvQnX/gMLqQDHNF0GCRtDGxy7nUnG4Z26nzinM0peSFS5EQcQ1I1dtz5HIpTBkr/yGqFYLC6/JHDoNZLiiKnSiXrYAnKjVk754EMNMtDxCg7RyKhMCakr5lC7BI/Ak30g16GQ1ZHKoONL9+ADt/3pmV4wPBdzUlfUtGyBC5jNVEd5GcwwYlHJ7Wmcm...</msg>
<status status="PASS" starttime="20220622 10:05:21.277" endtime="20220622 10:05:21.278"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:21.280" level="INFO">${RESULT_ENCRYPT_DATA} = YcYfRK5kmhKcV+uvQnX/gMLqQDHNF0GCRtDGxy7nUnG4Z26nzinM0peSFS5EQcQ1I1dtz5HIpTBkr/yGqFYLC6/JHDoNZLiiKnSiXrYAnKjVk754EMNMtDxCg7RyKhMCakr5lC7BI/Ak30g16GQ1ZHKoONL9+ADt/3pmV4wPBdzUlfUtGyBC5jNVEd5GcwwYlHJ7Wmcm...</msg>
<status status="PASS" starttime="20220622 10:05:21.279" endtime="20220622 10:05:21.280"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:21.275" endtime="20220622 10:05:21.280"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:21.281" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:21.283" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220622 10:05:21.284" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:21.286" level="INFO">${body} = {'data': 'YcYfRK5kmhKcV+uvQnX/gMLqQDHNF0GCRtDGxy7nUnG4Z26nzinM0peSFS5EQcQ1I1dtz5HIpTBkr/yGqFYLC6/JHDoNZLiiKnSiXrYAnKjVk754EMNMtDxCg7RyKhMCakr5lC7BI/Ak30g16GQ1ZHKoONL9+ADt/3pmV4wPBdzUlfUtGyBC5jNVEd5Gcw...</msg>
<status status="PASS" starttime="20220622 10:05:21.281" endtime="20220622 10:05:21.286"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_CS_VALIDATE}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:29.296" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwtge40453df', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '158272'} 
 body=b'{"data": "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'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220622 10:05:29.297" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:29 GMT', 'x-amzn-RequestId': 'dbf1eec8-fa74-48e1-b2a2-7d9e88ece245', 'x-amz-apigw-id': 'UGoFwE6pyQ0Fbkw=', 'X-Amzn-Trace-Id': 'Root=1-62b286f1-16ae9ee378a971e87d317d19', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9209f4d299d8936cb4e04bed0dc106e0.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'RLxibPaGlzjtww_Y_eM4WND2_7BusmP-Fbw_aLOPA4PMmu52Ksm_dA=='} 
 body={"data":"TktG8A3hh9mFsdAC7RIEw/ESBoUzQamvwooG79Rs1eE1gIWv/24h/oVEZi/4zOaiidX1h9+ypBJc5T1TX328y+vOLQcIyBFSKZkVTLz1aXcGhuH4pK/DtHVFG0VIERpMrhEGFRJRRuUoA57wls8ag91iDrRvmal0MjbKuPZ4H8gXG+p39mtomBTgefE9DBE+a5KXnthhjfmkBHc2+8tzePN9DMOeniihxagXOsX6tEhC9FRZn2POOboUWbRjHBUG3lIh/uW4uoEmpncCTDzk0j2qG0iYBTwzmn3WDNY5d9y4m+YCNJgbqupTUupAF4dVBkASenw1ROujos2rzR+My7n5AunWEw=="} 
 </msg>
<msg timestamp="20220622 10:05:29.297" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:29.297" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:21.286" endtime="20220622 10:05:29.297"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.299" level="INFO">${RESPONSE_ENCRYPT_TYPE} = TktG8A3hh9mFsdAC7RIEw/ESBoUzQamvwooG79Rs1eE1gIWv/24h/oVEZi/4zOaiidX1h9+ypBJc5T1TX328y+vOLQcIyBFSKZkVTLz1aXcGhuH4pK/DtHVFG0VIERpMrhEGFRJRRuUoA57wls8ag91iDrRvmal0MjbKuPZ4H8gXG+p39mtomBTgefE9DBE+a5KXnthh...</msg>
<status status="PASS" starttime="20220622 10:05:29.298" endtime="20220622 10:05:29.299"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:29.301" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text TktG8A3hh9mFsdAC7RIEw/ESBoUzQamvwooG79Rs1eE1gIWv/24h/oVEZi/4zOaiidX1h9+ypBJc5T1TX328y+vOLQcIyBFSKZkVTLz1aXcGhuH4pK/DtHVFG0VIERpMrhEGFRJRRuUoA57wls8ag91iDrRvmal0MjbKuPZ4H8gXG+p39mtomBTgefE9DBE+a5KXnthhjfmkBHc2+8tzePN9DMOeniihxagXOsX6tEhC9FRZn2POOboUWbRjHBUG3lIh/uW4uoEmpncCTDzk0j2qG0iYBTwzmn3WDNY5d9y4m+YCNJgbqupTUupAF4dVBkASenw1ROujos2rzR+My7n5AunWEw==</msg>
<msg timestamp="20220622 10:05:29.308" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:29.464" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:29.300" endtime="20220622 10:05:29.465"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:29.466" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:29.465" endtime="20220622 10:05:29.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.466" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0625801026","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220622 10:05:29.466" endtime="20220622 10:05:29.467"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.467" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0625801026","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220622 10:05:29.467" endtime="20220622 10:05:29.467"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:29.467" endtime="20220622 10:05:29.469"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.299" endtime="20220622 10:05:29.469"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:29.469" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0625801026', 'consent...</msg>
<status status="PASS" starttime="20220622 10:05:29.469" endtime="20220622 10:05:29.469"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.492" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:05:29.470" endtime="20220622 10:05:29.492"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.493" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:05:29.492" endtime="20220622 10:05:29.493"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.515" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:29.493" endtime="20220622 10:05:29.515"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.516" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220622 10:05:29.515" endtime="20220622 10:05:29.516"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.536" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:05:29.516" endtime="20220622 10:05:29.537"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.537" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:05:29.537" endtime="20220622 10:05:29.537"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.558" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220622 10:05:29.538" endtime="20220622 10:05:29.558"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.559" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220622 10:05:29.559" endtime="20220622 10:05:29.559"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.581" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:29.560" endtime="20220622 10:05:29.581"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.582" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220622 10:05:29.581" endtime="20220622 10:05:29.582"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.603" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220622 10:05:29.582" endtime="20220622 10:05:29.603"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.604" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220622 10:05:29.603" endtime="20220622 10:05:29.604"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..mobile_number</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.625" level="INFO">${values_code} = ['0625801026']</msg>
<status status="PASS" starttime="20220622 10:05:29.604" endtime="20220622 10:05:29.625"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MOBILE_NO}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.629" level="INFO">${MOBILE_NO} = 0625801026</msg>
<status status="PASS" starttime="20220622 10:05:29.625" endtime="20220622 10:05:29.629"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..consent_new_version</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:29.650" level="INFO">${values_code} = [True]</msg>
<status status="PASS" starttime="20220622 10:05:29.629" endtime="20220622 10:05:29.650"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.654" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220622 10:05:29.650" endtime="20220622 10:05:29.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Actions_Consent</arg>
</arguments>
<kw name="Actions_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GET_CONSENT}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:29.655" endtime="20220622 10:05:29.656"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_GET_CONSENT}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.656" level="INFO">{'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:29.656" endtime="20220622 10:05:29.656"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.657" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:29.657" endtime="20220622 10:05:29.657"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : ${GET_CONSENT} }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.660" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:29.658" endtime="20220622 10:05:29.660"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.658" endtime="20220622 10:05:29.660"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:29.661" endtime="20220622 10:05:29.661"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:29.662" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:29.667" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:29.823" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:29.661" endtime="20220622 10:05:29.823"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:29.824" endtime="20220622 10:05:29.825"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.660" endtime="20220622 10:05:29.825"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:29.827" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:29.827" level="INFO">${TextFileContent} = Qvpx0S4CsiQtIETZPxEohvL3QuIASoB+pHu8QbAAds4mbBbOuGcn9Syli2kGNU8bFkXvV6LeTb5hkQv5f0l2xRE/aS7kX16HBgzLIZVWxtlv69w=</msg>
<status status="PASS" starttime="20220622 10:05:29.827" endtime="20220622 10:05:29.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:29.829" level="INFO">${RESULT_ENCRYPT_DATA} = Qvpx0S4CsiQtIETZPxEohvL3QuIASoB+pHu8QbAAds4mbBbOuGcn9Syli2kGNU8bFkXvV6LeTb5hkQv5f0l2xRE/aS7kX16HBgzLIZVWxtlv69w=</msg>
<status status="PASS" starttime="20220622 10:05:29.828" endtime="20220622 10:05:29.829"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.826" endtime="20220622 10:05:29.829"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:29.829" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:29.830" level="INFO">To JSON using : content={"data": "Qvpx0S4CsiQtIETZPxEohvL3QuIASoB+pHu8QbAAds4mbBbOuGcn9Syli2kGNU8bFkXvV6LeTb5hkQv5f0l2xRE/aS7kX16HBgzLIZVWxtlv69w="} </msg>
<msg timestamp="20220622 10:05:29.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:29.830" level="INFO">${body} = {'data': 'Qvpx0S4CsiQtIETZPxEohvL3QuIASoB+pHu8QbAAds4mbBbOuGcn9Syli2kGNU8bFkXvV6LeTb5hkQv5f0l2xRE/aS7kX16HBgzLIZVWxtlv69w='}</msg>
<status status="PASS" starttime="20220622 10:05:29.829" endtime="20220622 10:05:29.830"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_GET_CONSENT}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:35.070" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '124'} 
 body=b'{"data": "Qvpx0S4CsiQtIETZPxEohvL3QuIASoB+pHu8QbAAds4mbBbOuGcn9Syli2kGNU8bFkXvV6LeTb5hkQv5f0l2xRE/aS7kX16HBgzLIZVWxtlv69w="}' 
 </msg>
<msg timestamp="20220622 10:05:35.070" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:35 GMT', 'x-amzn-RequestId': '3e9368f5-c035-43e2-a1a0-ff3329f29084', 'x-amz-apigw-id': 'UGoHFFtCSQ0FV3g=', 'X-Amzn-Trace-Id': 'Root=1-62b286f9-26a970b76a92c89f2e2c8ace', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d1213591a98aaf070e22a40b4f832f80.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '2mblo_Vy27dABi5lYkdwN022_yjLfIuTsk-484Ax6uI_9Jw21jjLEw=='} 
 body={"data":"vdHq3ombs8eV6XIPkA9SvPsBePQCtbm8N4khQsHI5Z0kHBIbyo8TOzG/2jR2W0Pd4H+XB//iDlpRhh1V9k7ijnHBCjrQwVHmOz70nsbu7JQwWLAWShUZ19bPt8WBFaAkRbrlrVT9pXe8C+4i+tPvphauDAjBVYxd+P/V2d2T/qlXGgFzA1ZnftnS8esn1GJFgD1YtbawixMH11HIDt8UAbVgw/ZGDQLjA48IpLxsW41ACwBZiJBNBVAHTJOAzIXED7JYI+GButjdZi4jPOvHmxY="} 
 </msg>
<msg timestamp="20220622 10:05:35.070" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:35.070" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:29.831" endtime="20220622 10:05:35.070"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.072" level="INFO">${RESPONSE_ENCRYPT_TYPE} = vdHq3ombs8eV6XIPkA9SvPsBePQCtbm8N4khQsHI5Z0kHBIbyo8TOzG/2jR2W0Pd4H+XB//iDlpRhh1V9k7ijnHBCjrQwVHmOz70nsbu7JQwWLAWShUZ19bPt8WBFaAkRbrlrVT9pXe8C+4i+tPvphauDAjBVYxd+P/V2d2T/qlXGgFzA1ZnftnS8esn1GJFgD1Ytbaw...</msg>
<status status="PASS" starttime="20220622 10:05:35.071" endtime="20220622 10:05:35.072"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:35.074" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text vdHq3ombs8eV6XIPkA9SvPsBePQCtbm8N4khQsHI5Z0kHBIbyo8TOzG/2jR2W0Pd4H+XB//iDlpRhh1V9k7ijnHBCjrQwVHmOz70nsbu7JQwWLAWShUZ19bPt8WBFaAkRbrlrVT9pXe8C+4i+tPvphauDAjBVYxd+P/V2d2T/qlXGgFzA1ZnftnS8esn1GJFgD1YtbawixMH11HIDt8UAbVgw/ZGDQLjA48IpLxsW41ACwBZiJBNBVAHTJOAzIXED7JYI+GButjdZi4jPOvHmxY=</msg>
<msg timestamp="20220622 10:05:35.088" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:35.288" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:35.073" endtime="20220622 10:05:35.289"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:35.290" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:35.290" endtime="20220622 10:05:35.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.291" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:35.290" endtime="20220622 10:05:35.292"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.293" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:35.292" endtime="20220622 10:05:35.293"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:35.294" endtime="20220622 10:05:35.294"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:35.072" endtime="20220622 10:05:35.294"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:35.295" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220622 10:05:35.295" endtime="20220622 10:05:35.295"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:35.317" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:05:35.295" endtime="20220622 10:05:35.317"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.321" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220622 10:05:35.317" endtime="20220622 10:05:35.321"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.655" endtime="20220622 10:05:35.321"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:29.654" endtime="20220622 10:05:35.321"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:21.068" endtime="20220622 10:05:35.321"></status>
</kw>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:35.322" endtime="20220622 10:05:35.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.323" level="INFO">{'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:35.323" endtime="20220622 10:05:35.323"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.323" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:35.323" endtime="20220622 10:05:35.324"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.325" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:35.324" endtime="20220622 10:05:35.325"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:35.324" endtime="20220622 10:05:35.325"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:35.326" endtime="20220622 10:05:35.326"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:35.327" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:35.332" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:35.549" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:35.326" endtime="20220622 10:05:35.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:35.550" endtime="20220622 10:05:35.551"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:35.326" endtime="20220622 10:05:35.551"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:35.554" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:35.555" level="INFO">${TextFileContent} = AhAAflb29N6lWcjjUBHDlePBs6sYNpDub/yU1tDZa3Lkd7bIsvawerWgmlhMu7x05I8kN8RagEUrCrDJtLoUv3vgWhrOhU9RdjCyENNfXeOowp178g==</msg>
<status status="PASS" starttime="20220622 10:05:35.553" endtime="20220622 10:05:35.555"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:35.556" level="INFO">${RESULT_ENCRYPT_DATA} = AhAAflb29N6lWcjjUBHDlePBs6sYNpDub/yU1tDZa3Lkd7bIsvawerWgmlhMu7x05I8kN8RagEUrCrDJtLoUv3vgWhrOhU9RdjCyENNfXeOowp178g==</msg>
<status status="PASS" starttime="20220622 10:05:35.555" endtime="20220622 10:05:35.556"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:35.552" endtime="20220622 10:05:35.556"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:35.556" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:35.557" level="INFO">To JSON using : content={"data": "AhAAflb29N6lWcjjUBHDlePBs6sYNpDub/yU1tDZa3Lkd7bIsvawerWgmlhMu7x05I8kN8RagEUrCrDJtLoUv3vgWhrOhU9RdjCyENNfXeOowp178g=="} </msg>
<msg timestamp="20220622 10:05:35.557" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:35.558" level="INFO">${body} = {'data': 'AhAAflb29N6lWcjjUBHDlePBs6sYNpDub/yU1tDZa3Lkd7bIsvawerWgmlhMu7x05I8kN8RagEUrCrDJtLoUv3vgWhrOhU9RdjCyENNfXeOowp178g=='}</msg>
<status status="PASS" starttime="20220622 10:05:35.556" endtime="20220622 10:05:35.558"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_CHECK_DOPA}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:44.884" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '128'} 
 body=b'{"data": "AhAAflb29N6lWcjjUBHDlePBs6sYNpDub/yU1tDZa3Lkd7bIsvawerWgmlhMu7x05I8kN8RagEUrCrDJtLoUv3vgWhrOhU9RdjCyENNfXeOowp178g=="}' 
 </msg>
<msg timestamp="20220622 10:05:44.884" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=408, reason=Request Timeout 
 headers={'Content-Type': 'application/json', 'Content-Length': '547', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:44 GMT', 'x-amzn-RequestId': '919d6b60-dcfb-4c0f-8972-9eb82a0740bc', 'x-amz-apigw-id': 'UGoH-F6wSQ0FgyA=', 'X-Amzn-Trace-Id': 'Root=1-62b286ff-3b5d076619adbbe12a29b660', 'X-Cache': 'Error from cloudfront', 'Via': '1.1 cec06ea4816324cb747f713ba5733e00.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'cCnImF5CFchwhhYfPDHh973ca1_GgKTKYa6kzsqH5nuL5arpW7PbzA=='} 
 body={"data":"yIJt5QB2aHIXaibk1Cl5WmJ//+is7ea5XT1CW4Hcf5xOI8wi2QGd824LZocp2TW2QjyyZmF6sms4mg0c6vZYZByB0CIsC+1IlghRs3VL9z9rW5xHMLGfU7zazDJx63vL2jmUsizHqWpwZVAvkYPWD1Zl7Q1z3kr4ZpC9KYXXJrccjn72STrEDLCsp3IFq+opdVTfbP/hFhgNJuBoBNS9dORUZ2IKTNPIK59MfW/ec1xy7bB3zgvIZBjdwPgjaZZ4l9i7bTQsu4Mhg3gBrhxdNvTL4qH4W5Jbodgd2s4Xm+KJzpt04y+wHWPHZFwJTrTWOY78daIYIGSuPpVvFTpCIDMLNBwaKnTNSi7uEi+cs5NYAJNseC2hdw2ekAldRlVe3lHhHV5oGTkrS2kACWMqBysg9LKzyLOYNdqpXb+Emzew0GSsiQeDJpGAyg7wdZp9bwyYRnkCo1SPzdlAXhWKetW/jHJFHWrJIecqPETN+ohTKm+h5ehh+Q5DOh5IlBaIRpGk8Og6S2I3sJ2mT5AWax8="} 
 </msg>
<msg timestamp="20220622 10:05:44.884" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:44.884" level="INFO">${response} = &lt;Response [408]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:35.559" endtime="20220622 10:05:44.884"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:44.886" level="INFO">${RESPONSE_ENCRYPT_TYPE} = yIJt5QB2aHIXaibk1Cl5WmJ//+is7ea5XT1CW4Hcf5xOI8wi2QGd824LZocp2TW2QjyyZmF6sms4mg0c6vZYZByB0CIsC+1IlghRs3VL9z9rW5xHMLGfU7zazDJx63vL2jmUsizHqWpwZVAvkYPWD1Zl7Q1z3kr4ZpC9KYXXJrccjn72STrEDLCsp3IFq+opdVTfbP/h...</msg>
<status status="PASS" starttime="20220622 10:05:44.885" endtime="20220622 10:05:44.886"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:44.889" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text yIJt5QB2aHIXaibk1Cl5WmJ//+is7ea5XT1CW4Hcf5xOI8wi2QGd824LZocp2TW2QjyyZmF6sms4mg0c6vZYZByB0CIsC+1IlghRs3VL9z9rW5xHMLGfU7zazDJx63vL2jmUsizHqWpwZVAvkYPWD1Zl7Q1z3kr4ZpC9KYXXJrccjn72STrEDLCsp3IFq+opdVTfbP/hFhgNJuBoBNS9dORUZ2IKTNPIK59MfW/ec1xy7bB3zgvIZBjdwPgjaZZ4l9i7bTQsu4Mhg3gBrhxdNvTL4qH4W5Jbodgd2s4Xm+KJzpt04y+wHWPHZFwJTrTWOY78daIYIGSuPpVvFTpCIDMLNBwaKnTNSi7uEi+cs5NYAJNseC2hdw2ekAldRlVe3lHhHV5oGTkrS2kACWMqBysg9LKzyLOYNdqpXb+Emzew0GSsiQeDJpGAyg7wdZp9bwyYRnkCo1SPzdlAXhWKetW/jHJFHWrJIecqPETN+ohTKm+h5ehh+Q5DOh5IlBaIRpGk8Og6S2I3sJ2mT5AWax8=</msg>
<msg timestamp="20220622 10:05:44.895" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:45.071" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:44.888" endtime="20220622 10:05:45.071"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:45.073" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:45.072" endtime="20220622 10:05:45.073"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.074" level="INFO">{"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_message_th":"ระบบไม่สามารถดำเนินการต่อได้ กรุณาลองใหม่อีกครั้ง"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:45.073" endtime="20220622 10:05:45.074"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.074" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_...</msg>
<status status="PASS" starttime="20220622 10:05:45.074" endtime="20220622 10:05:45.074"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:45.075" endtime="20220622 10:05:45.075"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:44.887" endtime="20220622 10:05:45.075"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:45.076" level="INFO">${convert_result} = {'status': {'code': '1004', 'message': 'Request Timeout', 'remark': 'DOPA Offline', 'user_code': 'E0025', 'user_message_en': 'We are unable to process, since the DOPA is not available. Please try agai...</msg>
<status status="PASS" starttime="20220622 10:05:45.076" endtime="20220622 10:05:45.076"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:45.103" level="INFO">${values_code} = ['1004']</msg>
<status status="PASS" starttime="20220622 10:05:45.076" endtime="20220622 10:05:45.103"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.106" level="INFO">${DOPA_RESPONSE_CODE} = 1004</msg>
<status status="PASS" starttime="20220622 10:05:45.103" endtime="20220622 10:05:45.106"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:45.131" level="INFO">${values_code} = ['Request Timeout']</msg>
<status status="PASS" starttime="20220622 10:05:45.107" endtime="20220622 10:05:45.131"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.136" level="INFO">${DOPA_MESSAGE} = Request Timeout</msg>
<status status="PASS" starttime="20220622 10:05:45.132" endtime="20220622 10:05:45.136"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:45.159" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:45.136" endtime="20220622 10:05:45.159"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.163" level="INFO">${DOPA_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:45.160" endtime="20220622 10:05:45.163"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:45.186" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:45.163" endtime="20220622 10:05:45.186"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.187" level="INFO">${RESPONSE_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:45.186" endtime="20220622 10:05:45.187"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:45.189" endtime="20220622 10:05:45.189"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.190" level="INFO">{'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:45.189" endtime="20220622 10:05:45.190"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.190" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:45.190" endtime="20220622 10:05:45.191"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.192" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:45.191" endtime="20220622 10:05:45.192"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.191" endtime="20220622 10:05:45.192"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:45.193" endtime="20220622 10:05:45.193"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:45.194" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:45.199" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:45.357" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:45.194" endtime="20220622 10:05:45.357"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:45.358" endtime="20220622 10:05:45.358"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.193" endtime="20220622 10:05:45.358"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:45.360" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:45.361" level="INFO">${TextFileContent} = 5AxQ2MgPKR6OAVOSEM0+f/gANbIuipSOhcwI+A2X3jc+TohigKHuR2tnsgJt7XKJo30mRVSm94geI5XUU/7uAadX+dclN2bRJYWSWeXlx/tTuMTvxQ==</msg>
<status status="PASS" starttime="20220622 10:05:45.360" endtime="20220622 10:05:45.361"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:45.362" level="INFO">${RESULT_ENCRYPT_DATA} = 5AxQ2MgPKR6OAVOSEM0+f/gANbIuipSOhcwI+A2X3jc+TohigKHuR2tnsgJt7XKJo30mRVSm94geI5XUU/7uAadX+dclN2bRJYWSWeXlx/tTuMTvxQ==</msg>
<status status="PASS" starttime="20220622 10:05:45.361" endtime="20220622 10:05:45.362"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.359" endtime="20220622 10:05:45.362"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:45.362" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:45.363" level="INFO">To JSON using : content={"data": "5AxQ2MgPKR6OAVOSEM0+f/gANbIuipSOhcwI+A2X3jc+TohigKHuR2tnsgJt7XKJo30mRVSm94geI5XUU/7uAadX+dclN2bRJYWSWeXlx/tTuMTvxQ=="} </msg>
<msg timestamp="20220622 10:05:45.363" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:45.363" level="INFO">${body} = {'data': '5AxQ2MgPKR6OAVOSEM0+f/gANbIuipSOhcwI+A2X3jc+TohigKHuR2tnsgJt7XKJo30mRVSm94geI5XUU/7uAadX+dclN2bRJYWSWeXlx/tTuMTvxQ=='}</msg>
<status status="PASS" starttime="20220622 10:05:45.362" endtime="20220622 10:05:45.363"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_CHECK_DOPA}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:50.545" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '128'} 
 body=b'{"data": "5AxQ2MgPKR6OAVOSEM0+f/gANbIuipSOhcwI+A2X3jc+TohigKHuR2tnsgJt7XKJo30mRVSm94geI5XUU/7uAadX+dclN2bRJYWSWeXlx/tTuMTvxQ=="}' 
 </msg>
<msg timestamp="20220622 10:05:50.545" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=408, reason=Request Timeout 
 headers={'Content-Type': 'application/json', 'Content-Length': '547', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:50 GMT', 'x-amzn-RequestId': 'ae67afc2-a50b-4390-92b4-71680ee322d4', 'x-amz-apigw-id': 'UGoJgGJASQ0Fk5g=', 'X-Amzn-Trace-Id': 'Root=1-62b28709-507ea94944d53fe33238a1f6', 'X-Cache': 'Error from cloudfront', 'Via': '1.1 d842078eb3cfbf678bca132476ada532.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'CZfP31DnH1qh6XuXtigTE-clhrNMRZ_7156UIosCID0RWF-9-Ag7NQ=='} 
 body={"data":"r+CM8BZim17E6DpJWuHQGnV94raqnM0/nr+uYNV2HHDhC3gX5IEKbYKU4Eebr2XDFH/SzOmex7z4OHudf48FH+P3XjYS7lYHT4FF0EAt2OAGPIbcMIaq0BrHRXlaIrgaz6OyQQvCAC1Mh/H2yaPVVaPSEQU0n3sFgwSOT1Z/52BemW5/lUl155Tz4zdMrHUwpdgAPBnAQMje8PixAKrbV1XZuL0GyM8YtHl+0722Nh8eWVCRwn+/mNqbSX3uhEztOSY8T8VzCfjSjazMk2R/d+5dnJ5D7zhii9haoi4xsjUj1aAd/zNe0t5hlc2PuMGHr/SbyoivRxl/hF/AJPnWeD1VUKWO6++mnXK8bds2MEPiV7yn9xNZTTab2oyjunufr3Uhf29AFdwGj/1lR+AqD2QFufhQtZ31Myo4UILlrKbZTx9/VDHlWN2oX2baBKUtzwWnQesEBVFFLV5fTGJZ5VWvNvfveds+fbfnYn037oEvP8v3FMjtudfkfXZX2fPKobhRt/BEnFe0Kh6QSad4aOM="} 
 </msg>
<msg timestamp="20220622 10:05:50.545" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:50.545" level="INFO">${response} = &lt;Response [408]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:45.363" endtime="20220622 10:05:50.546"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.548" level="INFO">${RESPONSE_ENCRYPT_TYPE} = r+CM8BZim17E6DpJWuHQGnV94raqnM0/nr+uYNV2HHDhC3gX5IEKbYKU4Eebr2XDFH/SzOmex7z4OHudf48FH+P3XjYS7lYHT4FF0EAt2OAGPIbcMIaq0BrHRXlaIrgaz6OyQQvCAC1Mh/H2yaPVVaPSEQU0n3sFgwSOT1Z/52BemW5/lUl155Tz4zdMrHUwpdgAPBnA...</msg>
<status status="PASS" starttime="20220622 10:05:50.546" endtime="20220622 10:05:50.548"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:50.552" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text r+CM8BZim17E6DpJWuHQGnV94raqnM0/nr+uYNV2HHDhC3gX5IEKbYKU4Eebr2XDFH/SzOmex7z4OHudf48FH+P3XjYS7lYHT4FF0EAt2OAGPIbcMIaq0BrHRXlaIrgaz6OyQQvCAC1Mh/H2yaPVVaPSEQU0n3sFgwSOT1Z/52BemW5/lUl155Tz4zdMrHUwpdgAPBnAQMje8PixAKrbV1XZuL0GyM8YtHl+0722Nh8eWVCRwn+/mNqbSX3uhEztOSY8T8VzCfjSjazMk2R/d+5dnJ5D7zhii9haoi4xsjUj1aAd/zNe0t5hlc2PuMGHr/SbyoivRxl/hF/AJPnWeD1VUKWO6++mnXK8bds2MEPiV7yn9xNZTTab2oyjunufr3Uhf29AFdwGj/1lR+AqD2QFufhQtZ31Myo4UILlrKbZTx9/VDHlWN2oX2baBKUtzwWnQesEBVFFLV5fTGJZ5VWvNvfveds+fbfnYn037oEvP8v3FMjtudfkfXZX2fPKobhRt/BEnFe0Kh6QSad4aOM=</msg>
<msg timestamp="20220622 10:05:50.560" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:50.713" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:50.549" endtime="20220622 10:05:50.713"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:50.714" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:50.714" endtime="20220622 10:05:50.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.715" level="INFO">{"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_message_th":"ระบบไม่สามารถดำเนินการต่อได้ กรุณาลองใหม่อีกครั้ง"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:50.715" endtime="20220622 10:05:50.715"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.716" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_...</msg>
<status status="PASS" starttime="20220622 10:05:50.716" endtime="20220622 10:05:50.716"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:50.716" endtime="20220622 10:05:50.717"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.548" endtime="20220622 10:05:50.717"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:50.717" level="INFO">${convert_result} = {'status': {'code': '1004', 'message': 'Request Timeout', 'remark': 'DOPA Offline', 'user_code': 'E0025', 'user_message_en': 'We are unable to process, since the DOPA is not available. Please try agai...</msg>
<status status="PASS" starttime="20220622 10:05:50.717" endtime="20220622 10:05:50.717"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:50.742" level="INFO">${values_code} = ['1004']</msg>
<status status="PASS" starttime="20220622 10:05:50.718" endtime="20220622 10:05:50.742"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.742" level="INFO">${DOPA_RESPONSE_CODE} = 1004</msg>
<status status="PASS" starttime="20220622 10:05:50.742" endtime="20220622 10:05:50.743"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:50.764" level="INFO">${values_code} = ['Request Timeout']</msg>
<status status="PASS" starttime="20220622 10:05:50.743" endtime="20220622 10:05:50.764"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.765" level="INFO">${DOPA_MESSAGE} = Request Timeout</msg>
<status status="PASS" starttime="20220622 10:05:50.765" endtime="20220622 10:05:50.765"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:50.787" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:50.765" endtime="20220622 10:05:50.787"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.788" level="INFO">${DOPA_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:50.787" endtime="20220622 10:05:50.788"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:50.809" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:50.788" endtime="20220622 10:05:50.809"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.810" level="INFO">${RESPONSE_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:50.809" endtime="20220622 10:05:50.810"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:50.812" endtime="20220622 10:05:50.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.813" level="INFO">{'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:50.812" endtime="20220622 10:05:50.813"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.813" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:50.813" endtime="20220622 10:05:50.814"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.815" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:50.814" endtime="20220622 10:05:50.815"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.814" endtime="20220622 10:05:50.815"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:50.816" endtime="20220622 10:05:50.816"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:50.816" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:50.822" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:50.981" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:50.816" endtime="20220622 10:05:50.982"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:50.983" endtime="20220622 10:05:50.984"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.815" endtime="20220622 10:05:50.984"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:50.986" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:50.986" level="INFO">${TextFileContent} = TAVKK/10tTjwrkQDT9Ygwe30KnvW+PTGcJd9RTVH25Wny15s5GWjjA2j+xSBNYmjmqrs9LoDZoc0epci0dFon0iQylWLNj4B89iywZrVdoZ0tANVSQ==</msg>
<status status="PASS" starttime="20220622 10:05:50.985" endtime="20220622 10:05:50.986"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:50.987" level="INFO">${RESULT_ENCRYPT_DATA} = TAVKK/10tTjwrkQDT9Ygwe30KnvW+PTGcJd9RTVH25Wny15s5GWjjA2j+xSBNYmjmqrs9LoDZoc0epci0dFon0iQylWLNj4B89iywZrVdoZ0tANVSQ==</msg>
<status status="PASS" starttime="20220622 10:05:50.986" endtime="20220622 10:05:50.987"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.984" endtime="20220622 10:05:50.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:50.988" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:50.988" level="INFO">To JSON using : content={"data": "TAVKK/10tTjwrkQDT9Ygwe30KnvW+PTGcJd9RTVH25Wny15s5GWjjA2j+xSBNYmjmqrs9LoDZoc0epci0dFon0iQylWLNj4B89iywZrVdoZ0tANVSQ=="} </msg>
<msg timestamp="20220622 10:05:50.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:50.988" level="INFO">${body} = {'data': 'TAVKK/10tTjwrkQDT9Ygwe30KnvW+PTGcJd9RTVH25Wny15s5GWjjA2j+xSBNYmjmqrs9LoDZoc0epci0dFon0iQylWLNj4B89iywZrVdoZ0tANVSQ=='}</msg>
<status status="PASS" starttime="20220622 10:05:50.988" endtime="20220622 10:05:50.988"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_CHECK_DOPA}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:56.316" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '128'} 
 body=b'{"data": "TAVKK/10tTjwrkQDT9Ygwe30KnvW+PTGcJd9RTVH25Wny15s5GWjjA2j+xSBNYmjmqrs9LoDZoc0epci0dFon0iQylWLNj4B89iywZrVdoZ0tANVSQ=="}' 
 </msg>
<msg timestamp="20220622 10:05:56.317" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=408, reason=Request Timeout 
 headers={'Content-Type': 'application/json', 'Content-Length': '547', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:56 GMT', 'x-amzn-RequestId': '520a0a46-cca4-41a0-a207-200ce4c83af5', 'x-amz-apigw-id': 'UGoKYHpWyQ0FnmQ=', 'X-Amzn-Trace-Id': 'Root=1-62b2870f-14ab19d56f996d162786f692', 'X-Cache': 'Error from cloudfront', 'Via': '1.1 8e3e05242a0bb7a7c9e15f68f02277ca.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'HiwjR9Z0WdkndBJ6vOH-crJcK_cgYzWJpORQdCqms20YfUXkzLzOig=='} 
 body={"data":"xc4otvdOiQWrkNnlNf++7kB3+h51lJ/whsOJVoCIPEczliGhs9I3fyGmq/+mLh6LXYd/bKGAIbuKwrEevQ/sLTOsygOdKPrsIQWa6JTpli3VsC7GiFqTB8l0KI4g9ZQ+4vXNu6yiMlC/HpUWrDh5dDbRRGy4FBPxxWfV8W49Nq5947rDclVxIGjUMLEoNX1mpz6TGdOaShsNy6nMwu4kS0jNm6zdHHAXJSODQOjxgR5RwZZngS42TiWGzPvoaNuDav+8ZLaWCyZpp8mftb1kVthxxIypSHRyyIsl7bI5bbGzEho+waCO2KOv8yfL54fcbbjjXSxbr7/knMutA6xCHlNoSYDEuBfDuCnEVBy26G0RehcnPnExIBaNfVtHV/MfeX7pFk6tSSEsT6aKyBbPSv6TYDA1R+gzO2ebM80wL7tYg0hfQm5/hJbsV+j1gSf7x/4ZZkiPH5X3w6foM4OrlXh7SAU4bSl6gC1bxW/Ny4h4xlUXfL+7LkGkK76+SWuhXWE6ySr8P1eoimx5765gk+w="} 
 </msg>
<msg timestamp="20220622 10:05:56.317" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:56.317" level="INFO">${response} = &lt;Response [408]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:50.989" endtime="20220622 10:05:56.317"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.319" level="INFO">${RESPONSE_ENCRYPT_TYPE} = xc4otvdOiQWrkNnlNf++7kB3+h51lJ/whsOJVoCIPEczliGhs9I3fyGmq/+mLh6LXYd/bKGAIbuKwrEevQ/sLTOsygOdKPrsIQWa6JTpli3VsC7GiFqTB8l0KI4g9ZQ+4vXNu6yiMlC/HpUWrDh5dDbRRGy4FBPxxWfV8W49Nq5947rDclVxIGjUMLEoNX1mpz6TGdOa...</msg>
<status status="PASS" starttime="20220622 10:05:56.318" endtime="20220622 10:05:56.319"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:56.322" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text xc4otvdOiQWrkNnlNf++7kB3+h51lJ/whsOJVoCIPEczliGhs9I3fyGmq/+mLh6LXYd/bKGAIbuKwrEevQ/sLTOsygOdKPrsIQWa6JTpli3VsC7GiFqTB8l0KI4g9ZQ+4vXNu6yiMlC/HpUWrDh5dDbRRGy4FBPxxWfV8W49Nq5947rDclVxIGjUMLEoNX1mpz6TGdOaShsNy6nMwu4kS0jNm6zdHHAXJSODQOjxgR5RwZZngS42TiWGzPvoaNuDav+8ZLaWCyZpp8mftb1kVthxxIypSHRyyIsl7bI5bbGzEho+waCO2KOv8yfL54fcbbjjXSxbr7/knMutA6xCHlNoSYDEuBfDuCnEVBy26G0RehcnPnExIBaNfVtHV/MfeX7pFk6tSSEsT6aKyBbPSv6TYDA1R+gzO2ebM80wL7tYg0hfQm5/hJbsV+j1gSf7x/4ZZkiPH5X3w6foM4OrlXh7SAU4bSl6gC1bxW/Ny4h4xlUXfL+7LkGkK76+SWuhXWE6ySr8P1eoimx5765gk+w=</msg>
<msg timestamp="20220622 10:05:56.329" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:56.481" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:56.320" endtime="20220622 10:05:56.481"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:56.483" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:56.482" endtime="20220622 10:05:56.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.484" level="INFO">{"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_message_th":"ระบบไม่สามารถดำเนินการต่อได้ กรุณาลองใหม่อีกครั้ง"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:56.483" endtime="20220622 10:05:56.484"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.486" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"1004","message":"Request Timeout","remark":"DOPA Offline","user_code":"E0025","user_message_en":"We are unable to process, since the DOPA is not available. Please try again.","user_...</msg>
<status status="PASS" starttime="20220622 10:05:56.484" endtime="20220622 10:05:56.486"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:56.486" endtime="20220622 10:05:56.487"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.319" endtime="20220622 10:05:56.487"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:56.487" level="INFO">${convert_result} = {'status': {'code': '1004', 'message': 'Request Timeout', 'remark': 'DOPA Offline', 'user_code': 'E0025', 'user_message_en': 'We are unable to process, since the DOPA is not available. Please try agai...</msg>
<status status="PASS" starttime="20220622 10:05:56.487" endtime="20220622 10:05:56.487"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:56.512" level="INFO">${values_code} = ['1004']</msg>
<status status="PASS" starttime="20220622 10:05:56.488" endtime="20220622 10:05:56.512"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.513" level="INFO">${DOPA_RESPONSE_CODE} = 1004</msg>
<status status="PASS" starttime="20220622 10:05:56.512" endtime="20220622 10:05:56.513"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:56.535" level="INFO">${values_code} = ['Request Timeout']</msg>
<status status="PASS" starttime="20220622 10:05:56.513" endtime="20220622 10:05:56.535"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.536" level="INFO">${DOPA_MESSAGE} = Request Timeout</msg>
<status status="PASS" starttime="20220622 10:05:56.535" endtime="20220622 10:05:56.536"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:56.557" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:56.536" endtime="20220622 10:05:56.557"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.558" level="INFO">${DOPA_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:56.557" endtime="20220622 10:05:56.558"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:56.583" level="INFO">${values_code} = ['DOPA Offline']</msg>
<status status="PASS" starttime="20220622 10:05:56.558" endtime="20220622 10:05:56.583"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.584" level="INFO">${RESPONSE_REMARK} = DOPA Offline</msg>
<status status="PASS" starttime="20220622 10:05:56.583" endtime="20220622 10:05:56.584"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:56.585" endtime="20220622 10:05:56.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_CHECK_DOPA}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.586" level="INFO">{'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:56.586" endtime="20220622 10:05:56.586"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.587" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:56.586" endtime="20220622 10:05:56.587"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.589" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:56.588" endtime="20220622 10:05:56.589"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.587" endtime="20220622 10:05:56.589"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:56.590" endtime="20220622 10:05:56.590"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:56.592" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220622 10:05:56.597" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:56.761" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:56.591" endtime="20220622 10:05:56.762"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:56.762" endtime="20220622 10:05:56.763"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.589" endtime="20220622 10:05:56.763"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:56.766" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:56.766" level="INFO">${TextFileContent} = 9Yr7YnA/zOYWj/zyVMaRIGXxivoAbmMX30jimnYSRd3yP+wygVubT/ZTvxVTmILn+gHOPBcVjl18LSvE6Pv7uK75WLVD3Ye591+qA0ptsvcc2piKrg==</msg>
<status status="PASS" starttime="20220622 10:05:56.765" endtime="20220622 10:05:56.766"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:56.767" level="INFO">${RESULT_ENCRYPT_DATA} = 9Yr7YnA/zOYWj/zyVMaRIGXxivoAbmMX30jimnYSRd3yP+wygVubT/ZTvxVTmILn+gHOPBcVjl18LSvE6Pv7uK75WLVD3Ye591+qA0ptsvcc2piKrg==</msg>
<status status="PASS" starttime="20220622 10:05:56.767" endtime="20220622 10:05:56.768"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.764" endtime="20220622 10:05:56.768"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:56.768" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:56.769" level="INFO">To JSON using : content={"data": "9Yr7YnA/zOYWj/zyVMaRIGXxivoAbmMX30jimnYSRd3yP+wygVubT/ZTvxVTmILn+gHOPBcVjl18LSvE6Pv7uK75WLVD3Ye591+qA0ptsvcc2piKrg=="} </msg>
<msg timestamp="20220622 10:05:56.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:56.769" level="INFO">${body} = {'data': '9Yr7YnA/zOYWj/zyVMaRIGXxivoAbmMX30jimnYSRd3yP+wygVubT/ZTvxVTmILn+gHOPBcVjl18LSvE6Pv7uK75WLVD3Ye591+qA0ptsvcc2piKrg=='}</msg>
<status status="PASS" starttime="20220622 10:05:56.768" endtime="20220622 10:05:56.769"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_CHECK_DOPA}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220622 10:05:57.896" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'qwefewgrehe', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '128'} 
 body=b'{"data": "9Yr7YnA/zOYWj/zyVMaRIGXxivoAbmMX30jimnYSRd3yP+wygVubT/ZTvxVTmILn+gHOPBcVjl18LSvE6Pv7uK75WLVD3Ye591+qA0ptsvcc2piKrg=="}' 
 </msg>
<msg timestamp="20220622 10:05:57.896" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '663', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:05:57 GMT', 'x-amzn-RequestId': 'b7d3ff68-8837-4eca-9a87-21f5505eb2d8', 'x-amz-apigw-id': 'UGoLSFAWyQ0Fh1Q=', 'X-Amzn-Trace-Id': 'Root=1-62b28714-61ba8dc3134bd5031ccce72c', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 e367bdd39e3621c2960b6faba9d5eb96.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '-ZfTUUI3cGUcWHYFAaQw2Wkq6nALnb4PdEhMx3nwWAU-nxyB3Ldgvw=='} 
 body={"data":"CTUeCkwLc6R/IxGucfjhbrVRkVSdrrbd0FtkFttuN7/vCWGn/rHCWVKgYYE7GrP9RDho804dMjoHBsqOVxmkFXsvay9yvCabvTQ5EAiYx23BzLETnUKqJ/zM8xErHV1HzOP2Pe0DOReholQevuP4SM4JkaL8ocXQN0faYQPnllGRMaoLNJzh22BmHvTyb29jee+/4xRuRl98CWCsslAPBdPatZuZ7E89opJPBDC101o+inBpC1ryCMDAPmgCj6K6JO6LiMd9GnkP1LNxpldGmp80ZfotgVigTIVxsrh9FV6Qwpno0JJW2OhZ5nDXilnkxZjYHE6g8b2dxjsk3aLd5NWsUn/Ngo4TW20cE1qY6xdUF3vzN57v++s0U2sDWlSxahOrJmd4O1nFO1zMTZerp8frFlAQISBHWpcUQx02s9CUestiPt1Y3adA3QydI/LfkdS978JPgc5SrZoG7cV5LaKbsy1KEdwEtV8lY7RVO99PrGfU3s7uH9C/4RNjvOOpMN1FUc/SbMCK+a9aYq5B44M5aQnysqikhEsRN4ZIjSmQlLUrBlpDOia/N/N8/O09QojUxoIzTXemqv73LQvhko4jbwtnPGUb2PSJqlddnSvLr6rL+/D2nwfaOPpHXvjQacxm+uRxLe/x"} 
 </msg>
<msg timestamp="20220622 10:05:57.896" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:05:57.897" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:56.770" endtime="20220622 10:05:57.897"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:05:57.899" level="INFO">${RESPONSE_ENCRYPT_TYPE} = CTUeCkwLc6R/IxGucfjhbrVRkVSdrrbd0FtkFttuN7/vCWGn/rHCWVKgYYE7GrP9RDho804dMjoHBsqOVxmkFXsvay9yvCabvTQ5EAiYx23BzLETnUKqJ/zM8xErHV1HzOP2Pe0DOReholQevuP4SM4JkaL8ocXQN0faYQPnllGRMaoLNJzh22BmHvTyb29jee+/4xRu...</msg>
<status status="PASS" starttime="20220622 10:05:57.897" endtime="20220622 10:05:57.899"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:57.902" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text CTUeCkwLc6R/IxGucfjhbrVRkVSdrrbd0FtkFttuN7/vCWGn/rHCWVKgYYE7GrP9RDho804dMjoHBsqOVxmkFXsvay9yvCabvTQ5EAiYx23BzLETnUKqJ/zM8xErHV1HzOP2Pe0DOReholQevuP4SM4JkaL8ocXQN0faYQPnllGRMaoLNJzh22BmHvTyb29jee+/4xRuRl98CWCsslAPBdPatZuZ7E89opJPBDC101o+inBpC1ryCMDAPmgCj6K6JO6LiMd9GnkP1LNxpldGmp80ZfotgVigTIVxsrh9FV6Qwpno0JJW2OhZ5nDXilnkxZjYHE6g8b2dxjsk3aLd5NWsUn/Ngo4TW20cE1qY6xdUF3vzN57v++s0U2sDWlSxahOrJmd4O1nFO1zMTZerp8frFlAQISBHWpcUQx02s9CUestiPt1Y3adA3QydI/LfkdS978JPgc5SrZoG7cV5LaKbsy1KEdwEtV8lY7RVO99PrGfU3s7uH9C/4RNjvOOpMN1FUc/SbMCK+a9aYq5B44M5aQnysqikhEsRN4ZIjSmQlLUrBlpDOia/N/N8/O09QojUxoIzTXemqv73LQvhko4jbwtnPGUb2PSJqlddnSvLr6rL+/D2nwfaOPpHXvjQacxm+uRxLe/x</msg>
<msg timestamp="20220622 10:05:57.910" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:58.056" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:57.900" endtime="20220622 10:05:58.057"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:05:58.058" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:05:58.057" endtime="20220622 10:05:58.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.058" level="INFO">{"status":{"code":"2013","message":"DOPA Offline reached maximum times","remark":"","user_code":"E0032","user_message_en":"We are unable to proceed,since you have reached maximum limit of checking DOPA.","user_message_th":"ระบบไม่สามารถดำเนินการต่อได้ เนื่องจากคุณได้ตรวจสอบ DOPA เกินจำนวนครั้งที่กำหนด"},"data":null}</msg>
<status status="PASS" starttime="20220622 10:05:58.058" endtime="20220622 10:05:58.059"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.060" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2013","message":"DOPA Offline reached maximum times","remark":"","user_code":"E0032","user_message_en":"We are unable to proceed,since you have reached maximum limit of checking DOP...</msg>
<status status="PASS" starttime="20220622 10:05:58.059" endtime="20220622 10:05:58.060"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:58.060" endtime="20220622 10:05:58.060"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:57.899" endtime="20220622 10:05:58.060"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:05:58.061" level="INFO">${convert_result} = {'status': {'code': '2013', 'message': 'DOPA Offline reached maximum times', 'remark': '', 'user_code': 'E0032', 'user_message_en': 'We are unable to proceed,since you have reached maximum limit of ch...</msg>
<status status="PASS" starttime="20220622 10:05:58.061" endtime="20220622 10:05:58.061"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:58.084" level="INFO">${values_code} = ['2013']</msg>
<status status="PASS" starttime="20220622 10:05:58.061" endtime="20220622 10:05:58.084"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.085" level="INFO">${DOPA_RESPONSE_CODE} = 2013</msg>
<status status="PASS" starttime="20220622 10:05:58.085" endtime="20220622 10:05:58.085"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:58.108" level="INFO">${values_code} = ['DOPA Offline reached maximum times']</msg>
<status status="PASS" starttime="20220622 10:05:58.086" endtime="20220622 10:05:58.108"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.109" level="INFO">${DOPA_MESSAGE} = DOPA Offline reached maximum times</msg>
<status status="PASS" starttime="20220622 10:05:58.108" endtime="20220622 10:05:58.109"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:58.131" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:05:58.109" endtime="20220622 10:05:58.131"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.132" level="INFO">${DOPA_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:05:58.131" endtime="20220622 10:05:58.132"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:05:58.153" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:05:58.132" endtime="20220622 10:05:58.153"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.154" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:05:58.153" endtime="20220622 10:05:58.154"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:58.155" endtime="20220622 10:05:58.155"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:58.154" endtime="20220622 10:05:58.155"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.585" endtime="20220622 10:05:58.155"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.584" endtime="20220622 10:05:58.155"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:56.584" endtime="20220622 10:05:58.155"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.811" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.811" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:50.810" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.188" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.188" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:45.187" endtime="20220622 10:05:58.156"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:35.322" endtime="20220622 10:05:58.156"></status>
</kw>
<kw name="Liveness_and_FR_Pass_BU_Journey" library="LivenessAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_VALIDATE_IMAGE}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:58.157" endtime="20220622 10:05:58.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_VALIDATE_IMAGE}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.157" level="INFO">{'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA'}</msg>
<status status="PASS" starttime="20220622 10:05:58.157" endtime="20220622 10:05:58.157"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.158" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220622 10:05:58.158" endtime="20220622 10:05:58.159"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${${VAR_SELFIE}}","kyc_trans_id":"${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.164" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220622 10:05:58.160" endtime="20220622 10:05:58.164"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:58.159" endtime="20220622 10:05:58.165"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:58.166" endtime="20220622 10:05:58.166"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:05:58.167" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220622 10:05:58.172" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:05:58.355" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:05:58.166" endtime="20220622 10:05:58.356"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220622 10:05:58.357" endtime="20220622 10:05:58.357"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:58.165" endtime="20220622 10:05:58.357"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220622 10:05:58.359" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220622 10:05:58.360" level="INFO">${TextFileContent} = X483zbImv8f4jEU6aH5MmhjasWsUfbi71XRbU091+hyo9VbdDdyCHy9VXA3rvaApAXeQpUOIeXvuqRLx7aPmNvoAuQ+QNdI4M58i1TBO+cQwv4K1OMkIgQ81SGkzUOTkHm9ezlAGcaEmpNsVc3Aa/n8sCuI5g82Lg5wEHUSAuFrECCgTGXKaCGXXXmlgTJwj1xF68OeN...</msg>
<status status="PASS" starttime="20220622 10:05:58.359" endtime="20220622 10:05:58.360"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220622 10:05:58.362" level="INFO">${RESULT_ENCRYPT_DATA} = X483zbImv8f4jEU6aH5MmhjasWsUfbi71XRbU091+hyo9VbdDdyCHy9VXA3rvaApAXeQpUOIeXvuqRLx7aPmNvoAuQ+QNdI4M58i1TBO+cQwv4K1OMkIgQ81SGkzUOTkHm9ezlAGcaEmpNsVc3Aa/n8sCuI5g82Lg5wEHUSAuFrECCgTGXKaCGXXXmlgTJwj1xF68OeN...</msg>
<status status="PASS" starttime="20220622 10:05:58.360" endtime="20220622 10:05:58.362"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:58.358" endtime="20220622 10:05:58.362"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220622 10:05:58.362" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:58.364" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220622 10:05:58.365" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220622 10:05:58.367" level="INFO">${body} = {'data': 'X483zbImv8f4jEU6aH5MmhjasWsUfbi71XRbU091+hyo9VbdDdyCHy9VXA3rvaApAXeQpUOIeXvuqRLx7aPmNvoAuQ+QNdI4M58i1TBO+cQwv4K1OMkIgQ81SGkzUOTkHm9ezlAGcaEmpNsVc3Aa/n8sCuI5g82Lg5wEHUSAuFrECCgTGXKaCGXXXmlgTJ...</msg>
<status status="PASS" starttime="20220622 10:05:58.362" endtime="20220622 10:05:58.367"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_VALIDATE_IMAGE}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220622 10:06:07.297" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'user': 'automate', 'Partner-code': 'TCRB-TABLET', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMTQ0OWFhOGYtOTgyYy00OGU1LThlMDAtZTBmZDhmYzRjNWI0IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTU4NjcxMDgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1NTg2NzQwOCwiaWF0IjoxNjU1ODY3MTA4fQ.lwkTdvehu-4AM58csEGAZIowAufsLevyUr7QMchHjuhMilB1KvXaEsrjwr74XjFJhkbR0RkCGigmeICcT_Bt8LlLj5nWCLVGQEWJlTU1hrkTnF2aE_OJs8eHfQjkH0_Y2RtZiMJPqFSAqpCC6accjvNsRAA2xcgvgXugCK4eQpd5xdX5cNgZs_UcWc030nJ877mArBrx43Iv7b7g0A9CjwNqiDjbiLvC1V4aeTSd_ssZLpHbCjhmLHvo4ogyM9TTjtWgNEEtf-DD6GIsVmYbBV8fDDpIpfrv4QStCxGz41YcIgF4kXbHgde5yw2LygBVw8A6h9t9xBpXq0MQaKQSYA', 'Content-Length': '136280'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220622 10:06:07.297" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '223', 'Connection': 'keep-alive', 'Date': 'Wed, 22 Jun 2022 03:06:07 GMT', 'x-amzn-RequestId': '509de442-fae1-4be9-9619-001f1eac04ef', 'x-amz-apigw-id': 'UGoLiFI1SQ0Fc9Q=', 'X-Amzn-Trace-Id': 'Root=1-62b28716-5a61ce6d1057824b1e65c966', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d1213591a98aaf070e22a40b4f832f80.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'LDDOnDWl8DPhe2bI8SICBTRu2qcibt9StGIjpM_zi8YMwrD3kuFDJw=='} 
 body={"data":"55yfM5c+EcghCmm7rGLU3FApfRfzlWJWLOaHVjyPzF/FvNVCjh5WGeiz2wJjsPplEDJf4hMUpopgCXRtPabLDLMLDjsafpR7SIMN+Ntb1bU8u1OtiYDgZWNmxbKbDll2rilViM8TOk62iyTCizHCk7v5+VE7Ag3gJl1lsT6cc1F3L4IqrM37HTCQG3jtWbxx+r7qBdj/MQIzS6nUphQ="} 
 </msg>
<msg timestamp="20220622 10:06:07.298" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220622 10:06:07.298" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220622 10:05:58.367" endtime="20220622 10:06:07.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.300" level="INFO">200</msg>
<status status="PASS" starttime="20220622 10:06:07.299" endtime="20220622 10:06:07.300"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.302" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 55yfM5c+EcghCmm7rGLU3FApfRfzlWJWLOaHVjyPzF/FvNVCjh5WGeiz2wJjsPplEDJf4hMUpopgCXRtPabLDLMLDjsafpR7SIMN+Ntb1bU8u1OtiYDgZWNmxbKbDll2rilViM8TOk62iyTCizHCk7v5+VE7Ag3gJl1lsT6cc1F3L4IqrM37HTCQG3jtWbxx+r7qBdj/...</msg>
<status status="PASS" starttime="20220622 10:06:07.301" endtime="20220622 10:06:07.302"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220622 10:06:07.305" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 55yfM5c+EcghCmm7rGLU3FApfRfzlWJWLOaHVjyPzF/FvNVCjh5WGeiz2wJjsPplEDJf4hMUpopgCXRtPabLDLMLDjsafpR7SIMN+Ntb1bU8u1OtiYDgZWNmxbKbDll2rilViM8TOk62iyTCizHCk7v5+VE7Ag3gJl1lsT6cc1F3L4IqrM37HTCQG3jtWbxx+r7qBdj/MQIzS6nUphQ=</msg>
<msg timestamp="20220622 10:06:07.313" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220622 10:06:07.465" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220622 10:06:07.303" endtime="20220622 10:06:07.466"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220622 10:06:07.467" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220622 10:06:07.467" endtime="20220622 10:06:07.467"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.468" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220622 10:06:07.468" endtime="20220622 10:06:07.468"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.470" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220622 10:06:07.469" endtime="20220622 10:06:07.470"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:07.470" endtime="20220622 10:06:07.470"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.302" endtime="20220622 10:06:07.471"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220622 10:06:07.471" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': None}</msg>
<status status="PASS" starttime="20220622 10:06:07.471" endtime="20220622 10:06:07.471"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:06:07.496" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:06:07.471" endtime="20220622 10:06:07.496"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.496" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:06:07.496" endtime="20220622 10:06:07.496"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:06:07.518" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:06:07.497" endtime="20220622 10:06:07.518"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FACIAL_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.522" level="INFO">${FACIAL_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:06:07.518" endtime="20220622 10:06:07.522"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:06:07.543" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220622 10:06:07.522" endtime="20220622 10:06:07.544"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.544" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220622 10:06:07.544" endtime="20220622 10:06:07.544"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:06:07.566" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220622 10:06:07.545" endtime="20220622 10:06:07.566"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.567" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220622 10:06:07.566" endtime="20220622 10:06:07.567"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220622 10:06:07.588" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220622 10:06:07.567" endtime="20220622 10:06:07.588"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LAST_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.592" level="INFO">${LAST_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220622 10:06:07.588" endtime="20220622 10:06:07.592"></status>
</kw>
<kw name="Retry_if_facial_offline" library="LivenessAPI_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FACIAL_RESPONSE_CODE}' == '1004'</arg>
<arg>Liveness_and_FR_Pass_BU_Journey</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:07.593" endtime="20220622 10:06:07.593"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.592" endtime="20220622 10:06:07.593"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:58.156" endtime="20220622 10:06:07.593"></status>
</kw>
<kw name="Save_Keyword_Status" library="Support_Test_BU_Page" type="teardown">
<arguments>
<arg>${row}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${KEYWORD STATUS}</arg>
<arg>${KEYWORD STATUS}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.595" level="INFO">${KEYWORD STATUS} = PASS</msg>
<status status="PASS" starttime="20220622 10:06:07.594" endtime="20220622 10:06:07.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_result_api</arg>
<arg>${row_save_status}</arg>
</arguments>
<kw name="save_result_api" library="Support_Test_BU_Page">
<arguments>
<arg>${row_save_status}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_BU_NAME}</arg>
<arg>doc_id=doc2</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:07.596" endtime="20220622 10:06:07.866"></status>
</kw>
<kw name="Check_ial_Level" library="Support_Test_BU_Page">
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>psycopg2</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20220622 10:06:07.905" level="INFO">Connecting using : psycopg2.connect(database=bot_v2, user=postgres, password=RDBtxjPqaOmrasU4uNi2, host=tcrb-bot-pprd-db.cluster-cnu8aurcdwzj.ap-southeast-1.rds.amazonaws.com, port=5432) </msg>
<status status="PASS" starttime="20220622 10:06:07.866" endtime="20220622 10:06:08.224"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = '${input_trans_id}'</arg>
</arguments>
<assign>
<var>@{queryResults_from_kyc_tran}</var>
</assign>
<msg timestamp="20220622 10:06:08.225" level="INFO">Executing : Query  |  SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = 'EQ2022062200005' </msg>
<msg timestamp="20220622 10:06:08.349" level="INFO">@{queryResults_from_kyc_tran} = [ ('995a3cfdb3a54023bbec0c1f196e271b', 6, '1a807919fd884b57abdcb9474e63982f', 'EQ2022062200005', 'TCRB-TABLET', 'TCRB', 'EKYC QR Forgot PIN', 2, None, None, None, 'ekyc003', 'SM-P585Y/samsung', '13.86...</msg>
<status status="PASS" starttime="20220622 10:06:08.224" endtime="20220622 10:06:08.349"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>@{queryResults_from_kyc_tran}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${ial_score_from_kyc_tran}</var>
</assign>
<msg timestamp="20220622 10:06:08.350" level="INFO">${ial_score_from_kyc_tran} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.350" endtime="20220622 10:06:08.351"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SCORE_IAL}</arg>
<arg>${ial_score_from_kyc_tran}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.355" level="INFO">${SCORE_IAL} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.351" endtime="20220622 10:06:08.356"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>@{queryResults_from_kyc_tran}</arg>
<arg>7</arg>
</arguments>
<assign>
<var>${transactions_status}</var>
</assign>
<msg timestamp="20220622 10:06:08.356" level="INFO">${transactions_status} = 2</msg>
<status status="PASS" starttime="20220622 10:06:08.356" endtime="20220622 10:06:08.356"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_STATUS}</arg>
<arg>${transactions_status}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.361" level="INFO">${TRANS_STATUS} = 2</msg>
<status status="PASS" starttime="20220622 10:06:08.357" endtime="20220622 10:06:08.361"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>@{queryResults_from_kyc_tran}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${get_activity_log_id}</var>
</assign>
<msg timestamp="20220622 10:06:08.361" level="INFO">${get_activity_log_id} = 995a3cfdb3a54023bbec0c1f196e271b</msg>
<status status="PASS" starttime="20220622 10:06:08.361" endtime="20220622 10:06:08.361"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${ACTIVITY_LOG_ID}</arg>
<arg>${get_activity_log_id}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.365" level="INFO">${ACTIVITY_LOG_ID} = 995a3cfdb3a54023bbec0c1f196e271b</msg>
<status status="PASS" starttime="20220622 10:06:08.361" endtime="20220622 10:06:08.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TRANS_STATUS}' == '4'</arg>
<arg>Find_Reason_unsuccess</arg>
<arg>${ACTIVITY_LOG_ID}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.365" endtime="20220622 10:06:08.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TRANS_STATUS}' == '1'</arg>
<arg>Find_Reason_unsuccess</arg>
<arg>${ACTIVITY_LOG_ID}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.366" endtime="20220622 10:06:08.366"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.866" endtime="20220622 10:06:08.367"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=19</arg>
<arg>value=${TRANS_STATUS}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.367" endtime="20220622 10:06:08.367"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Write Excel Cell</arg>
<arg>row_num=${row}</arg>
<arg>col_num=18</arg>
<arg>value=${REMARK_REASON}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=18</arg>
<arg>value=${REMARK_REASON}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.371" level="FAIL">Variable '${REMARK_REASON}' not found.</msg>
<status status="FAIL" starttime="20220622 10:06:08.368" endtime="20220622 10:06:08.371"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.368" endtime="20220622 10:06:08.372"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=20</arg>
<arg>value=${SCORE_IAL}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.372" endtime="20220622 10:06:08.372"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=17</arg>
<arg>value=${KEYWORD STATUS}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.373" endtime="20220622 10:06:08.373"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Write Excel Cell</arg>
<arg>row_num=${row}</arg>
<arg>col_num=21</arg>
<arg>value=${TRANS_ID}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=21</arg>
<arg>value=${TRANS_ID}</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.374" endtime="20220622 10:06:08.374"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.373" endtime="20220622 10:06:08.374"></status>
</kw>
<kw name="Stamp_Fail_if_find_2017" library="Support_Test_BU_Page">
<arguments>
<arg>${row}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_RESPONSE_CODE}' == '2017'</arg>
<arg>Stamp_Fail_to_report</arg>
<arg>${row_error2017}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.375" endtime="20220622 10:06:08.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${QR_RESPONSE_CODE}' == '2028'</arg>
<arg>Stamp_Fail_to_report</arg>
<arg>${row_error2017}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.375" endtime="20220622 10:06:08.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${QR_RESPONSE_CODE}' == '2024'</arg>
<arg>Stamp_Fail_to_report</arg>
<arg>${row_error2017}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.375" endtime="20220622 10:06:08.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${QR_RESPONSE_CODE}' == '2028'</arg>
<arg>Stamp_null_in_qr_fails</arg>
<arg>${row_error2017}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.376" endtime="20220622 10:06:08.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${QR_RESPONSE_CODE}' == '2024'</arg>
<arg>Stamp_null_in_qr_fails</arg>
<arg>${row_error2017}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.376" endtime="20220622 10:06:08.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RESPONSE_CODE}' == '0'</arg>
<arg>Stamp_null_in_success</arg>
<arg>${row_error2017}</arg>
</arguments>
<kw name="Stamp_null_in_success" library="Support_Test_BU_Page">
<arguments>
<arg>${row_error2017}</arg>
</arguments>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row_error2017}</arg>
<arg>col_num=18</arg>
<arg>value=-</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.377" endtime="20220622 10:06:08.378"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.377" endtime="20220622 10:06:08.378"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.376" endtime="20220622 10:06:08.378"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.374" endtime="20220622 10:06:08.378"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_BU_NAME}</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.378" endtime="20220622 10:06:08.474"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220622 10:06:08.474" endtime="20220622 10:06:08.474"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.595" endtime="20220622 10:06:08.474"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.595" endtime="20220622 10:06:08.474"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:07.594" endtime="20220622 10:06:08.474"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.331" endtime="20220622 10:06:08.474"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.331" endtime="20220622 10:06:08.475"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.331" endtime="20220622 10:06:08.475"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220622 10:06:08.475" endtime="20220622 10:06:08.475"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.065" endtime="20220622 10:06:08.475"></status>
</kw>
<kw name="${customer_row} = 5" type="foritem">
<kw name="Get_data_information" library="Support_Test_BU_Page">
<arguments>
<arg>${customer_row}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_BU_NAME}</arg>
<arg>doc_id=doc2</arg>
</arguments>
<status status="PASS" starttime="20220622 10:06:08.476" endtime="20220622 10:06:08.706"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_journey}</var>
</assign>
<msg timestamp="20220622 10:06:08.706" level="INFO">${get_journey} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.706" endtime="20220622 10:06:08.707"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_qr_string}</var>
</assign>
<msg timestamp="20220622 10:06:08.707" level="INFO">${get_qr_string} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.707" endtime="20220622 10:06:08.708"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_term}</var>
</assign>
<msg timestamp="20220622 10:06:08.708" level="INFO">${get_term} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.708" endtime="20220622 10:06:08.708"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_consent}</var>
</assign>
<msg timestamp="20220622 10:06:08.709" level="INFO">${get_consent} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.709" endtime="20220622 10:06:08.709"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220622 10:06:08.710" level="INFO">${get_cid} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.709" endtime="20220622 10:06:08.710"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220622 10:06:08.711" level="INFO">${name} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.710" endtime="20220622 10:06:08.711"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220622 10:06:08.711" level="INFO">${surname} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.711" endtime="20220622 10:06:08.711"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220622 10:06:08.712" level="INFO">${name_en} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.711" endtime="20220622 10:06:08.712"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220622 10:06:08.713" level="INFO">${surname_en} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.712" endtime="20220622 10:06:08.713"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=12</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220622 10:06:08.713" level="INFO">${bithdate} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.713" endtime="20220622 10:06:08.713"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=13</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220622 10:06:08.714" level="INFO">${get_mobile} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.713" endtime="20220622 10:06:08.714"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=14</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220622 10:06:08.714" level="INFO">${get_lasercode} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.714" endtime="20220622 10:06:08.714"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=15</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_cid_image}</var>
</assign>
<msg timestamp="20220622 10:06:08.715" level="INFO">${get_cid_image} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.715" endtime="20220622 10:06:08.715"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=16</arg>
<arg>sheet_name=${SHEET_NAME_BU}</arg>
</arguments>
<assign>
<var>${get_selfie_image}</var>
</assign>
<msg timestamp="20220622 10:06:08.716" level="INFO">${get_selfie_image} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.715" endtime="20220622 10:06:08.716"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CONSENT}</arg>
<arg>${get_consent}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.716" level="INFO">${GET_CONSENT} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.716" endtime="20220622 10:06:08.716"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_TERM}</arg>
<arg>${get_term}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.717" level="INFO">${GET_TERM} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.716" endtime="20220622 10:06:08.717"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${get_qr_string}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.717" level="INFO">${QR_VALUE} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.717" endtime="20220622 10:06:08.717"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_JOURNEY}</arg>
<arg>${get_journey}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.718" level="INFO">${GET_JOURNEY} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.717" endtime="20220622 10:06:08.718"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.718" level="INFO">${GET_CID} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.718" endtime="20220622 10:06:08.718"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.719" level="INFO">${FIRST_NAME} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.719" endtime="20220622 10:06:08.719"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.720" level="INFO">${SURNAME} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.719" endtime="20220622 10:06:08.720"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.720" level="INFO">${FIRST_NAME_EN} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.720" endtime="20220622 10:06:08.720"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.721" level="INFO">${SURNAME_EN} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.721" endtime="20220622 10:06:08.721"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.721" level="INFO">${BIRTH_DATE} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.721" endtime="20220622 10:06:08.721"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.722" level="INFO">${GET_MOBILE} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.722" endtime="20220622 10:06:08.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.722" level="INFO">${GET_LASER_CODE} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.722" endtime="20220622 10:06:08.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VAR_IMG}</arg>
<arg>${get_cid_image}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.723" level="INFO">${VAR_IMG} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.723" endtime="20220622 10:06:08.723"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${VAR_SELFIE}</arg>
<arg>${get_selfie_image}</arg>
</arguments>
<msg timestamp="20220622 10:06:08.723" level="INFO">${VAR_SELFIE} = None</msg>
<status status="PASS" starttime="20220622 10:06:08.723" endtime="20220622 10:06:08.723"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220622 10:06:08.724" endtime="20220622 10:06:08.724"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.475" endtime="20220622 10:06:08.724"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${GET_JOURNEY}' == 'None'</arg>
</arguments>
<msg timestamp="20220622 10:06:08.724" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220622 10:06:08.724" endtime="20220622 10:06:08.724"></status>
</kw>
<status status="PASS" starttime="20220622 10:06:08.475" endtime="20220622 10:06:08.724"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.065" endtime="20220622 10:06:08.724"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220622 10:06:08.725" endtime="20220622 10:06:08.725"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.064" endtime="20220622 10:06:08.725"></status>
</kw>
<status status="PASS" starttime="20220622 10:05:00.064" endtime="20220622 10:06:08.725" critical="yes"></status>
</test>
<status status="PASS" starttime="20220622 10:04:59.210" endtime="20220622 10:06:08.726"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="24.BU testing">24.BU testing</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220622 10:05:21.281" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:29.829" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:35.556" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:45.362" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:50.988" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:56.768" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220622 10:05:58.362" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
</errors>
</robot>
