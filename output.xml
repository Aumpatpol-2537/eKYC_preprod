<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20220727 10:48:34.245" rpa="false">
<suite id="s1" name="19.QR journey" source="/Users/patcharapol/Documents/GitHub/eKYC_preprod/api-ekyc/Test case/19.QR_journey.robot">
<kw name="Generate_Partner_Secret" library="Generate_Partner_Secret_page" type="setup">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_PARTNER}</arg>
<arg>TCMB</arg>
<arg>partner-secret</arg>
<arg>preprod</arg>
<arg>file</arg>
<arg>file</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:35.149" level="INFO">Starting process:
java -jar tcrb-ekyc-partner-1.8.jar TCMB partner-secret preprod file file</msg>
<msg timestamp="20220727 10:48:35.155" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:35.657" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:35.149" endtime="20220727 10:48:35.658"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>partner_secret.txt</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:35.660" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/partner_secret.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/partner_secret.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:35.661" level="INFO">${TextFileContent} = SXUJzMmHgprgbsbs/l98VsjrPYcpd+/k0pO7FHn01fr+VjXJrD3PbuTqWbv6q3Kpp9k948h0W7mciX1v1UAitYDJFKRatJijMMziOR6Tbi8OeE38AOcQ0XUR2AJtrOF8KSTTmC4z/BeTMhHMX7bNxCAPq4y7SsZlfX9hCqcw7qMs6aUtjecDeU28eCkGhiyDYw5pHdy/...</msg>
<status status="PASS" starttime="20220727 10:48:35.659" endtime="20220727 10:48:35.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_PARTNER_SECRET}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:35.666" level="INFO">${GET_PARTNER_SECRET} = SXUJzMmHgprgbsbs/l98VsjrPYcpd+/k0pO7FHn01fr+VjXJrD3PbuTqWbv6q3Kpp9k948h0W7mciX1v1UAitYDJFKRatJijMMziOR6Tbi8OeE38AOcQ0XUR2AJtrOF8KSTTmC4z/BeTMhHMX7bNxCAPq4y7SsZlfX9hCqcw7qMs6aUtjecDeU28eCkGhiyDYw5pHdy/...</msg>
<status status="PASS" starttime="20220727 10:48:35.661" endtime="20220727 10:48:35.666"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:35.148" endtime="20220727 10:48:35.667"></status>
</kw>
<test id="s1-t1" name="Support_test_QA_preprod">
<kw name="Generate_QR_Code_for_support_test" library="QR_code_page">
<arguments>
<arg>AUM</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:35.670" endtime="20220727 10:48:35.671"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:35.673" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:35.672" endtime="20220727 10:48:35.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${${cid}}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220727 10:48:35.676" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220727 10:48:35.674" endtime="20220727 10:48:35.676"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:36.665" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': 'SXUJzMmHgprgbsbs/l98VsjrPYcpd+/k0pO7FHn01fr+VjXJrD3PbuTqWbv6q3Kpp9k948h0W7mciX1v1UAitYDJFKRatJijMMziOR6Tbi8OeE38AOcQ0XUR2AJtrOF8KSTTmC4z/BeTMhHMX7bNxCAPq4y7SsZlfX9hCqcw7qMs6aUtjecDeU28eCkGhiyDYw5pHdy/UnLobJLHwHMhNxFSFaBan9YcExHTj7845X6Oy96Ec8cbDEYxd+w0Ma8=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220727 10:48:36.665" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Wed, 27 Jul 2022 03:48:36 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': '0375d31c-a66b-46ae-9da7-9ab174078291', 'x-amz-apigw-id': 'V6FPIFrSSQ0FpYw=', 'X-Amzn-Trace-Id': 'Root=1-62e0b593-6bd74e4550fbbbe43ac81f6c'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431524235063154820371071","qr_expired":"2022-07-28 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220727 10:48:36.665" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:36.666" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:35.676" endtime="20220727 10:48:36.666"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.671" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220727 10:48:36.666" endtime="20220727 10:48:36.671"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.675" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:48:36.671" endtime="20220727 10:48:36.675"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.679" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220727 10:48:36.676" endtime="20220727 10:48:36.679"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.682" level="INFO">${QR_VALUE} = 2431524235063154820371071</msg>
<status status="PASS" starttime="20220727 10:48:36.679" endtime="20220727 10:48:36.682"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.685" level="INFO">${QR_EXPIRE} = 2022-07-28 23:59:59</msg>
<status status="PASS" starttime="20220727 10:48:36.682" endtime="20220727 10:48:36.685"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.688" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220727 10:48:36.685" endtime="20220727 10:48:36.688"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.691" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220727 10:48:36.689" endtime="20220727 10:48:36.691"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:35.669" endtime="20220727 10:48:36.691"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.695" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:36.694" endtime="20220727 10:48:36.695"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:36.693" endtime="20220727 10:48:36.695"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:36.696" endtime="20220727 10:48:36.696"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:36.697" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:36.703" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:36.859" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:36.696" endtime="20220727 10:48:36.859"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:36.860" endtime="20220727 10:48:36.860"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:36.695" endtime="20220727 10:48:36.860"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:36.862" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:36.863" level="INFO">${TextFileContent} = P9rT5MnmLi9IWmyjHE6/FgaYtffftoReDAa+tDwNHUg7GGBer4yjBQefYKkKwAh1Wp2/NrV/Tx8G/+UIFEbaTIUAqCkmCe/4ArNDZPOUmTSZEO3YzLb2q4qrYu6W7aZDB32wxTs=</msg>
<status status="PASS" starttime="20220727 10:48:36.862" endtime="20220727 10:48:36.863"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.868" level="INFO">${RESULT_ENCRYPT_DATA} = P9rT5MnmLi9IWmyjHE6/FgaYtffftoReDAa+tDwNHUg7GGBer4yjBQefYKkKwAh1Wp2/NrV/Tx8G/+UIFEbaTIUAqCkmCe/4ArNDZPOUmTSZEO3YzLb2q4qrYu6W7aZDB32wxTs=</msg>
<status status="PASS" starttime="20220727 10:48:36.863" endtime="20220727 10:48:36.868"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:36.861" endtime="20220727 10:48:36.868"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:36.869" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:36.868" endtime="20220727 10:48:36.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220727 10:48:36.870" level="INFO">&amp;{body} = { data=P9rT5MnmLi9IWmyjHE6/FgaYtffftoReDAa+tDwNHUg7GGBer4yjBQefYKkKwAh1Wp2/NrV/Tx8G/+UIFEbaTIUAqCkmCe/4ArNDZPOUmTSZEO3YzLb2q4qrYu6W7aZDB32wxTs= }</msg>
<status status="PASS" starttime="20220727 10:48:36.870" endtime="20220727 10:48:36.870"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:40.145" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "P9rT5MnmLi9IWmyjHE6/FgaYtffftoReDAa+tDwNHUg7GGBer4yjBQefYKkKwAh1Wp2/NrV/Tx8G/+UIFEbaTIUAqCkmCe/4ArNDZPOUmTSZEO3YzLb2q4qrYu6W7aZDB32wxTs="}' 
 </msg>
<msg timestamp="20220727 10:48:40.145" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:40 GMT', 'x-amzn-RequestId': 'dd91405d-0edf-4191-a4e8-7ac794a689ef', 'x-amz-apigw-id': 'V6FPUEboSQ0FjNw=', 'X-Amzn-Trace-Id': 'Root=1-62e0b595-69cf322c48204ae9790e292e', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 06bd866aa9a243874a68ae5c443c25c2.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '8hWM60xXMd174WOjiaWUui7Oj6-VdLtRBj9aGSYauHpOExsguRG3Nw=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220727 10:48:40.145" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:40.145" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:36.871" endtime="20220727 10:48:40.145"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.150" level="INFO">${RESPONSE_ENCRYPT_TYPE} = YfEqHVVeq5OAXXE3+42DKma6ap3cT0rbzpPIGg01CGCn9bhhawoivvpTGEA9Cp9jEABCnxtHXCHEel3izZy+/YlQjB+PQqYa25hq7kAG/jFlmXqokkPHwK5Z1DMcUJ4sgk85FjyaWr0W4TDQnAS5C7Z/KLpRTn05GkH+c6BJa2srIgdjQmffkHbpTPxLaYkkO1C+CIxS...</msg>
<status status="PASS" starttime="20220727 10:48:40.146" endtime="20220727 10:48:40.150"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:40.153" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220727 10:48:40.158" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:40.312" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:40.152" endtime="20220727 10:48:40.313"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:40.314" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:40.314" endtime="20220727 10:48:40.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.315" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjQ0MzEwOWVmLWE2ZDctNDk0ZS1hZDExLWU1NzIyMmRhZmUzZCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg4OTQwMTksImlhdCI6MTY1ODg5MzcxOSwianRpIjoiZjY2ZGQ0N2UtYWUxMC00MDk2LWE0YjctNGEwZWVjODlhZGYxIiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.fX3oBLa3D3oSLASR9bEHWAGg41YxIUlT21Myob85eobo6z2t4AeyY1ZA3Sei-XzzjkJhyTg2K0evfoHUewRpkjXMt0N85E5-7n1rfzvfpXLMEHsowUkYbi-ra7Ib6KTS2xny1ilAcGdkPpu9hMX3xopK1CwSlSGKewRjYI_Fou1HnVkFMz7mp_NVI-JiENrVYzdqkPfYgoR_H8FL8VKOZbO5baEHpYCLu1AhyqSFUjHcvcvkuTZtbRmO08IxxtQN6oJenRYWRC_Y7-yK3LUl3BoeuO5X6CPIq-W216PCdT360LqnD6su795zN1_MxLbjDXQd3nIyrRDFOzdY6W1Zrw","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.uMC5PGAseSYcWvyod1nU3h6vad2knRW2EFXuYKLFR25B3K60jVMkJnCqFDsn0cuetIgq7AHkzB9z5OuRe8EbUiPXO28_ldhKwDEmSoow4GYtdDgjUMvEbngLWJNopmVQt4KSfs1yDQp0ePTp_OGGsgDh67IX_8wZSRX4uPQSJE4Qf23Y0aFuT4j9H2CiL-dwLqZuWwnUahXsjbh5cKXgNqSzVHzCbmJPRQCFb-8WxpLDFiCZ17MgoWcEA3bmuzvQvD6imGCF7335noct5P4Miqpif2oqnR2wTxvPr1A7gyTMVfz1aT3txkov2coF9IE1GneVQLVqfPxFcUGQHs3Jnw.JsuxA0KwE8mau5ih.3WV716-g9UrVZKwFjAqFrKkH9Wg3SDNXuXZvc9dDBjbUXDoEaksariIQ8yTmNeEjpOp0fgZwRJ2DZ2LaVLg8rJ3ntQPoL7VHwaWO6tJAY8Od1Mvuz68nBKadXM9xj-8a6WYfUToThmuVN09kVhT5oRS5ahZQ8Tr6FBd_XIEWxOdt225bMvQ5fkVDAeXlLQVm7ZHl_gE0mOhxYBEm_cZsEiPirAOjLUNLYRkahXehvU_L1PTXDHqfJcg_R6PsIJ9gmfSZYii68Q2LHlySfyxN7wp_EB427cdNaU0B7PBde7FtfeEvJmsYMkcSZ8H7fbpmTx6nUZonQ7Nft5Ni5p4JeFUJkedki1ICm9UeYhsRQfpoC7D7zjKPi10FpgaCPxFhiwuo_TwbrVWaMml3em94HTg6PF2H6cH9rb0GWYCxciX1YOcyj6DEKRONXVS_AhQvBr2ovPYoS-z7ZfAdrVTR0fDx7AqrsR1rrqt4FjuZ-qSOYh3GllJM_yeaQpNMvYa6WTqFmyTY5SrWPEG1M4vyx5vt90TP0AifDJMhr6N3j90P-iVzVeUFNrzvTrhfyuqWOXAGQy7L3vKvBFYU8D68JhB3PlJe9S6TAakyZZsB0ApsQ1i2rDF2ZWSB3DWrL03lQfjOUZBvc9lEPbXwTBYz7tVtvibTc1BVKr-V7Jk5zFmdeBJQLHKwS8gIXRUygIWd2Grax2H8mXE4wcDQrhaFPTSo32uDWkxY8CPpfKepqRNOumfVh5l8as4R1wavICtH6eBlSmTC400hhFz_uingjyL0Qt-5Uwm-mwA6_62P3QWdKfVNGTjV4hopge99mzOuriXTzUPPqzdPb4gDscrfoYq1lgv6Lw0E3Z6yp1-niHzJ0S8zNdYPVwr3K97RBLsd6y2NbKTaCSKQ_F9OiktoujCxzeoOAmbdYmo6992N3WPZl1a3_2SFTtbep7Y2c0ZPV74jreMF-zH3pulg6TWm5zcTmBPUe4b4uyCs5gUStC5ymT0-j4_qmGmFypcqKGphpgjkrPQ-2CScAXoOIy5W4BQjFtBDHK8O5sqrgoFGgzIeEY-pTEDq1c_w0Ke6eiEiXaMgoxS6j9cEiU8JD45yqSDL-3swExGt0UVrHxVG89KtFMXoRpGz6RleOz0Eu6N8McB0eJtYcXCd80Ezr8zuiMiifQ69w2niiQkrj3NDlDPPZarCkwr2RHQy-MDPjJWQVFbzRASTPjKvn-12kIwmYOER-5P0aOoZM3ETskJp8DrSbqur8NoeQJ4TYX_NZ_t2XcCp78itZjkJYEZPqqPreG8C8-em.0fB87ALXKpv77Qly7vnnAw","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg"}}</msg>
<status status="PASS" starttime="20220727 10:48:40.314" endtime="20220727 10:48:40.315"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.318" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220727 10:48:40.315" endtime="20220727 10:48:40.319"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:40.319" endtime="20220727 10:48:40.320"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:40.151" endtime="20220727 10:48:40.320"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:40.321" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220727 10:48:40.321" endtime="20220727 10:48:40.321"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220727 10:48:40.353" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220727 10:48:40.322" endtime="20220727 10:48:40.353"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.354" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg']</msg>
<status status="PASS" starttime="20220727 10:48:40.353" endtime="20220727 10:48:40.354"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.357" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220727 10:48:40.354" endtime="20220727 10:48:40.357"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:36.692" endtime="20220727 10:48:40.357"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:36.692" endtime="20220727 10:48:40.358"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:40.359" endtime="20220727 10:48:40.360"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.360" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:40.360" endtime="20220727 10:48:40.361"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.361" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:40.361" endtime="20220727 10:48:40.362"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.364" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:40.363" endtime="20220727 10:48:40.364"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:40.362" endtime="20220727 10:48:40.364"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:40.365" endtime="20220727 10:48:40.366"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:40.367" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:40.372" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:40.535" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:40.366" endtime="20220727 10:48:40.535"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:40.536" endtime="20220727 10:48:40.536"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:40.364" endtime="20220727 10:48:40.537"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:40.538" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:40.539" level="INFO">${TextFileContent} = hQWYzLyomJXEzd1uCgWo418ThZgQi0VwosV8aXAxrps+EC6YGT9ijLBz1Q1sVcp2Q94sJ5q6HKJZmkLHp0uH+KXU8jyLVOvQURqqwCts1ZIsEjLzwIG2UV4iJPDh6sOFCx2v1hNJ1xINvqL+WUN5nu/twK5bd39aLvgIR53wH8rrHWj/HzxsFI8doxtqZRChJGF7GxET...</msg>
<status status="PASS" starttime="20220727 10:48:40.538" endtime="20220727 10:48:40.539"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:40.540" level="INFO">${RESULT_ENCRYPT_DATA} = hQWYzLyomJXEzd1uCgWo418ThZgQi0VwosV8aXAxrps+EC6YGT9ijLBz1Q1sVcp2Q94sJ5q6HKJZmkLHp0uH+KXU8jyLVOvQURqqwCts1ZIsEjLzwIG2UV4iJPDh6sOFCx2v1hNJ1xINvqL+WUN5nu/twK5bd39aLvgIR53wH8rrHWj/HzxsFI8doxtqZRChJGF7GxET...</msg>
<status status="PASS" starttime="20220727 10:48:40.539" endtime="20220727 10:48:40.540"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:40.537" endtime="20220727 10:48:40.540"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220727 10:48:40.541" level="INFO">&amp;{body} = { data=hQWYzLyomJXEzd1uCgWo418ThZgQi0VwosV8aXAxrps+EC6YGT9ijLBz1Q1sVcp2Q94sJ5q6HKJZmkLHp0uH+KXU8jyLVOvQURqqwCts1ZIsEjLzwIG2UV4iJPDh6sOFCx2v1hNJ1xINvqL+WUN5nu/twK5bd39aLvgIR53wH8rrHWj/HzxsFI8doxtqZRChJ...</msg>
<status status="PASS" starttime="20220727 10:48:40.540" endtime="20220727 10:48:40.541"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:42.046" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "hQWYzLyomJXEzd1uCgWo418ThZgQi0VwosV8aXAxrps+EC6YGT9ijLBz1Q1sVcp2Q94sJ5q6HKJZmkLHp0uH+KXU8jyLVOvQURqqwCts1ZIsEjLzwIG2UV4iJPDh6sOFCx2v1hNJ1xINvqL+WUN5nu/twK5bd39aLvgIR53wH8rrHWj/HzxsFI8doxtqZRChJGF7GxETfW5vYJsG3lhltDyAZsAlTrQbvjEh6Pwa1IRhWbYhiyxVFiu8N87qTA3Uz4U9zlUUGsdIJVrlUsA62rbvmPpY1NrfhDvcScCBX7J6Wo2CjBGpW+55IBBW+OWbp03esv+r"}' 
 </msg>
<msg timestamp="20220727 10:48:42.047" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:42 GMT', 'x-amzn-RequestId': '4b831b59-f501-4509-92d2-ae1a95603b79', 'x-amz-apigw-id': 'V6FP3FMJSQ0Fiaw=', 'X-Amzn-Trace-Id': 'Root=1-62e0b598-31d1b3aa3d281b4432e1d6f2', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 0e78cd85e770cae91af28801bffe5c5e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'icmeG2RB3AVHBg-647AmyF41SjQCdjJF9L8njDuyPs21Mv7Xn3XvDA=='} 
 body={"data":"oAeS/Wug6lodDTO0Bc2DUUYklHUiM8IUskNLy+htxg8npYi9QrJQYOzk5Rqy93c1lCiNfNWxYkJ+UVMRyXo3pihw/NixSxIesDJtZJDRcigipqcgcYFOwFFlGgMqPdZknQho5iJNNzYjam4ma2f4idnqq9VyB9pIKC8Ko32Z12pOvh6qZZMGot9t4W+rUF2Wb09tI6yofpItSZUA1gM1lwXomtBcocw/vdChLGsvd+VKtmbwZKt+GKAeGiE6AqAoUK0KynLdEjdkuhAvDU//5+Vii0dV5r1KK8DEpQYVQehuLyBsD1XzBA8e9ugSxZqz7HO4bnGHBji7Ypkts1IVZrFZq/eXzuZRDbdMoFsgnhHX4t1L5IipUTdwThCGv52mEYrwVPyl"} 
 </msg>
<msg timestamp="20220727 10:48:42.047" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:42.047" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:40.542" endtime="20220727 10:48:42.047"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.048" level="INFO">${RESPONSE_ENCRYPT_TYPE} = oAeS/Wug6lodDTO0Bc2DUUYklHUiM8IUskNLy+htxg8npYi9QrJQYOzk5Rqy93c1lCiNfNWxYkJ+UVMRyXo3pihw/NixSxIesDJtZJDRcigipqcgcYFOwFFlGgMqPdZknQho5iJNNzYjam4ma2f4idnqq9VyB9pIKC8Ko32Z12pOvh6qZZMGot9t4W+rUF2Wb09tI6yo...</msg>
<status status="PASS" starttime="20220727 10:48:42.047" endtime="20220727 10:48:42.049"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:42.051" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text oAeS/Wug6lodDTO0Bc2DUUYklHUiM8IUskNLy+htxg8npYi9QrJQYOzk5Rqy93c1lCiNfNWxYkJ+UVMRyXo3pihw/NixSxIesDJtZJDRcigipqcgcYFOwFFlGgMqPdZknQho5iJNNzYjam4ma2f4idnqq9VyB9pIKC8Ko32Z12pOvh6qZZMGot9t4W+rUF2Wb09tI6yofpItSZUA1gM1lwXomtBcocw/vdChLGsvd+VKtmbwZKt+GKAeGiE6AqAoUK0KynLdEjdkuhAvDU//5+Vii0dV5r1KK8DEpQYVQehuLyBsD1XzBA8e9ugSxZqz7HO4bnGHBji7Ypkts1IVZrFZq/eXzuZRDbdMoFsgnhHX4t1L5IipUTdwThCGv52mEYrwVPyl</msg>
<msg timestamp="20220727 10:48:42.056" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:42.213" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:42.050" endtime="20220727 10:48:42.213"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:42.215" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:42.214" endtime="20220727 10:48:42.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.217" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072700010"}}</msg>
<status status="PASS" starttime="20220727 10:48:42.216" endtime="20220727 10:48:42.217"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.218" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220727 10:48:42.218" endtime="20220727 10:48:42.218"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:42.219" endtime="20220727 10:48:42.219"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:42.049" endtime="20220727 10:48:42.219"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:42.220" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220727 10:48:42.220" endtime="20220727 10:48:42.220"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.244" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220727 10:48:42.220" endtime="20220727 10:48:42.244"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.245" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220727 10:48:42.245" endtime="20220727 10:48:42.245"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.269" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220727 10:48:42.245" endtime="20220727 10:48:42.269"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.271" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220727 10:48:42.269" endtime="20220727 10:48:42.271"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.294" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:42.272" endtime="20220727 10:48:42.294"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.295" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:48:42.294" endtime="20220727 10:48:42.295"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.317" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220727 10:48:42.295" endtime="20220727 10:48:42.317"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.318" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220727 10:48:42.318" endtime="20220727 10:48:42.318"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.343" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220727 10:48:42.318" endtime="20220727 10:48:42.343"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.346" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220727 10:48:42.343" endtime="20220727 10:48:42.346"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.369" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:42.347" endtime="20220727 10:48:42.369"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.373" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220727 10:48:42.370" endtime="20220727 10:48:42.373"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.396" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:42.373" endtime="20220727 10:48:42.396"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.400" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220727 10:48:42.396" endtime="20220727 10:48:42.400"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.422" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220727 10:48:42.400" endtime="20220727 10:48:42.422"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.425" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220727 10:48:42.422" endtime="20220727 10:48:42.425"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:42.448" level="INFO">${values_code} = ['EQ2022072700010']</msg>
<status status="PASS" starttime="20220727 10:48:42.426" endtime="20220727 10:48:42.448"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.452" level="INFO">${TRANS_ID} = EQ2022072700010</msg>
<status status="PASS" starttime="20220727 10:48:42.449" endtime="20220727 10:48:42.452"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:40.358" endtime="20220727 10:48:42.452"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:42.453" endtime="20220727 10:48:42.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.454" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:42.454" endtime="20220727 10:48:42.454"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.455" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:42.454" endtime="20220727 10:48:42.455"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.457" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:42.456" endtime="20220727 10:48:42.457"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:42.456" endtime="20220727 10:48:42.457"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:42.458" endtime="20220727 10:48:42.458"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:42.459" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:42.464" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:42.616" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:42.458" endtime="20220727 10:48:42.616"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:42.617" endtime="20220727 10:48:42.617"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:42.457" endtime="20220727 10:48:42.618"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:42.620" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:42.620" level="INFO">${TextFileContent} = mmi1MQXEKGwG03sLhu0rb6AsAmaes1toQU6bOtqY3UNksrKlEzBEayUt7yayriNIyBDmey+SuatbTRkmZLrc1tNd6W01hjICboxxxkarT3+m8I4=</msg>
<status status="PASS" starttime="20220727 10:48:42.619" endtime="20220727 10:48:42.620"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:42.621" level="INFO">${RESULT_ENCRYPT_DATA} = mmi1MQXEKGwG03sLhu0rb6AsAmaes1toQU6bOtqY3UNksrKlEzBEayUt7yayriNIyBDmey+SuatbTRkmZLrc1tNd6W01hjICboxxxkarT3+m8I4=</msg>
<status status="PASS" starttime="20220727 10:48:42.620" endtime="20220727 10:48:42.621"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:42.618" endtime="20220727 10:48:42.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220727 10:48:42.624" level="INFO">&amp;{body} = { data=mmi1MQXEKGwG03sLhu0rb6AsAmaes1toQU6bOtqY3UNksrKlEzBEayUt7yayriNIyBDmey+SuatbTRkmZLrc1tNd6W01hjICboxxxkarT3+m8I4= }</msg>
<status status="PASS" starttime="20220727 10:48:42.622" endtime="20220727 10:48:42.624"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:43.642" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "mmi1MQXEKGwG03sLhu0rb6AsAmaes1toQU6bOtqY3UNksrKlEzBEayUt7yayriNIyBDmey+SuatbTRkmZLrc1tNd6W01hjICboxxxkarT3+m8I4="}' 
 </msg>
<msg timestamp="20220727 10:48:43.642" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:43 GMT', 'x-amzn-RequestId': 'e0c90a1b-2e6d-43b1-9af3-b88a79addde8', 'x-amz-apigw-id': 'V6FQNEz1SQ0Fr2A=', 'X-Amzn-Trace-Id': 'Root=1-62e0b59a-617ebbd71fd886885073dc7f', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 c54b9c83bf792961460afd6b807b54a8.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'pE1yVV4fmDXGeqGgA-FRbsqw1NCc2QoWfvK4FfgeNM4iigme4nJEwg=='} 
 body={"data":"QL7GpYYCgEuYmbSDN0jwnNKw+HwGbAncgsCy5D4q8nNlZcfAHj7zHSps4xi+oTLBlbAda4wnR2EgqvFGlEDPL1+O/6EqnqXCPharPWD/RyjaPGcUkILIvI6qxhQHa/GYU6nbEa2WID+0oapg9/c2RWvxRWTt4LKYJo0vTAKKwDLbYhUpptA77GfXzcPjBf2tANtHdueHLmwNBRrk0GnbLVHc1ErRhGMs0nk4+4SyUyKO8xc0Lr/g4NXSzLe2TXkDtNt0z0a9B2vqioeUseoDTok="} 
 </msg>
<msg timestamp="20220727 10:48:43.642" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:43.642" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:42.624" endtime="20220727 10:48:43.642"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.643" level="INFO">${RESPONSE_ENCRYPT_TYPE} = QL7GpYYCgEuYmbSDN0jwnNKw+HwGbAncgsCy5D4q8nNlZcfAHj7zHSps4xi+oTLBlbAda4wnR2EgqvFGlEDPL1+O/6EqnqXCPharPWD/RyjaPGcUkILIvI6qxhQHa/GYU6nbEa2WID+0oapg9/c2RWvxRWTt4LKYJo0vTAKKwDLbYhUpptA77GfXzcPjBf2tANtHdueH...</msg>
<status status="PASS" starttime="20220727 10:48:43.643" endtime="20220727 10:48:43.644"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:43.645" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text QL7GpYYCgEuYmbSDN0jwnNKw+HwGbAncgsCy5D4q8nNlZcfAHj7zHSps4xi+oTLBlbAda4wnR2EgqvFGlEDPL1+O/6EqnqXCPharPWD/RyjaPGcUkILIvI6qxhQHa/GYU6nbEa2WID+0oapg9/c2RWvxRWTt4LKYJo0vTAKKwDLbYhUpptA77GfXzcPjBf2tANtHdueHLmwNBRrk0GnbLVHc1ErRhGMs0nk4+4SyUyKO8xc0Lr/g4NXSzLe2TXkDtNt0z0a9B2vqioeUseoDTok=</msg>
<msg timestamp="20220727 10:48:43.650" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:43.798" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:43.644" endtime="20220727 10:48:43.798"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:43.799" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:43.798" endtime="20220727 10:48:43.799"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.800" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220727 10:48:43.799" endtime="20220727 10:48:43.800"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.800" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220727 10:48:43.800" endtime="20220727 10:48:43.800"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:43.801" endtime="20220727 10:48:43.801"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:43.644" endtime="20220727 10:48:43.801"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:43.801" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220727 10:48:43.801" endtime="20220727 10:48:43.802"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:43.827" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:43.802" endtime="20220727 10:48:43.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.830" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:48:43.827" endtime="20220727 10:48:43.830"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:42.453" endtime="20220727 10:48:43.830"></status>
</kw>
<kw name="Validate_customer_support_test" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
<arg>IMG_AUM</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:43.831" endtime="20220727 10:48:43.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.832" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:43.832" endtime="20220727 10:48:43.832"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:43.833" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:43.832" endtime="20220727 10:48:43.833"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:43.835" endtime="20220727 10:48:44.164"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220727 10:48:44.165" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220727 10:48:44.164" endtime="20220727 10:48:44.165"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220727 10:48:44.165" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220727 10:48:44.165" endtime="20220727 10:48:44.165"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220727 10:48:44.166" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220727 10:48:44.165" endtime="20220727 10:48:44.166"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220727 10:48:44.166" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220727 10:48:44.166" endtime="20220727 10:48:44.166"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220727 10:48:44.167" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220727 10:48:44.167" endtime="20220727 10:48:44.167"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220727 10:48:44.168" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220727 10:48:44.167" endtime="20220727 10:48:44.168"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220727 10:48:44.168" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220727 10:48:44.168" endtime="20220727 10:48:44.168"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220727 10:48:44.169" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220727 10:48:44.168" endtime="20220727 10:48:44.169"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.169" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220727 10:48:44.169" endtime="20220727 10:48:44.169"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.172" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220727 10:48:44.170" endtime="20220727 10:48:44.172"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.173" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220727 10:48:44.172" endtime="20220727 10:48:44.173"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.175" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220727 10:48:44.173" endtime="20220727 10:48:44.175"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.176" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220727 10:48:44.176" endtime="20220727 10:48:44.176"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.179" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220727 10:48:44.176" endtime="20220727 10:48:44.179"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MOBILE_NO}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.181" level="INFO">${MOBILE_NO} = 0875787441</msg>
<status status="PASS" starttime="20220727 10:48:44.179" endtime="20220727 10:48:44.181"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.182" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220727 10:48:44.182" endtime="20220727 10:48:44.182"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220727 10:48:44.182" endtime="20220727 10:48:44.182"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:43.834" endtime="20220727 10:48:44.183"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${${img_base64}}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.184" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:44.184" endtime="20220727 10:48:44.185"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:44.183" endtime="20220727 10:48:44.185"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:44.185" endtime="20220727 10:48:44.186"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:44.186" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:44.192" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:44.373" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:44.186" endtime="20220727 10:48:44.374"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:44.374" endtime="20220727 10:48:44.375"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:44.185" endtime="20220727 10:48:44.375"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:44.377" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:44.378" level="INFO">${TextFileContent} = K9hmaBngak8nQyb8VZhAJB7DZIqEUJfcFcWyrTRdRZPQ+rrf0HVv7D6l/zDip3L3tJslr7gefhPuONQXnXrxqnHM7XgNZhvNmezjFWrYGddhdfZasmW4RiZYW3suFt9VnrwFfoRwhOCjyXVDxYqgJkhDwOGDIqbeAB9z85VR5qz5awSaVjM8IBoRoQUDrv83UOpaSMno...</msg>
<status status="PASS" starttime="20220727 10:48:44.377" endtime="20220727 10:48:44.378"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:44.380" level="INFO">${RESULT_ENCRYPT_DATA} = K9hmaBngak8nQyb8VZhAJB7DZIqEUJfcFcWyrTRdRZPQ+rrf0HVv7D6l/zDip3L3tJslr7gefhPuONQXnXrxqnHM7XgNZhvNmezjFWrYGddhdfZasmW4RiZYW3suFt9VnrwFfoRwhOCjyXVDxYqgJkhDwOGDIqbeAB9z85VR5qz5awSaVjM8IBoRoQUDrv83UOpaSMno...</msg>
<status status="PASS" starttime="20220727 10:48:44.379" endtime="20220727 10:48:44.380"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:44.375" endtime="20220727 10:48:44.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220727 10:48:44.380" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:44.382" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220727 10:48:44.382" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220727 10:48:44.383" level="INFO">${body} = {'data': 'K9hmaBngak8nQyb8VZhAJB7DZIqEUJfcFcWyrTRdRZPQ+rrf0HVv7D6l/zDip3L3tJslr7gefhPuONQXnXrxqnHM7XgNZhvNmezjFWrYGddhdfZasmW4RiZYW3suFt9VnrwFfoRwhOCjyXVDxYqgJkhDwOGDIqbeAB9z85VR5qz5awSaVjM8IBoRoQUDrv...</msg>
<status status="PASS" starttime="20220727 10:48:44.380" endtime="20220727 10:48:44.383"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:49.015" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220727 10:48:49.016" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:48 GMT', 'x-amzn-RequestId': '31618d3d-0095-460e-87c0-70fb35071586', 'x-amz-apigw-id': 'V6FQfF4dSQ0FrFg=', 'X-Amzn-Trace-Id': 'Root=1-62e0b59c-3bac263516f6377b6a53670f', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 e7124c7aba3a3dcb500bad5379ed7832.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '93NemFuzwDbItzaK5oQyDNZZe2ROEp2O9JPrNproUqkC9PsJP1IEjw=='} 
 body={"data":"Vt6EeHjR8zBskvzQV554kwNiSMGTWESPss0EJ2YNQ8rVrkvKD9ZI9LMzVwAYaJa4+fIbL6N40tmUj+EMrq4k5eacw/W70yEi16K2sUIiQwy4bZZ8DcdEQEf75DdDR9o+GPVt65E8wf8Mxf5T1lKs2Tjrtzr+BbmckPxOxuctzveg/zVj7f230s1GIceyqbaOL8ConN155p5DTfKFMW2ezwIVzpoMvzKggwsOQVt7lWvYwpHN2LJLKuajDmuRG4cDleTiUu5IH9VxQe6Qu9XQJok62hK7QwzNoXKrPhcd/nUE5fPvYmT3+cYCHVyTrE9wYYo5ioZ++khW7pJiBml/8o6Kan6RsQ=="} 
 </msg>
<msg timestamp="20220727 10:48:49.016" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:49.016" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:44.383" endtime="20220727 10:48:49.016"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.018" level="INFO">${RESPONSE_ENCRYPT_TYPE} = Vt6EeHjR8zBskvzQV554kwNiSMGTWESPss0EJ2YNQ8rVrkvKD9ZI9LMzVwAYaJa4+fIbL6N40tmUj+EMrq4k5eacw/W70yEi16K2sUIiQwy4bZZ8DcdEQEf75DdDR9o+GPVt65E8wf8Mxf5T1lKs2Tjrtzr+BbmckPxOxuctzveg/zVj7f230s1GIceyqbaOL8ConN15...</msg>
<status status="PASS" starttime="20220727 10:48:49.016" endtime="20220727 10:48:49.018"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:49.021" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text Vt6EeHjR8zBskvzQV554kwNiSMGTWESPss0EJ2YNQ8rVrkvKD9ZI9LMzVwAYaJa4+fIbL6N40tmUj+EMrq4k5eacw/W70yEi16K2sUIiQwy4bZZ8DcdEQEf75DdDR9o+GPVt65E8wf8Mxf5T1lKs2Tjrtzr+BbmckPxOxuctzveg/zVj7f230s1GIceyqbaOL8ConN155p5DTfKFMW2ezwIVzpoMvzKggwsOQVt7lWvYwpHN2LJLKuajDmuRG4cDleTiUu5IH9VxQe6Qu9XQJok62hK7QwzNoXKrPhcd/nUE5fPvYmT3+cYCHVyTrE9wYYo5ioZ++khW7pJiBml/8o6Kan6RsQ==</msg>
<msg timestamp="20220727 10:48:49.029" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:49.199" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:49.020" endtime="20220727 10:48:49.199"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:49.200" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:49.200" endtime="20220727 10:48:49.200"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.201" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220727 10:48:49.201" endtime="20220727 10:48:49.201"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.202" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220727 10:48:49.202" endtime="20220727 10:48:49.203"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:49.203" endtime="20220727 10:48:49.203"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.018" endtime="20220727 10:48:49.203"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:49.204" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0875787441', 'consent...</msg>
<status status="PASS" starttime="20220727 10:48:49.203" endtime="20220727 10:48:49.204"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..consent_new_version</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:49.231" level="INFO">${values_code} = [True]</msg>
<status status="PASS" starttime="20220727 10:48:49.204" endtime="20220727 10:48:49.231"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.234" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220727 10:48:49.231" endtime="20220727 10:48:49.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Agree_Consent</arg>
</arguments>
<kw name="Agree_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:49.236" endtime="20220727 10:48:49.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.237" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:49.237" endtime="20220727 10:48:49.237"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.237" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:49.237" endtime="20220727 10:48:49.238"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.239" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:49.239" endtime="20220727 10:48:49.239"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.238" endtime="20220727 10:48:49.239"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:49.240" endtime="20220727 10:48:49.240"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:49.241" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:49.247" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:49.409" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:49.241" endtime="20220727 10:48:49.409"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:49.409" endtime="20220727 10:48:49.410"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.240" endtime="20220727 10:48:49.410"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:49.412" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:49.412" level="INFO">${TextFileContent} = sNonVJVmp+bSH6jQgk9NNav9YEYvVz3anfN9G/WUQWfAuSmEjg17lQ5t5vBTcv1zE86+xmVJHWybgQd6s21464UMg8gzVY6knSiEsnq1p2IphuU=</msg>
<status status="PASS" starttime="20220727 10:48:49.411" endtime="20220727 10:48:49.412"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:49.413" level="INFO">${RESULT_ENCRYPT_DATA} = sNonVJVmp+bSH6jQgk9NNav9YEYvVz3anfN9G/WUQWfAuSmEjg17lQ5t5vBTcv1zE86+xmVJHWybgQd6s21464UMg8gzVY6knSiEsnq1p2IphuU=</msg>
<status status="PASS" starttime="20220727 10:48:49.412" endtime="20220727 10:48:49.413"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.410" endtime="20220727 10:48:49.414"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220727 10:48:49.414" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:49.415" level="INFO">To JSON using : content={"data": "sNonVJVmp+bSH6jQgk9NNav9YEYvVz3anfN9G/WUQWfAuSmEjg17lQ5t5vBTcv1zE86+xmVJHWybgQd6s21464UMg8gzVY6knSiEsnq1p2IphuU="} </msg>
<msg timestamp="20220727 10:48:49.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220727 10:48:49.415" level="INFO">${body} = {'data': 'sNonVJVmp+bSH6jQgk9NNav9YEYvVz3anfN9G/WUQWfAuSmEjg17lQ5t5vBTcv1zE86+xmVJHWybgQd6s21464UMg8gzVY6knSiEsnq1p2IphuU='}</msg>
<status status="PASS" starttime="20220727 10:48:49.414" endtime="20220727 10:48:49.415"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:51.513" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "sNonVJVmp+bSH6jQgk9NNav9YEYvVz3anfN9G/WUQWfAuSmEjg17lQ5t5vBTcv1zE86+xmVJHWybgQd6s21464UMg8gzVY6knSiEsnq1p2IphuU="}' 
 </msg>
<msg timestamp="20220727 10:48:51.513" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:51 GMT', 'x-amzn-RequestId': 'de8b60f5-271e-4f88-b8b6-79bcc49a27ac', 'x-amz-apigw-id': 'V6FRRGmcyQ0FiAQ=', 'X-Amzn-Trace-Id': 'Root=1-62e0b5a1-75e3125c4901c18d04e0282a', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 7f44f94817e812475c3fa0598089b510.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'UxI9bwW0Z0bgbKJwkUYMupxUNXHQjfzbwgjghWZGajJ-n_npKPK00w=='} 
 body={"data":"cGYCB7Zz2p1ykcINw2bD1g6cZFQAnpwnFJIBuRgV2+qrk2f1JvCBp+24GEWj/OvpvsjVFwNDxJwTaoKYnIbLRmHDXH6W4mrl9xvBqTZ+6an23ADrUaSnTuRjzzq1HKioE+yJMKeE2PZDLhc5rl6Njy4dzMihsO06NY2Mz5Fg00z5xYH47Gd2Y1TiJw7MyIhsYyAV+e41zz962HSBSobSc1ZZ3jCOVKtdYq4khVkUToYK9t0nbCKw+zlCRmXwl+KaU218csxAEO+W1yj8nK/LWvw="} 
 </msg>
<msg timestamp="20220727 10:48:51.513" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:51.513" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:49.415" endtime="20220727 10:48:51.513"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.515" level="INFO">${RESPONSE_ENCRYPT_TYPE} = cGYCB7Zz2p1ykcINw2bD1g6cZFQAnpwnFJIBuRgV2+qrk2f1JvCBp+24GEWj/OvpvsjVFwNDxJwTaoKYnIbLRmHDXH6W4mrl9xvBqTZ+6an23ADrUaSnTuRjzzq1HKioE+yJMKeE2PZDLhc5rl6Njy4dzMihsO06NY2Mz5Fg00z5xYH47Gd2Y1TiJw7MyIhsYyAV+e41...</msg>
<status status="PASS" starttime="20220727 10:48:51.514" endtime="20220727 10:48:51.515"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:51.516" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text cGYCB7Zz2p1ykcINw2bD1g6cZFQAnpwnFJIBuRgV2+qrk2f1JvCBp+24GEWj/OvpvsjVFwNDxJwTaoKYnIbLRmHDXH6W4mrl9xvBqTZ+6an23ADrUaSnTuRjzzq1HKioE+yJMKeE2PZDLhc5rl6Njy4dzMihsO06NY2Mz5Fg00z5xYH47Gd2Y1TiJw7MyIhsYyAV+e41zz962HSBSobSc1ZZ3jCOVKtdYq4khVkUToYK9t0nbCKw+zlCRmXwl+KaU218csxAEO+W1yj8nK/LWvw=</msg>
<msg timestamp="20220727 10:48:51.522" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:51.678" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:51.516" endtime="20220727 10:48:51.678"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:51.679" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:51.679" endtime="20220727 10:48:51.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.681" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220727 10:48:51.680" endtime="20220727 10:48:51.681"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.682" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220727 10:48:51.681" endtime="20220727 10:48:51.683"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:51.683" endtime="20220727 10:48:51.683"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:51.515" endtime="20220727 10:48:51.684"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:51.685" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220727 10:48:51.684" endtime="20220727 10:48:51.685"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:51.710" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:51.686" endtime="20220727 10:48:51.710"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.713" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:48:51.710" endtime="20220727 10:48:51.713"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.235" endtime="20220727 10:48:51.713"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:49.235" endtime="20220727 10:48:51.713"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:43.831" endtime="20220727 10:48:51.713"></status>
</kw>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:51.714" endtime="20220727 10:48:51.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.715" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:51.715" endtime="20220727 10:48:51.716"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.716" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:51.716" endtime="20220727 10:48:51.717"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.720" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:51.719" endtime="20220727 10:48:51.720"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:51.718" endtime="20220727 10:48:51.720"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:51.721" endtime="20220727 10:48:51.721"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:51.723" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220727 10:48:51.728" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:51.878" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:51.722" endtime="20220727 10:48:51.878"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:51.879" endtime="20220727 10:48:51.880"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:51.720" endtime="20220727 10:48:51.880"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:51.882" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:51.882" level="INFO">${TextFileContent} = JG0flu+zhw1OGezRWnfSuyx8bzqzoAk3WMVIs6IPA3lSPHE0o3Mnuwa45JWnADqJXeQP586Joq9Q/oejjE9Ka2ul4DFB4xfoUU69QLMMK9vISDzZOg==</msg>
<status status="PASS" starttime="20220727 10:48:51.881" endtime="20220727 10:48:51.883"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:51.884" level="INFO">${RESULT_ENCRYPT_DATA} = JG0flu+zhw1OGezRWnfSuyx8bzqzoAk3WMVIs6IPA3lSPHE0o3Mnuwa45JWnADqJXeQP586Joq9Q/oejjE9Ka2ul4DFB4xfoUU69QLMMK9vISDzZOg==</msg>
<status status="PASS" starttime="20220727 10:48:51.883" endtime="20220727 10:48:51.884"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:51.880" endtime="20220727 10:48:51.884"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220727 10:48:51.885" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:51.886" level="INFO">To JSON using : content={"data": "JG0flu+zhw1OGezRWnfSuyx8bzqzoAk3WMVIs6IPA3lSPHE0o3Mnuwa45JWnADqJXeQP586Joq9Q/oejjE9Ka2ul4DFB4xfoUU69QLMMK9vISDzZOg=="} </msg>
<msg timestamp="20220727 10:48:51.886" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220727 10:48:51.886" level="INFO">${body} = {'data': 'JG0flu+zhw1OGezRWnfSuyx8bzqzoAk3WMVIs6IPA3lSPHE0o3Mnuwa45JWnADqJXeQP586Joq9Q/oejjE9Ka2ul4DFB4xfoUU69QLMMK9vISDzZOg=='}</msg>
<status status="PASS" starttime="20220727 10:48:51.885" endtime="20220727 10:48:51.886"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220727 10:48:57.560" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '128', 'Content-Type': 'application/json'} 
 body=b'{"data": "JG0flu+zhw1OGezRWnfSuyx8bzqzoAk3WMVIs6IPA3lSPHE0o3Mnuwa45JWnADqJXeQP586Joq9Q/oejjE9Ka2ul4DFB4xfoUU69QLMMK9vISDzZOg=="}' 
 </msg>
<msg timestamp="20220727 10:48:57.561" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '415', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:48:57 GMT', 'x-amzn-RequestId': '444ff4b3-0801-4591-bee2-51248598e27d', 'x-amz-apigw-id': 'V6FRpGu6yQ0FfOQ=', 'X-Amzn-Trace-Id': 'Root=1-62e0b5a3-0d9311ad5b3ce3fa56d2b458', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 b5697b33d5b1898c8ec9864d3568219c.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'IdmNwq6qKCo58QaKppH3YE2wY4RoNFzhB-0dzGRabiKoUkgNP7ODMA=='} 
 body={"data":"OumDCRW67BSCdBSoFDiQF5ytAlkIJRqT2WKV6WhndPTbUzz5jN+kSrtVvpcYw+8jj250gbK4IGUcYQAGsRJqw1/agVBsTRh/gjyU3TvClOD9nWMjtynKp3cj6HZbeG2jyPy5cxHz2SMdna3wShMrWWbscF4ISF5OOCEGOTq/0zS9jwfmHhSxOrHLYwtCJpGzJL1dkKuSamNtiBqwg49B3accmWuj1JgJ5aCtyyu6TlnLiQoTFbxstJQDYClub5JKTxc7dOm+pTykXzXMRuCgaOiBlk1Z2JcGjx5TjukYyV8r9QoMfVQDM20vNttydMZlvZl0RUnQrnsoCVmbTWedE9z+DRE+s7JC5K5T1olgZCKnmL41zLqD3Y/Ru3nZzW7z659jlFvsBReZ+301ywk="} 
 </msg>
<msg timestamp="20220727 10:48:57.561" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:48:57.561" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:51.886" endtime="20220727 10:48:57.561"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.563" level="INFO">${RESPONSE_ENCRYPT_TYPE} = OumDCRW67BSCdBSoFDiQF5ytAlkIJRqT2WKV6WhndPTbUzz5jN+kSrtVvpcYw+8jj250gbK4IGUcYQAGsRJqw1/agVBsTRh/gjyU3TvClOD9nWMjtynKp3cj6HZbeG2jyPy5cxHz2SMdna3wShMrWWbscF4ISF5OOCEGOTq/0zS9jwfmHhSxOrHLYwtCJpGzJL1dkKuS...</msg>
<status status="PASS" starttime="20220727 10:48:57.561" endtime="20220727 10:48:57.563"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:57.565" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text OumDCRW67BSCdBSoFDiQF5ytAlkIJRqT2WKV6WhndPTbUzz5jN+kSrtVvpcYw+8jj250gbK4IGUcYQAGsRJqw1/agVBsTRh/gjyU3TvClOD9nWMjtynKp3cj6HZbeG2jyPy5cxHz2SMdna3wShMrWWbscF4ISF5OOCEGOTq/0zS9jwfmHhSxOrHLYwtCJpGzJL1dkKuSamNtiBqwg49B3accmWuj1JgJ5aCtyyu6TlnLiQoTFbxstJQDYClub5JKTxc7dOm+pTykXzXMRuCgaOiBlk1Z2JcGjx5TjukYyV8r9QoMfVQDM20vNttydMZlvZl0RUnQrnsoCVmbTWedE9z+DRE+s7JC5K5T1olgZCKnmL41zLqD3Y/Ru3nZzW7z659jlFvsBReZ+301ywk=</msg>
<msg timestamp="20220727 10:48:57.571" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:57.728" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:57.564" endtime="20220727 10:48:57.728"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:48:57.729" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:48:57.729" endtime="20220727 10:48:57.729"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.730" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072700010","dopa_status":"0","dopa_message":"สถานะปกติ"}}</msg>
<status status="PASS" starttime="20220727 10:48:57.729" endtime="20220727 10:48:57.730"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.731" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072700010","dopa_status":"0","d...</msg>
<status status="PASS" starttime="20220727 10:48:57.730" endtime="20220727 10:48:57.731"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:57.731" endtime="20220727 10:48:57.731"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:57.563" endtime="20220727 10:48:57.731"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:48:57.732" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'kyc_trans_id': 'EQ2022072700010', 'dop...</msg>
<status status="PASS" starttime="20220727 10:48:57.732" endtime="20220727 10:48:57.732"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:57.757" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220727 10:48:57.732" endtime="20220727 10:48:57.757"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.760" level="INFO">${DOPA_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220727 10:48:57.757" endtime="20220727 10:48:57.760"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:57.781" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:48:57.760" endtime="20220727 10:48:57.781"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.784" level="INFO">${DOPA_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:48:57.781" endtime="20220727 10:48:57.784"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:57.805" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220727 10:48:57.785" endtime="20220727 10:48:57.805"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.809" level="INFO">${DOPA_REMARK} = </msg>
<status status="PASS" starttime="20220727 10:48:57.806" endtime="20220727 10:48:57.809"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:48:57.832" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220727 10:48:57.809" endtime="20220727 10:48:57.832"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.833" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220727 10:48:57.832" endtime="20220727 10:48:57.833"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:57.834" endtime="20220727 10:48:57.834"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:57.833" endtime="20220727 10:48:57.834"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:51.714" endtime="20220727 10:48:57.834"></status>
</kw>
<kw name="Liveness_and_FR_Pass_support_test" library="LivenessAPI_page">
<arguments>
<arg>SELFIE_AUM</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:57.835" endtime="20220727 10:48:57.835"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.836" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg'}</msg>
<status status="PASS" starttime="20220727 10:48:57.835" endtime="20220727 10:48:57.836"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.836" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220727 10:48:57.836" endtime="20220727 10:48:57.837"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${${img_selfie}}","kyc_trans_id":"${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220727 10:48:57.839" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220727 10:48:57.838" endtime="20220727 10:48:57.839"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:57.837" endtime="20220727 10:48:57.839"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:57.840" endtime="20220727 10:48:57.841"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:48:57.842" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220727 10:48:57.846" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:48:58.017" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:48:57.841" endtime="20220727 10:48:58.017"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220727 10:48:58.018" endtime="20220727 10:48:58.018"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:57.840" endtime="20220727 10:48:58.019"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220727 10:48:58.021" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220727 10:48:58.022" level="INFO">${TextFileContent} = 4obcCGCdFcwY5S0LntBjBZpqSBW+nZDNRMNKmKstvi5EH8IukFJen8nPmdhllqp77Dqezmi4jGoWCbitwPM9qRr3z5jq1MMCfRlweLNbMZzFzSrWdrAPYkK7lXgMDRzxWUfH0Szrs3FgLm0nHZgkpWW4MJsZaUF9sGvZSaw/pXygedaswwD3rGA+TlFlyy6m2XKaYaPz...</msg>
<status status="PASS" starttime="20220727 10:48:58.020" endtime="20220727 10:48:58.022"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220727 10:48:58.023" level="INFO">${RESULT_ENCRYPT_DATA} = 4obcCGCdFcwY5S0LntBjBZpqSBW+nZDNRMNKmKstvi5EH8IukFJen8nPmdhllqp77Dqezmi4jGoWCbitwPM9qRr3z5jq1MMCfRlweLNbMZzFzSrWdrAPYkK7lXgMDRzxWUfH0Szrs3FgLm0nHZgkpWW4MJsZaUF9sGvZSaw/pXygedaswwD3rGA+TlFlyy6m2XKaYaPz...</msg>
<status status="PASS" starttime="20220727 10:48:58.023" endtime="20220727 10:48:58.023"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:58.019" endtime="20220727 10:48:58.024"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220727 10:48:58.024" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:58.025" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220727 10:48:58.026" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220727 10:48:58.027" level="INFO">${body} = {'data': '4obcCGCdFcwY5S0LntBjBZpqSBW+nZDNRMNKmKstvi5EH8IukFJen8nPmdhllqp77Dqezmi4jGoWCbitwPM9qRr3z5jq1MMCfRlweLNbMZzFzSrWdrAPYkK7lXgMDRzxWUfH0Szrs3FgLm0nHZgkpWW4MJsZaUF9sGvZSaw/pXygedaswwD3rGA+TlFlyy...</msg>
<status status="PASS" starttime="20220727 10:48:58.024" endtime="20220727 10:48:58.027"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220727 10:49:07.659" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNDQzMTA5ZWYtYTZkNy00OTRlLWFkMTEtZTU3MjIyZGFmZTNkIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg4OTM3MTksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODg5NDAxOSwiaWF0IjoxNjU4ODkzNzE5fQ.PeY8VriEQLd17vdr1lZf-9ZHRD6vEQp7LKPp-Qld8LPDotJzZU0zf0s8rtnfApJ-TNKxop5K7MtbzaEtDqjIGlcFGsoUU1FQCwSlZqHP78_XwfZ-WqaDchMB4dn02IOVGHcduU2n7MnLFpY4VwlmHqXIXMMiKCVuLmophZZ5BM4fKVRYzcot5idF5VxaL28kzO6iAXfFwl2BTY8K8MtM-WzsXASl5PEfK7SDWzIcpT_bl2fGGDV8x7hqQWU2qb6QtwsAb3rJmD487r4KQROl8JGqF9w9Rt739NrE_H_xX3q7sFh4f7dH6uc3H1B-oWDJ4hi1PBJIOGfJAtc0CC7Htg', 'Content-Length': '57532', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220727 10:49:07.659" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '223', 'Connection': 'keep-alive', 'Date': 'Wed, 27 Jul 2022 03:49:07 GMT', 'x-amzn-RequestId': '7eee8b18-9432-4cad-baa1-2efbe3285bed', 'x-amz-apigw-id': 'V6FSnH-rSQ0FmkQ=', 'X-Amzn-Trace-Id': 'Root=1-62e0b5aa-0339bdd62c4d745c429c2947', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 ffd7e5a666a6ae9d58b84bb72e42310e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '3QqjbGXBzmv-Hk3lbG866B5j20FFaLCYJksULZZ0Aj8E2T-9RuaHng=='} 
 body={"data":"k4Noveixc2BLctX8eZEWI2QBEBhc1b2i+M6cEXsacuUNGbKMroLQlaIle/APp/eZEJrX+qf3InCjInJCtHNv28n8Af3RYAiC4txLNXBA9C9jJFdQ1y7S7E/TAfn8/U4/UrAxlbAiavsDzN+LqzFluf/eqTOlEkntLOtoN+1/HfIu1BnoQcS+zndLWYijarqbmr9b+7hZMLn5zHW3+KY="} 
 </msg>
<msg timestamp="20220727 10:49:07.659" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220727 10:49:07.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220727 10:48:58.027" endtime="20220727 10:49:07.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.660" level="INFO">200</msg>
<status status="PASS" starttime="20220727 10:49:07.660" endtime="20220727 10:49:07.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp.status_code}' != '200'</arg>
<arg>Save_error_When_its_active</arg>
<arg>FACIAL</arg>
</arguments>
<status status="PASS" starttime="20220727 10:49:07.661" endtime="20220727 10:49:07.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.662" level="INFO">${RESPONSE_ENCRYPT_TYPE} = k4Noveixc2BLctX8eZEWI2QBEBhc1b2i+M6cEXsacuUNGbKMroLQlaIle/APp/eZEJrX+qf3InCjInJCtHNv28n8Af3RYAiC4txLNXBA9C9jJFdQ1y7S7E/TAfn8/U4/UrAxlbAiavsDzN+LqzFluf/eqTOlEkntLOtoN+1/HfIu1BnoQcS+zndLWYijarqbmr9b+7hZ...</msg>
<status status="PASS" starttime="20220727 10:49:07.662" endtime="20220727 10:49:07.663"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220727 10:49:07.666" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text k4Noveixc2BLctX8eZEWI2QBEBhc1b2i+M6cEXsacuUNGbKMroLQlaIle/APp/eZEJrX+qf3InCjInJCtHNv28n8Af3RYAiC4txLNXBA9C9jJFdQ1y7S7E/TAfn8/U4/UrAxlbAiavsDzN+LqzFluf/eqTOlEkntLOtoN+1/HfIu1BnoQcS+zndLWYijarqbmr9b+7hZMLn5zHW3+KY=</msg>
<msg timestamp="20220727 10:49:07.672" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220727 10:49:07.825" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220727 10:49:07.664" endtime="20220727 10:49:07.825"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220727 10:49:07.826" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220727 10:49:07.826" endtime="20220727 10:49:07.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.827" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220727 10:49:07.826" endtime="20220727 10:49:07.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.828" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220727 10:49:07.827" endtime="20220727 10:49:07.828"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220727 10:49:07.828" endtime="20220727 10:49:07.830"></status>
</kw>
<status status="PASS" starttime="20220727 10:49:07.663" endtime="20220727 10:49:07.830"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220727 10:49:07.831" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': None}</msg>
<status status="PASS" starttime="20220727 10:49:07.830" endtime="20220727 10:49:07.831"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:49:07.853" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220727 10:49:07.831" endtime="20220727 10:49:07.853"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:49:07.875" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:49:07.854" endtime="20220727 10:49:07.875"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.878" level="INFO">${MESS_STATUS} = Success</msg>
<status status="PASS" starttime="20220727 10:49:07.875" endtime="20220727 10:49:07.878"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220727 10:49:07.900" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220727 10:49:07.879" endtime="20220727 10:49:07.900"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.904" level="INFO">${LN_FR_RESPONE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220727 10:49:07.901" endtime="20220727 10:49:07.904"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:57.834" endtime="20220727 10:49:07.904"></status>
</kw>
<kw name="Check_ial_is_2_3" library="IAL_Page">
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>psycopg2</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20220727 10:49:07.927" level="INFO">Connecting using : psycopg2.connect(database=bot_v2, user=postgres, password=RDBtxjPqaOmrasU4uNi2, host=tcrb-bot-pprd-db.cluster-cnu8aurcdwzj.ap-southeast-1.rds.amazonaws.com, port=5432) </msg>
<status status="PASS" starttime="20220727 10:49:07.905" endtime="20220727 10:49:08.240"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = '${input_tran_id}'</arg>
</arguments>
<assign>
<var>@{queryResults_from_kyc_tran}</var>
</assign>
<msg timestamp="20220727 10:49:08.241" level="INFO">Executing : Query  |  SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = 'EQ2022072700010' </msg>
<msg timestamp="20220727 10:49:08.379" level="INFO">@{queryResults_from_kyc_tran} = [ ('4e31073918ad48be884ca758440c5083', 6, 'ca451f0cb90c4afd9ae4839376f42abb', 'EQ2022072700010', 'TCRB-TABLET', 'TCRB', 'EKYC QR Signup', 3, None, '2.3', datetime.date(2022, 7, 28), 'ekyc003', 'SM-P58...</msg>
<status status="PASS" starttime="20220727 10:49:08.240" endtime="20220727 10:49:08.380"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>@{queryResults_from_kyc_tran}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${ial_score_from_kyc_tran}</var>
</assign>
<msg timestamp="20220727 10:49:08.381" level="INFO">${ial_score_from_kyc_tran} = 2.3</msg>
<status status="PASS" starttime="20220727 10:49:08.380" endtime="20220727 10:49:08.381"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SCORE_IAL_KYCTRAN}</arg>
<arg>${ial_score_from_kyc_tran}</arg>
</arguments>
<msg timestamp="20220727 10:49:08.386" level="INFO">${SCORE_IAL_KYCTRAN} = 2.3</msg>
<status status="PASS" starttime="20220727 10:49:08.381" endtime="20220727 10:49:08.387"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220727 10:49:08.387" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220727 10:49:08.387" endtime="20220727 10:49:08.388"></status>
</kw>
<status status="PASS" starttime="20220727 10:49:07.904" endtime="20220727 10:49:08.388"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:35.667" endtime="20220727 10:49:08.388" critical="yes"></status>
</test>
<kw name="Log To Console" library="BuiltIn" type="teardown">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<status status="PASS" starttime="20220727 10:49:08.390" endtime="20220727 10:49:08.391"></status>
</kw>
<status status="PASS" starttime="20220727 10:48:34.247" endtime="20220727 10:49:08.391"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="19.QR journey">19.QR journey</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220727 10:48:44.380" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:49.414" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:51.885" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220727 10:48:58.024" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
</errors>
</robot>
