<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.1 on darwin)" generated="20220725 10:01:23.248" rpa="false">
<suite id="s1" name="19.QR journey" source="/Users/patcharapol/Documents/GitHub/eKYC_preprod/api-ekyc/Test case/19.QR_journey.robot">
<kw name="Generate_Partner_Secret" library="Generate_Partner_Secret_page" type="setup">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_PARTNER}</arg>
<arg>TCMB</arg>
<arg>partner-secret</arg>
<arg>preprod</arg>
<arg>file</arg>
<arg>file</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:23.980" level="INFO">Starting process:
java -jar tcrb-ekyc-partner-1.8.jar TCMB partner-secret preprod file file</msg>
<msg timestamp="20220725 10:01:23.985" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:24.349" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:23.979" endtime="20220725 10:01:24.349"></status>
</kw>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>partner_secret.txt</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:24.351" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/partner_secret.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/partner_secret.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:24.351" level="INFO">${TextFileContent} = 5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0f...</msg>
<status status="PASS" starttime="20220725 10:01:24.350" endtime="20220725 10:01:24.351"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_PARTNER_SECRET}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:24.355" level="INFO">${GET_PARTNER_SECRET} = 5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0f...</msg>
<status status="PASS" starttime="20220725 10:01:24.351" endtime="20220725 10:01:24.355"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:23.979" endtime="20220725 10:01:24.355"></status>
</kw>
<test id="s1-t1" name="QR_Stamp_used_2">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:24.359" endtime="20220725 10:01:24.360"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:24.361" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:24.360" endtime="20220725 10:01:24.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:01:24.362" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:01:24.362" endtime="20220725 10:01:24.362"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:25.077" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:01:25.077" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:01:25 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': 'd3162586-cac3-42fd-ac16-7bed6e35817d', 'x-amz-apigw-id': 'VzYcvGNLyQ0FU2g=', 'X-Amzn-Trace-Id': 'Root=1-62de0784-7a86665677b0cf2d0e6c95ed'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431525641016610986660869","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:01:25.078" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:25.078" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:24.363" endtime="20220725 10:01:25.078"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.081" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:01:25.078" endtime="20220725 10:01:25.082"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.085" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:01:25.082" endtime="20220725 10:01:25.086"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.089" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:01:25.086" endtime="20220725 10:01:25.089"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.091" level="INFO">${QR_VALUE} = 2431525641016610986660869</msg>
<status status="PASS" starttime="20220725 10:01:25.089" endtime="20220725 10:01:25.091"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.093" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:01:25.092" endtime="20220725 10:01:25.094"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.097" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:01:25.094" endtime="20220725 10:01:25.097"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.100" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:01:25.097" endtime="20220725 10:01:25.100"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:24.359" endtime="20220725 10:01:25.100"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.104" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:25.103" endtime="20220725 10:01:25.104"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:25.102" endtime="20220725 10:01:25.104"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:25.105" endtime="20220725 10:01:25.105"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:25.106" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:25.110" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:25.291" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:25.105" endtime="20220725 10:01:25.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:25.293" endtime="20220725 10:01:25.293"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:25.104" endtime="20220725 10:01:25.293"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:25.295" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:25.296" level="INFO">${TextFileContent} = W1tR0VDpkQq4D2KIzEpJOLR+Nsj7UEqjod3xfRMOCk9WQ8wN4xaXPgQrOOOEHqg1GUcmeoJnsQkQmVbU8fSZl+bq1o30sD3CQbgk+6saLKeEBt/FT2gL3UhFjkitJK16GrpecL0=</msg>
<status status="PASS" starttime="20220725 10:01:25.295" endtime="20220725 10:01:25.296"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.299" level="INFO">${RESULT_ENCRYPT_DATA} = W1tR0VDpkQq4D2KIzEpJOLR+Nsj7UEqjod3xfRMOCk9WQ8wN4xaXPgQrOOOEHqg1GUcmeoJnsQkQmVbU8fSZl+bq1o30sD3CQbgk+6saLKeEBt/FT2gL3UhFjkitJK16GrpecL0=</msg>
<status status="PASS" starttime="20220725 10:01:25.296" endtime="20220725 10:01:25.299"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:25.294" endtime="20220725 10:01:25.299"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:25.300" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:25.299" endtime="20220725 10:01:25.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:01:25.301" level="INFO">&amp;{body} = { data=W1tR0VDpkQq4D2KIzEpJOLR+Nsj7UEqjod3xfRMOCk9WQ8wN4xaXPgQrOOOEHqg1GUcmeoJnsQkQmVbU8fSZl+bq1o30sD3CQbgk+6saLKeEBt/FT2gL3UhFjkitJK16GrpecL0= }</msg>
<status status="PASS" starttime="20220725 10:01:25.301" endtime="20220725 10:01:25.301"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:29.741" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "W1tR0VDpkQq4D2KIzEpJOLR+Nsj7UEqjod3xfRMOCk9WQ8wN4xaXPgQrOOOEHqg1GUcmeoJnsQkQmVbU8fSZl+bq1o30sD3CQbgk+6saLKeEBt/FT2gL3UhFjkitJK16GrpecL0="}' 
 </msg>
<msg timestamp="20220725 10:01:29.741" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:29 GMT', 'x-amzn-RequestId': 'e7c5b1d5-ca59-4264-afe6-9818bfff6e20', 'x-amz-apigw-id': 'VzYdGGy5SQ0Fs1A=', 'X-Amzn-Trace-Id': 'Root=1-62de0786-454acefe50040f2e19a2d3dd', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 76ba6b3d9cbda18b2d8a4974a9dc976a.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': '19QNTAzlRzThYY_pu8wzuPQ7UoUMzsif9CiSUsHHrV9EEmpV2XzDSQ=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:01:29.741" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:29.741" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:25.302" endtime="20220725 10:01:29.741"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.745" level="INFO">${RESPONSE_ENCRYPT_TYPE} = Pwivt4gAUyPk8OHAXNNg9WFAYQ/TSK6cUYf7tM/6FpVAk+6ms/j3Rn+RZz0xcKb9nRqrRDKsxYM4F7Mje0zST04HjpH0ns8UhLc1yKyZoYDd37oPZppbGrTyiwz6Piny4XMXhL9HGw8S6WqFyMj/WKAF1jeDCu77ws+haaL1GmYu36jKFugLCW2PTm3YWLx1nTOde80E...</msg>
<status status="PASS" starttime="20220725 10:01:29.742" endtime="20220725 10:01:29.745"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:29.747" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:01:29.756" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:29.923" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:29.746" endtime="20220725 10:01:29.923"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:29.924" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:29.924" endtime="20220725 10:01:29.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.925" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6ImYwOGJiMGZjLTNlMWYtNGY2Mi1hZTBmLTI0MTUwNWIzYjBjNiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTgzODgsImlhdCI6MTY1ODcxODA4OCwianRpIjoiZjg1ZWI1ZWYtMjlkNi00YjQxLWE0NjctNzFhZTU5MmZhM2U1IiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.OPsAACEcFFFoXDQnmlv_vWx0sQXTDUZ2kZe145lSmMOjPrJ18aliWXCA8SnRNCnYc_lkIpbw37oOD0zs3n0MFdwoIX_OlwdZbQ4GO61Y2fTB7fJQYrQQejMLuLd770WzsJPrf2JQqCOiigzfhBQhYyM52KxaSVx7vNjzLNycDC1_HWRo94JGaixhBZ-Jrj-RC5VUQEdj3b7V6GZMf_ktjn2-ykzGZpHZlzvZm1NTFqNMYrfK-OsOpJyLsiZwLT89m-NpqGW8O-lcKIe1OMLQiCzI7zRpL8ziaa5FH3qHt7nyp6tHhgzOmcs1z7mKZ7thOhsVoJQuJOCOlqzpaYJALg","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.AKlAkSROyy43thlt1j5ZJOmNMSicJYFbsB_c7ffqZPf8U1TOzR5NRlJ_Ixsb1QKga1lgxI_hMufnWPqCvzBGsoSIv_4UTMaSz4xqZ-FK84pxSMykA7K4yLCZM_cQgQ6aUFZdoM6lP_bYJWucRv05ENF6vYsrOEO6pH5kNYiT0HMzddzbXKUzVnphaE7jy85JGe0tdwaaMUnli3oBe8vZVFUM06SmDh7PFCffnhq8S16nXj4n-d282tN870H57IleCv3nIz7D5k0yQf0RD5wCpcw2uBmAOjz3zF8VSPzHPPvbHP6BSfjymrqKBCfMGFQhJEbfbrSeHJA4fzyN7EWwNg.3JgKOHCkfxfYuso5.0ni6fyLz--OTjK2S70SYcIXqpApFqG5S1bHucJshfHDDTUQJrRF9EgPp9Aeo6x_Pkoe3KW-WM0uaXyJ0id6svGa6Croa6uPhGaGOZRM5cre6-MqYvE55BMT3QO_E-7QZsIR38hhk8yzcK6Odgzqn_aRK4E8PPIdSbVla8pzTRDnP9AudxgELOv868nQAFd98PiJshc4MVtBRmAOlnPlLNcTWOnsFDKp0W_f5qNU-qY7g9Zfxy-iBtwedZ4CKxiVfK0zNX5XnJ9SEGXeJBJF0K3IRv_hMMVhXQgG3gil98WRikgDzjXIvk5HFj6ex8T1joNkPFKwUp0Q47lpknrDzcwDuhkTV_zRzJRYNsF9GduOnJJ7AFVkkkDdc8wP-AbQwPtiCJ3uQ9jSj5SLfMpY2jpBcAu67BOCPDsE2ZelJsy0UZ45TmW8BFh7geGIkS05EiljeJ7ekGYHus2iF8x2yvfC8T5qIk62pnBIwE0RKCSpynMl9lNMb-5t5AkoDL3OS4S_CJXH3PBg3dbM5Lv5txXpOTxoPdxEouEgbJbQy_laTGniHyzmSd4g9wqpX3HU9oWe68VYZsGaFJ3109cRsMbwpqiPcFMX4kJ3cei5Dnzu-deJAnpjIETb9rvDmqNDE-RrG0dA0iDXl9SXC78z9JpMOR7yPnxW_P1KGCgSszA4V-ifZPei7HKIf6m63glAr2Ex2lRkimtEA6wvRRmZEu15Rv_MkSesutj_wQ8qUZ1RUXxB02AA6To8J-HgEqSXZyzhWEbv_Iq0miE3WwY7H1d-2J5IOTmgZad27Ss15mIiwa7GSPP0h0oaL2u4xOH4mGOdQshethOXIeanR5tDCqFbdHTzIoqIMyCo8upl9dRUbziO4LpnkKg_d-fHvYXEBYlNrvU1WpefVwW8VNUeOviFJHfiSYRAe7VvH1rZ75VEpjz3yUk7sGG5uyQI3AqTjO2zUagD4dwaNclIMvPS2bUUSNfNpJ_4MbrN0on4cxs5hUSL_ll69xI6qskBrGuwCRMqdbYQxq41_5YM49gPXWNr6ZwPXlEPowebNwJxZgonUYu-gEquPHFcWW0wTfRuTTeubFqlAe6HDrMk2aUwkP4C6LdVkwCVtU5018aa_QGH_e8RfEWonmWosjO1Ldbjt3Qf-p6AjG_y2PBq3JqZCNE3Kjy0de7TL6spG7523v4GXJOmEX4oeC2NOLQUd60QiZRZqn833tS_c4ABTQXGUp2UH6FbiOZiMeQ8rjbzehbVOcn0NxM2RuASew_aID23ks2xqAHBCd2Rze1sJ0oiRri3jT45E.nkaNnPf43sL-suXwPS0VNA","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ"}}</msg>
<status status="PASS" starttime="20220725 10:01:29.925" endtime="20220725 10:01:29.925"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.930" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:01:29.925" endtime="20220725 10:01:29.930"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:29.930" endtime="20220725 10:01:29.931"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:29.745" endtime="20220725 10:01:29.931"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:29.932" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:01:29.932" endtime="20220725 10:01:29.932"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:01:29.964" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:01:29.932" endtime="20220725 10:01:29.964"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.965" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ']</msg>
<status status="PASS" starttime="20220725 10:01:29.964" endtime="20220725 10:01:29.965"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.967" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:01:29.965" endtime="20220725 10:01:29.967"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:25.102" endtime="20220725 10:01:29.968"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:25.101" endtime="20220725 10:01:29.968"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:29.969" endtime="20220725 10:01:29.969"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.970" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:29.969" endtime="20220725 10:01:29.970"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.970" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:29.970" endtime="20220725 10:01:29.971"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:29.973" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:29.972" endtime="20220725 10:01:29.973"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:29.971" endtime="20220725 10:01:29.973"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:29.974" endtime="20220725 10:01:29.974"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:29.975" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:29.980" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:30.139" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:29.974" endtime="20220725 10:01:30.140"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:30.141" endtime="20220725 10:01:30.141"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:29.973" endtime="20220725 10:01:30.142"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:30.144" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:30.144" level="INFO">${TextFileContent} = UVW5jH98jlTtmVzEsIz4TysvyeWvHQRURDOkajlO0OTyW/euiT8I0ccfIydQpo+6MKEgSTzebGKEhHYLhKbfJC045i/U3Deluxr1FfW6k+eeaDIuJKPZdxrV7Uz7usuD9sh5N2sX3xdkBgXcys9Q2qmGgBBAcSc66Vm92s2cOjZZaysVrpNbM2vRmZobwYFsiQv5RE/D...</msg>
<status status="PASS" starttime="20220725 10:01:30.143" endtime="20220725 10:01:30.144"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:30.146" level="INFO">${RESULT_ENCRYPT_DATA} = UVW5jH98jlTtmVzEsIz4TysvyeWvHQRURDOkajlO0OTyW/euiT8I0ccfIydQpo+6MKEgSTzebGKEhHYLhKbfJC045i/U3Deluxr1FfW6k+eeaDIuJKPZdxrV7Uz7usuD9sh5N2sX3xdkBgXcys9Q2qmGgBBAcSc66Vm92s2cOjZZaysVrpNbM2vRmZobwYFsiQv5RE/D...</msg>
<status status="PASS" starttime="20220725 10:01:30.145" endtime="20220725 10:01:30.146"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:30.142" endtime="20220725 10:01:30.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:01:30.147" level="INFO">&amp;{body} = { data=UVW5jH98jlTtmVzEsIz4TysvyeWvHQRURDOkajlO0OTyW/euiT8I0ccfIydQpo+6MKEgSTzebGKEhHYLhKbfJC045i/U3Deluxr1FfW6k+eeaDIuJKPZdxrV7Uz7usuD9sh5N2sX3xdkBgXcys9Q2qmGgBBAcSc66Vm92s2cOjZZaysVrpNbM2vRmZobwYFsi...</msg>
<status status="PASS" starttime="20220725 10:01:30.146" endtime="20220725 10:01:30.147"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:34.431" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "UVW5jH98jlTtmVzEsIz4TysvyeWvHQRURDOkajlO0OTyW/euiT8I0ccfIydQpo+6MKEgSTzebGKEhHYLhKbfJC045i/U3Deluxr1FfW6k+eeaDIuJKPZdxrV7Uz7usuD9sh5N2sX3xdkBgXcys9Q2qmGgBBAcSc66Vm92s2cOjZZaysVrpNbM2vRmZobwYFsiQv5RE/D6eBva7nOwK2nZQedVPHzeeDDWKxRy4HXAOU4mDiQplvv++Io3Irxr/Cb3ObNMXxLh4YvQK1h3Lu3Dh75uDK63t4Ib+O0zotptas7h+HBBJ6wG54uYCQ92wiyckh3RwBH"}' 
 </msg>
<msg timestamp="20220725 10:01:34.431" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:34 GMT', 'x-amzn-RequestId': '0994bb99-a2fa-485a-89c3-69e828da4421', 'x-amz-apigw-id': 'VzYd1EQOyQ0Fv8w=', 'X-Amzn-Trace-Id': 'Root=1-62de078b-1e75ab3954df122d74bf1a75', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 f312575ded1ce209349107064ef185be.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'W0z3JJyyE3SzaDjAYEl29wo2WHbc0Q8ZoAkl6l8qJLks5xcayhesWg=='} 
 body={"data":"z3FTMxc30BXEWyXNnTgn2+rRzFbUxFWcmydu6FCX+8Pfzj1iPU7ZPYpYPvSVn0IUWs8Fqx8Cr2MyDZHpgCIhF5MubNtT+9J6fo05fks6OALtjvWzs6bUL/n0J1j8qlGHVdaSXV1AcT15NgETH2huiFYJE0sSS+XIexu7vZLuN/BBWWFHTGKIR22b2wuDVcyVEngEx88mtqY6e2ZWz/ocj+VDToqCqap+B+rhkD3dSG4eK24kCwsauOcz/ENELlUuLha69Vaj3secPEbZl2w41Shp737RtRADmTEZ8al1LbkA1agknCVDcCURYFg0LiMQZyr0IjnNUy5coFR2+zoltcOg5AsWf/t74pA4yUOxWSDQXaAezYkE2PRF2E5YYRZ02KYKPtJd"} 
 </msg>
<msg timestamp="20220725 10:01:34.431" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:34.431" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:30.147" endtime="20220725 10:01:34.431"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.433" level="INFO">${RESPONSE_ENCRYPT_TYPE} = z3FTMxc30BXEWyXNnTgn2+rRzFbUxFWcmydu6FCX+8Pfzj1iPU7ZPYpYPvSVn0IUWs8Fqx8Cr2MyDZHpgCIhF5MubNtT+9J6fo05fks6OALtjvWzs6bUL/n0J1j8qlGHVdaSXV1AcT15NgETH2huiFYJE0sSS+XIexu7vZLuN/BBWWFHTGKIR22b2wuDVcyVEngEx88m...</msg>
<status status="PASS" starttime="20220725 10:01:34.432" endtime="20220725 10:01:34.433"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:34.434" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text z3FTMxc30BXEWyXNnTgn2+rRzFbUxFWcmydu6FCX+8Pfzj1iPU7ZPYpYPvSVn0IUWs8Fqx8Cr2MyDZHpgCIhF5MubNtT+9J6fo05fks6OALtjvWzs6bUL/n0J1j8qlGHVdaSXV1AcT15NgETH2huiFYJE0sSS+XIexu7vZLuN/BBWWFHTGKIR22b2wuDVcyVEngEx88mtqY6e2ZWz/ocj+VDToqCqap+B+rhkD3dSG4eK24kCwsauOcz/ENELlUuLha69Vaj3secPEbZl2w41Shp737RtRADmTEZ8al1LbkA1agknCVDcCURYFg0LiMQZyr0IjnNUy5coFR2+zoltcOg5AsWf/t74pA4yUOxWSDQXaAezYkE2PRF2E5YYRZ02KYKPtJd</msg>
<msg timestamp="20220725 10:01:34.439" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:34.590" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:34.434" endtime="20220725 10:01:34.590"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:34.591" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:34.591" endtime="20220725 10:01:34.591"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.593" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500019"}}</msg>
<status status="PASS" starttime="20220725 10:01:34.592" endtime="20220725 10:01:34.593"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.594" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:01:34.593" endtime="20220725 10:01:34.594"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:34.594" endtime="20220725 10:01:34.594"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:34.433" endtime="20220725 10:01:34.594"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:34.595" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:01:34.595" endtime="20220725 10:01:34.595"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.617" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:01:34.595" endtime="20220725 10:01:34.617"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.618" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:01:34.617" endtime="20220725 10:01:34.618"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.639" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:01:34.618" endtime="20220725 10:01:34.639"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.642" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:01:34.639" endtime="20220725 10:01:34.642"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.666" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:34.642" endtime="20220725 10:01:34.666"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.667" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:01:34.666" endtime="20220725 10:01:34.667"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.688" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:01:34.667" endtime="20220725 10:01:34.688"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.689" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:01:34.688" endtime="20220725 10:01:34.689"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.710" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:01:34.689" endtime="20220725 10:01:34.710"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.713" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:01:34.710" endtime="20220725 10:01:34.713"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.735" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:34.713" endtime="20220725 10:01:34.735"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.738" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:01:34.735" endtime="20220725 10:01:34.738"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.760" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:34.738" endtime="20220725 10:01:34.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.763" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:01:34.760" endtime="20220725 10:01:34.763"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.783" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:01:34.763" endtime="20220725 10:01:34.783"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.786" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:01:34.783" endtime="20220725 10:01:34.786"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:34.807" level="INFO">${values_code} = ['EQ2022072500019']</msg>
<status status="PASS" starttime="20220725 10:01:34.786" endtime="20220725 10:01:34.807"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.810" level="INFO">${TRANS_ID} = EQ2022072500019</msg>
<status status="PASS" starttime="20220725 10:01:34.807" endtime="20220725 10:01:34.810"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:29.968" endtime="20220725 10:01:34.810"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:34.811" endtime="20220725 10:01:34.811"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.812" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:34.812" endtime="20220725 10:01:34.812"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.813" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:34.812" endtime="20220725 10:01:34.813"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.815" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:34.814" endtime="20220725 10:01:34.815"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:34.813" endtime="20220725 10:01:34.815"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:34.816" endtime="20220725 10:01:34.816"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:34.816" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:34.821" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:34.971" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:34.816" endtime="20220725 10:01:34.971"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:34.972" endtime="20220725 10:01:34.973"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:34.815" endtime="20220725 10:01:34.973"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:34.975" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:34.975" level="INFO">${TextFileContent} = pF0XqA15qoxQ82OJA/FDJMEgfGHDHY9H50C8temJJb7qIo2ElzgBFivkUWB3vdW0usfI3IMZh6iMYKJH/JxTuWuG7hl5FmHDUe8ZiO5Rneskb0Q=</msg>
<status status="PASS" starttime="20220725 10:01:34.974" endtime="20220725 10:01:34.975"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:34.977" level="INFO">${RESULT_ENCRYPT_DATA} = pF0XqA15qoxQ82OJA/FDJMEgfGHDHY9H50C8temJJb7qIo2ElzgBFivkUWB3vdW0usfI3IMZh6iMYKJH/JxTuWuG7hl5FmHDUe8ZiO5Rneskb0Q=</msg>
<status status="PASS" starttime="20220725 10:01:34.976" endtime="20220725 10:01:34.977"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:34.973" endtime="20220725 10:01:34.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:01:34.978" level="INFO">&amp;{body} = { data=pF0XqA15qoxQ82OJA/FDJMEgfGHDHY9H50C8temJJb7qIo2ElzgBFivkUWB3vdW0usfI3IMZh6iMYKJH/JxTuWuG7hl5FmHDUe8ZiO5Rneskb0Q= }</msg>
<status status="PASS" starttime="20220725 10:01:34.978" endtime="20220725 10:01:34.978"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:37.172" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "pF0XqA15qoxQ82OJA/FDJMEgfGHDHY9H50C8temJJb7qIo2ElzgBFivkUWB3vdW0usfI3IMZh6iMYKJH/JxTuWuG7hl5FmHDUe8ZiO5Rneskb0Q="}' 
 </msg>
<msg timestamp="20220725 10:01:37.173" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:36 GMT', 'x-amzn-RequestId': 'b804c13d-b865-48bb-a02e-889614b746bc', 'x-amz-apigw-id': 'VzYelGp3yQ0FZxg=', 'X-Amzn-Trace-Id': 'Root=1-62de0790-01f4a8cd00158c670cc8a205', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 8974e61a4a7de3ae4569bb22e6553854.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'f6LOnVbPPzXPZrcVKHkVtrcuxODH_0Jvp115O1fsO06eWJlALWEqKA=='} 
 body={"data":"aYylAQ7pY2ZSBXOtY8lkf6eMMP6M5wWK8VSiG9tiThoX3fxVq5r3eFmaTrTM9zl+O7GNoD8CW5/5tqg3Zj6v1OQltpCwqJMIXAsoA1NcrRkLpaVtYPyaD/dPlF6kilz+CaDFvBsj1RIKHkM4/Eu1iLDXOZHDDS01Eay48STvwo8korCS/RHkasjLLeAv7Wzq2dMVJbc0K7lO7ozpvxsaVeCgb+uzW8kU9fvqSimnb8V+DhjEaZ9pzZUgjqqc68Ife8PNnKAQAYvCRzVBFB6V6lo="} 
 </msg>
<msg timestamp="20220725 10:01:37.173" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:37.173" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:34.978" endtime="20220725 10:01:37.173"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.174" level="INFO">${RESPONSE_ENCRYPT_TYPE} = aYylAQ7pY2ZSBXOtY8lkf6eMMP6M5wWK8VSiG9tiThoX3fxVq5r3eFmaTrTM9zl+O7GNoD8CW5/5tqg3Zj6v1OQltpCwqJMIXAsoA1NcrRkLpaVtYPyaD/dPlF6kilz+CaDFvBsj1RIKHkM4/Eu1iLDXOZHDDS01Eay48STvwo8korCS/RHkasjLLeAv7Wzq2dMVJbc0...</msg>
<status status="PASS" starttime="20220725 10:01:37.173" endtime="20220725 10:01:37.174"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:37.176" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text aYylAQ7pY2ZSBXOtY8lkf6eMMP6M5wWK8VSiG9tiThoX3fxVq5r3eFmaTrTM9zl+O7GNoD8CW5/5tqg3Zj6v1OQltpCwqJMIXAsoA1NcrRkLpaVtYPyaD/dPlF6kilz+CaDFvBsj1RIKHkM4/Eu1iLDXOZHDDS01Eay48STvwo8korCS/RHkasjLLeAv7Wzq2dMVJbc0K7lO7ozpvxsaVeCgb+uzW8kU9fvqSimnb8V+DhjEaZ9pzZUgjqqc68Ife8PNnKAQAYvCRzVBFB6V6lo=</msg>
<msg timestamp="20220725 10:01:37.181" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:37.342" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:37.175" endtime="20220725 10:01:37.342"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:37.344" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:37.343" endtime="20220725 10:01:37.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.344" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:01:37.344" endtime="20220725 10:01:37.344"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.345" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:01:37.344" endtime="20220725 10:01:37.345"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:37.346" endtime="20220725 10:01:37.346"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.175" endtime="20220725 10:01:37.346"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:37.347" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:01:37.347" endtime="20220725 10:01:37.347"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:37.370" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:37.348" endtime="20220725 10:01:37.370"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.373" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:01:37.371" endtime="20220725 10:01:37.373"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:34.810" endtime="20220725 10:01:37.373"></status>
</kw>
<kw name="Validate_customer_pass" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:37.374" endtime="20220725 10:01:37.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.376" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:37.375" endtime="20220725 10:01:37.376"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.377" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:37.376" endtime="20220725 10:01:37.377"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:37.378" endtime="20220725 10:01:37.708"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:01:37.709" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:01:37.708" endtime="20220725 10:01:37.709"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:01:37.709" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:01:37.709" endtime="20220725 10:01:37.709"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:01:37.710" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:01:37.709" endtime="20220725 10:01:37.710"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:01:37.710" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:01:37.710" endtime="20220725 10:01:37.710"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:01:37.711" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:01:37.711" endtime="20220725 10:01:37.711"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:01:37.712" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:01:37.712" endtime="20220725 10:01:37.712"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:01:37.713" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:01:37.712" endtime="20220725 10:01:37.713"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:01:37.714" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:01:37.713" endtime="20220725 10:01:37.714"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.714" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:01:37.714" endtime="20220725 10:01:37.714"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.717" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:01:37.715" endtime="20220725 10:01:37.717"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.718" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:01:37.717" endtime="20220725 10:01:37.718"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.721" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:01:37.718" endtime="20220725 10:01:37.721"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.722" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:01:37.721" endtime="20220725 10:01:37.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.724" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:01:37.722" endtime="20220725 10:01:37.724"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.724" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:01:37.724" endtime="20220725 10:01:37.724"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.725" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:01:37.725" endtime="20220725 10:01:37.725"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:01:37.725" endtime="20220725 10:01:37.725"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.377" endtime="20220725 10:01:37.725"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.727" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:37.726" endtime="20220725 10:01:37.727"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.725" endtime="20220725 10:01:37.728"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:37.728" endtime="20220725 10:01:37.729"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:37.730" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:37.734" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:37.908" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:37.729" endtime="20220725 10:01:37.908"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:37.909" endtime="20220725 10:01:37.910"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.728" endtime="20220725 10:01:37.910"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:37.912" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:37.912" level="INFO">${TextFileContent} = /XgFhB4+T4NBteUXWSBW9WYdSZN5Qttw8Oss62hwMUGM03G4ptGd2WFtRqvMLpXpIZ7sTuy9pJ2llWO9T4ar8Rsk/R+iOdsgtJeRbFj5O6h4LaA1YQ7gcGxcvjkBHo7YP2P2gLeVEHUkF6HqxJGVgD7HvSqpi7sLjwJUj6JUnvSZdISi/zzXf7A5gDegmgrLbHe3G6u6...</msg>
<status status="PASS" starttime="20220725 10:01:37.911" endtime="20220725 10:01:37.912"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:37.913" level="INFO">${RESULT_ENCRYPT_DATA} = /XgFhB4+T4NBteUXWSBW9WYdSZN5Qttw8Oss62hwMUGM03G4ptGd2WFtRqvMLpXpIZ7sTuy9pJ2llWO9T4ar8Rsk/R+iOdsgtJeRbFj5O6h4LaA1YQ7gcGxcvjkBHo7YP2P2gLeVEHUkF6HqxJGVgD7HvSqpi7sLjwJUj6JUnvSZdISi/zzXf7A5gDegmgrLbHe3G6u6...</msg>
<status status="PASS" starttime="20220725 10:01:37.913" endtime="20220725 10:01:37.914"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.910" endtime="20220725 10:01:37.914"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:01:37.914" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:37.915" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:01:37.916" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:01:37.917" level="INFO">${body} = {'data': '/XgFhB4+T4NBteUXWSBW9WYdSZN5Qttw8Oss62hwMUGM03G4ptGd2WFtRqvMLpXpIZ7sTuy9pJ2llWO9T4ar8Rsk/R+iOdsgtJeRbFj5O6h4LaA1YQ7gcGxcvjkBHo7YP2P2gLeVEHUkF6HqxJGVgD7HvSqpi7sLjwJUj6JUnvSZdISi/zzXf7A5gDegmg...</msg>
<status status="PASS" starttime="20220725 10:01:37.914" endtime="20220725 10:01:37.917"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:43.511" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:01:43.512" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:43 GMT', 'x-amzn-RequestId': 'f2643f25-e57d-4b20-8518-f3f649a93b47', 'x-amz-apigw-id': 'VzYfLEhQyQ0Fc0A=', 'X-Amzn-Trace-Id': 'Root=1-62de0793-196b60e27918a6b42f41c0aa', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 1a25e657bbdfbe4dde177fef28655f02.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'v2lrxDMla-EnwJwvpYQ74I2gtyHwdhuFzN2LUwn4M9VcqtCxj6FipA=='} 
 body={"data":"ZnZeMswPrnk/sOhP5MZYhj/QNJ30JNJQhIcY6gMYaXWx6qqpo/YtCP3WUfkFi3ZANoKWN+qGHRwlc+oTpBLljdiIyQ4ouf2h7Qv5vZOoUVQ/GmqPxE74/Aiq3sE8B8OD53CT/4MsFeU7hlwimt9kLKanTrXC7UqdRZ0MVwPBj6V3j65NLWpkffl8IUxpSM7z2wHaLxLZruDU9wz6x3c6+0aP6YXGFtmrvPNHkq2R9u/Vl8js6dWRUcy+abSHMiXUQV9pPWgIas5QE3v/r3qw/NryE+vXJFwk1udHWatwK1bdZc2pum5Hog5RAfWix/Gb9B/5fC2V2Xpq7S5FjkavmN3PDsNKuw=="} 
 </msg>
<msg timestamp="20220725 10:01:43.512" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:43.512" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:37.918" endtime="20220725 10:01:43.512"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.514" level="INFO">${RESPONSE_ENCRYPT_TYPE} = ZnZeMswPrnk/sOhP5MZYhj/QNJ30JNJQhIcY6gMYaXWx6qqpo/YtCP3WUfkFi3ZANoKWN+qGHRwlc+oTpBLljdiIyQ4ouf2h7Qv5vZOoUVQ/GmqPxE74/Aiq3sE8B8OD53CT/4MsFeU7hlwimt9kLKanTrXC7UqdRZ0MVwPBj6V3j65NLWpkffl8IUxpSM7z2wHaLxLZ...</msg>
<status status="PASS" starttime="20220725 10:01:43.513" endtime="20220725 10:01:43.514"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:43.515" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text ZnZeMswPrnk/sOhP5MZYhj/QNJ30JNJQhIcY6gMYaXWx6qqpo/YtCP3WUfkFi3ZANoKWN+qGHRwlc+oTpBLljdiIyQ4ouf2h7Qv5vZOoUVQ/GmqPxE74/Aiq3sE8B8OD53CT/4MsFeU7hlwimt9kLKanTrXC7UqdRZ0MVwPBj6V3j65NLWpkffl8IUxpSM7z2wHaLxLZruDU9wz6x3c6+0aP6YXGFtmrvPNHkq2R9u/Vl8js6dWRUcy+abSHMiXUQV9pPWgIas5QE3v/r3qw/NryE+vXJFwk1udHWatwK1bdZc2pum5Hog5RAfWix/Gb9B/5fC2V2Xpq7S5FjkavmN3PDsNKuw==</msg>
<msg timestamp="20220725 10:01:43.521" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:43.670" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:43.515" endtime="20220725 10:01:43.670"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:43.672" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:43.671" endtime="20220725 10:01:43.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.672" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220725 10:01:43.672" endtime="20220725 10:01:43.673"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.674" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220725 10:01:43.673" endtime="20220725 10:01:43.674"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:43.674" endtime="20220725 10:01:43.675"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.514" endtime="20220725 10:01:43.675"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:43.675" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0875787441', 'consent...</msg>
<status status="PASS" starttime="20220725 10:01:43.675" endtime="20220725 10:01:43.675"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..consent_new_version</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:43.700" level="INFO">${values_code} = [True]</msg>
<status status="PASS" starttime="20220725 10:01:43.675" endtime="20220725 10:01:43.700"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.702" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220725 10:01:43.700" endtime="20220725 10:01:43.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Agree_Consent</arg>
</arguments>
<kw name="Agree_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:43.704" endtime="20220725 10:01:43.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.704" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:43.704" endtime="20220725 10:01:43.704"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.705" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:43.705" endtime="20220725 10:01:43.705"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.707" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:43.706" endtime="20220725 10:01:43.707"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.705" endtime="20220725 10:01:43.707"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:43.708" endtime="20220725 10:01:43.708"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:43.709" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:43.713" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:43.865" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:43.708" endtime="20220725 10:01:43.865"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:43.866" endtime="20220725 10:01:43.867"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.707" endtime="20220725 10:01:43.867"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:43.869" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:43.869" level="INFO">${TextFileContent} = be+BAoUcEeGxnOoMUck/0iTPeb2SR/RGNa25Bk85AGtJjWYgZlTnn7B/06alTVp5jfbz+wxZ6S2gxmejeJ2uKJtmO7lSV37jJFphxWrAICvx/RE=</msg>
<status status="PASS" starttime="20220725 10:01:43.868" endtime="20220725 10:01:43.869"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:43.870" level="INFO">${RESULT_ENCRYPT_DATA} = be+BAoUcEeGxnOoMUck/0iTPeb2SR/RGNa25Bk85AGtJjWYgZlTnn7B/06alTVp5jfbz+wxZ6S2gxmejeJ2uKJtmO7lSV37jJFphxWrAICvx/RE=</msg>
<status status="PASS" starttime="20220725 10:01:43.869" endtime="20220725 10:01:43.870"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.867" endtime="20220725 10:01:43.870"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:01:43.871" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:43.871" level="INFO">To JSON using : content={"data": "be+BAoUcEeGxnOoMUck/0iTPeb2SR/RGNa25Bk85AGtJjWYgZlTnn7B/06alTVp5jfbz+wxZ6S2gxmejeJ2uKJtmO7lSV37jJFphxWrAICvx/RE="} </msg>
<msg timestamp="20220725 10:01:43.871" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:01:43.871" level="INFO">${body} = {'data': 'be+BAoUcEeGxnOoMUck/0iTPeb2SR/RGNa25Bk85AGtJjWYgZlTnn7B/06alTVp5jfbz+wxZ6S2gxmejeJ2uKJtmO7lSV37jJFphxWrAICvx/RE='}</msg>
<status status="PASS" starttime="20220725 10:01:43.870" endtime="20220725 10:01:43.871"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:46.829" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "be+BAoUcEeGxnOoMUck/0iTPeb2SR/RGNa25Bk85AGtJjWYgZlTnn7B/06alTVp5jfbz+wxZ6S2gxmejeJ2uKJtmO7lSV37jJFphxWrAICvx/RE="}' 
 </msg>
<msg timestamp="20220725 10:01:46.830" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:46 GMT', 'x-amzn-RequestId': 'ab186896-e866-4e61-9181-3781519eb57f', 'x-amz-apigw-id': 'VzYf8HH_yQ0Fs1A=', 'X-Amzn-Trace-Id': 'Root=1-62de0799-005577225a6781952a84695a', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 ef83386f79c9e19f4894237e9cf67dd2.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'JODSjFMQUZgng7eLE26AHctoBBnbxaS3sQCUb2CmBru_phVv6IbLNA=='} 
 body={"data":"ztuDu3WPSe/gwfapdJo4s0dHZVRpzYMxeYHDn3WE/kznlQUQMY0h4CIhxoXYCVpH3odvWuvu8GVk06QpYr79q9KkdCbkbA/WjeDpYchenohvEf8YOFhmitm5jgYOmdnqH1c9K/LAGbh9LKB2atY78h6EufFSPi9O4nPVoY0dObhPhZglKxjpr6oTK8mIxult0hykc00zopBDboYZLyj2dIoMUUODx9BNHjkUjwLXEQpN9UHVFV1QGnnxzVZr/oFc60GGc4pnUFeODvP36Xr9evM="} 
 </msg>
<msg timestamp="20220725 10:01:46.831" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:46.831" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:43.872" endtime="20220725 10:01:46.831"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:46.832" level="INFO">${RESPONSE_ENCRYPT_TYPE} = ztuDu3WPSe/gwfapdJo4s0dHZVRpzYMxeYHDn3WE/kznlQUQMY0h4CIhxoXYCVpH3odvWuvu8GVk06QpYr79q9KkdCbkbA/WjeDpYchenohvEf8YOFhmitm5jgYOmdnqH1c9K/LAGbh9LKB2atY78h6EufFSPi9O4nPVoY0dObhPhZglKxjpr6oTK8mIxult0hykc00z...</msg>
<status status="PASS" starttime="20220725 10:01:46.831" endtime="20220725 10:01:46.832"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:46.834" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text ztuDu3WPSe/gwfapdJo4s0dHZVRpzYMxeYHDn3WE/kznlQUQMY0h4CIhxoXYCVpH3odvWuvu8GVk06QpYr79q9KkdCbkbA/WjeDpYchenohvEf8YOFhmitm5jgYOmdnqH1c9K/LAGbh9LKB2atY78h6EufFSPi9O4nPVoY0dObhPhZglKxjpr6oTK8mIxult0hykc00zopBDboYZLyj2dIoMUUODx9BNHjkUjwLXEQpN9UHVFV1QGnnxzVZr/oFc60GGc4pnUFeODvP36Xr9evM=</msg>
<msg timestamp="20220725 10:01:46.838" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:46.998" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:46.833" endtime="20220725 10:01:46.998"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:46.999" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:46.999" endtime="20220725 10:01:46.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.001" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:01:47.000" endtime="20220725 10:01:47.001"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.002" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:01:47.002" endtime="20220725 10:01:47.002"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:47.002" endtime="20220725 10:01:47.003"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:46.832" endtime="20220725 10:01:47.003"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:47.003" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:01:47.003" endtime="20220725 10:01:47.003"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:47.027" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:47.003" endtime="20220725 10:01:47.027"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.030" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:01:47.027" endtime="20220725 10:01:47.030"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.703" endtime="20220725 10:01:47.030"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:43.703" endtime="20220725 10:01:47.030"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:37.374" endtime="20220725 10:01:47.030"></status>
</kw>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:47.031" endtime="20220725 10:01:47.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.032" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:47.032" endtime="20220725 10:01:47.032"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.033" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:47.033" endtime="20220725 10:01:47.034"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.035" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:47.034" endtime="20220725 10:01:47.035"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:47.034" endtime="20220725 10:01:47.035"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:47.036" endtime="20220725 10:01:47.036"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:47.037" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:01:47.042" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:47.198" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:47.036" endtime="20220725 10:01:47.198"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:47.199" endtime="20220725 10:01:47.199"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:47.036" endtime="20220725 10:01:47.200"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:47.202" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:47.202" level="INFO">${TextFileContent} = XJ753phb0BShpIvx1Ngembp0q6nuuXch5EoQ2VsBMJDq6RBlM72AlIvgkg+YDoscgTS6As2k2BS0TZtMdaYCv2WdvuzVrmzA32P0SRvGpCeAY8w+RQ==</msg>
<status status="PASS" starttime="20220725 10:01:47.201" endtime="20220725 10:01:47.202"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:47.203" level="INFO">${RESULT_ENCRYPT_DATA} = XJ753phb0BShpIvx1Ngembp0q6nuuXch5EoQ2VsBMJDq6RBlM72AlIvgkg+YDoscgTS6As2k2BS0TZtMdaYCv2WdvuzVrmzA32P0SRvGpCeAY8w+RQ==</msg>
<status status="PASS" starttime="20220725 10:01:47.203" endtime="20220725 10:01:47.204"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:47.200" endtime="20220725 10:01:47.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:01:47.204" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:47.205" level="INFO">To JSON using : content={"data": "XJ753phb0BShpIvx1Ngembp0q6nuuXch5EoQ2VsBMJDq6RBlM72AlIvgkg+YDoscgTS6As2k2BS0TZtMdaYCv2WdvuzVrmzA32P0SRvGpCeAY8w+RQ=="} </msg>
<msg timestamp="20220725 10:01:47.205" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:01:47.205" level="INFO">${body} = {'data': 'XJ753phb0BShpIvx1Ngembp0q6nuuXch5EoQ2VsBMJDq6RBlM72AlIvgkg+YDoscgTS6As2k2BS0TZtMdaYCv2WdvuzVrmzA32P0SRvGpCeAY8w+RQ=='}</msg>
<status status="PASS" starttime="20220725 10:01:47.204" endtime="20220725 10:01:47.205"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:01:53.318" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '128', 'Content-Type': 'application/json'} 
 body=b'{"data": "XJ753phb0BShpIvx1Ngembp0q6nuuXch5EoQ2VsBMJDq6RBlM72AlIvgkg+YDoscgTS6As2k2BS0TZtMdaYCv2WdvuzVrmzA32P0SRvGpCeAY8w+RQ=="}' 
 </msg>
<msg timestamp="20220725 10:01:53.319" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '415', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:01:53 GMT', 'x-amzn-RequestId': 'b5e319ad-ebc4-4b20-af98-46efbefc88a7', 'x-amz-apigw-id': 'VzYgeGeMSQ0FlxQ=', 'X-Amzn-Trace-Id': 'Root=1-62de079c-25465f87209434416d52a3bb', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 cf0259eeefbfae3b17a4a34a45ed0e48.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'lxz7GFr11XMJ2Prl5HA_engDOEaUWRBzxLt3laxpnm1cAzQtFRD3Uw=='} 
 body={"data":"ip/9EJ4h5MuyVfkDaxMQZd7IydLoSne37AgWeDltsdXYHBiw+biDLX3/6PgE7xpRU3nRsEJytxhT6vFcTlz3wsS3eD78g51Je3LVK2zTTczO0ruwCtQvItI4Oe59WuYar6RYjEc4diW63djU+8HvqnxHv6lNojtFeeS+NyeVtXGN4NMWgiKvklt2DyJnQZWvEc9c+yjzVyTfqgGqI1ww+2se2+npyWo91j1KCUiKgJD4jfbV4wkzcO6RfecPAWrIjh+1tpwXLcCUQR8C1Rcz7uybaRRJzsg91qTjV66nQPwt02pJx2MFn3WfLAaQ5Z0fRzljDmI6bnJxExE77DUuCLA59ntbUQIFJO4CZ76h25yONiZa0ip34mz5yEj2Jh9mx3aruEm4l1H/VbWqyK0="} 
 </msg>
<msg timestamp="20220725 10:01:53.319" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:01:53.319" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:47.205" endtime="20220725 10:01:53.319"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.320" level="INFO">${RESPONSE_ENCRYPT_TYPE} = ip/9EJ4h5MuyVfkDaxMQZd7IydLoSne37AgWeDltsdXYHBiw+biDLX3/6PgE7xpRU3nRsEJytxhT6vFcTlz3wsS3eD78g51Je3LVK2zTTczO0ruwCtQvItI4Oe59WuYar6RYjEc4diW63djU+8HvqnxHv6lNojtFeeS+NyeVtXGN4NMWgiKvklt2DyJnQZWvEc9c+yjz...</msg>
<status status="PASS" starttime="20220725 10:01:53.319" endtime="20220725 10:01:53.320"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:53.322" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text ip/9EJ4h5MuyVfkDaxMQZd7IydLoSne37AgWeDltsdXYHBiw+biDLX3/6PgE7xpRU3nRsEJytxhT6vFcTlz3wsS3eD78g51Je3LVK2zTTczO0ruwCtQvItI4Oe59WuYar6RYjEc4diW63djU+8HvqnxHv6lNojtFeeS+NyeVtXGN4NMWgiKvklt2DyJnQZWvEc9c+yjzVyTfqgGqI1ww+2se2+npyWo91j1KCUiKgJD4jfbV4wkzcO6RfecPAWrIjh+1tpwXLcCUQR8C1Rcz7uybaRRJzsg91qTjV66nQPwt02pJx2MFn3WfLAaQ5Z0fRzljDmI6bnJxExE77DUuCLA59ntbUQIFJO4CZ76h25yONiZa0ip34mz5yEj2Jh9mx3aruEm4l1H/VbWqyK0=</msg>
<msg timestamp="20220725 10:01:53.326" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:53.482" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:53.321" endtime="20220725 10:01:53.482"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:01:53.484" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:01:53.483" endtime="20220725 10:01:53.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.485" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072500019","dopa_status":"0","dopa_message":"สถานะปกติ"}}</msg>
<status status="PASS" starttime="20220725 10:01:53.484" endtime="20220725 10:01:53.485"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.486" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072500019","dopa_status":"0","d...</msg>
<status status="PASS" starttime="20220725 10:01:53.485" endtime="20220725 10:01:53.486"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:53.486" endtime="20220725 10:01:53.486"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.320" endtime="20220725 10:01:53.487"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:01:53.487" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'kyc_trans_id': 'EQ2022072500019', 'dop...</msg>
<status status="PASS" starttime="20220725 10:01:53.487" endtime="20220725 10:01:53.487"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:53.511" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:01:53.487" endtime="20220725 10:01:53.511"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.514" level="INFO">${DOPA_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:01:53.511" endtime="20220725 10:01:53.514"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:53.537" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:01:53.514" endtime="20220725 10:01:53.537"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.540" level="INFO">${DOPA_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:01:53.537" endtime="20220725 10:01:53.540"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:53.562" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:01:53.540" endtime="20220725 10:01:53.562"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.565" level="INFO">${DOPA_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:01:53.563" endtime="20220725 10:01:53.565"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:01:53.587" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:01:53.565" endtime="20220725 10:01:53.587"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.588" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:01:53.587" endtime="20220725 10:01:53.588"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:53.588" endtime="20220725 10:01:53.589"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.588" endtime="20220725 10:01:53.589"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:47.031" endtime="20220725 10:01:53.589"></status>
</kw>
<kw name="Liveness_and_FR_Pass" library="LivenessAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:53.590" endtime="20220725 10:01:53.590"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.590" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ'}</msg>
<status status="PASS" starttime="20220725 10:01:53.590" endtime="20220725 10:01:53.590"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.591" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:01:53.591" endtime="20220725 10:01:53.592"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${IMG_SOURCE}","kyc_trans_id":"${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.594" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:01:53.593" endtime="20220725 10:01:53.594"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.592" endtime="20220725 10:01:53.595"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:53.595" endtime="20220725 10:01:53.595"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:01:53.596" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220725 10:01:53.601" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:01:53.793" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:01:53.596" endtime="20220725 10:01:53.793"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:01:53.794" endtime="20220725 10:01:53.795"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.595" endtime="20220725 10:01:53.795"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:01:53.797" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:01:53.800" level="INFO">${TextFileContent} = FCPMupREhy5tgBQ97XvOQBwxTJDK5VEYgoh0kYxdry7dr21l+4L8uGSQ61/hdDlwqcE1Deh2x1uzWkB3H2sF5QMDEjQEb7rP3WTReUpL3hinDDQTY5DPuah3tIsYECC2IcXulLhzXxxxI9ZSYf6GoDzDZbpssG2nP1Y+IPtBOw1oXnW9S5A3VEbLYE9xuQltF0mTbXGH...</msg>
<status status="PASS" starttime="20220725 10:01:53.796" endtime="20220725 10:01:53.800"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:01:53.802" level="INFO">${RESULT_ENCRYPT_DATA} = FCPMupREhy5tgBQ97XvOQBwxTJDK5VEYgoh0kYxdry7dr21l+4L8uGSQ61/hdDlwqcE1Deh2x1uzWkB3H2sF5QMDEjQEb7rP3WTReUpL3hinDDQTY5DPuah3tIsYECC2IcXulLhzXxxxI9ZSYf6GoDzDZbpssG2nP1Y+IPtBOw1oXnW9S5A3VEbLYE9xuQltF0mTbXGH...</msg>
<status status="PASS" starttime="20220725 10:01:53.800" endtime="20220725 10:01:53.802"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.795" endtime="20220725 10:01:53.803"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:01:53.803" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:53.807" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:01:53.809" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:01:53.813" level="INFO">${body} = {'data': 'FCPMupREhy5tgBQ97XvOQBwxTJDK5VEYgoh0kYxdry7dr21l+4L8uGSQ61/hdDlwqcE1Deh2x1uzWkB3H2sF5QMDEjQEb7rP3WTReUpL3hinDDQTY5DPuah3tIsYECC2IcXulLhzXxxxI9ZSYf6GoDzDZbpssG2nP1Y+IPtBOw1oXnW9S5A3VEbLYE9xuQ...</msg>
<status status="PASS" starttime="20220725 10:01:53.803" endtime="20220725 10:01:53.813"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220725 10:02:07.758" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZjA4YmIwZmMtM2UxZi00ZjYyLWFlMGYtMjQxNTA1YjNiMGM2IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgwODgsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODM4OCwiaWF0IjoxNjU4NzE4MDg4fQ.OFrKUoOrY5SajZheRYVa_GoHtvAjjik4uZTFNP6OkpFzNuBKuvF3HEucFP-eNxHXLBSvaKQME-xxJui9ayAI9pS1v4regQW_lQVw0IaIpdXPq9gFm4Fh7lCuJ2WgAgOt8ZZryvD4HyXkvkNmWNyJGpo7OfaevskePwqexmNPSn9v3AJ1AH5Ow-4b9rKGXqJwuUTKxOXX5LQhPzLlfPJ-kVGH76mGZkvBQFLwk36qX1EsxIcYJZHn_b-46WNM2nG_YnXhH-FlsBWeHV0-KuWsUEFqJwdJV5t5X6VixJ2pX8MjAr8bJeIbPXW1kNWVQ96-8g6g9UcylLYROMKyTj3VSQ', 'Content-Length': '336552', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:02:07.758" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '223', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:07 GMT', 'x-amzn-RequestId': 'cce1ff0b-d5a1-42aa-9b9d-d1634fdb1574', 'x-amz-apigw-id': 'VzYhtEfzSQ0FcIQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07a3-1abeee6d364b379c6ae89740', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 bb784f1db0a47d55a8953c84e49cfa34.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'dUFJqGa1HrxJMN3Y-mLl4OadUO6RFIcFdkWajCU5FNqJNJKO6xQk5A=='} 
 body={"data":"lbQNBKEwoWfV1cZenm0H8ienkLSDyt11AMaHPf8rVQmmFUingZy0qpuEri/2tG9AuirpBpz1l0vZ8lxg13VCLGDu9MFhZ2G6rgWvrz1SYdErW1dYZISU9it6g4PjN0MxBWErSJPRngOuT03bGaFdvSyM1y6y4vpPSpyuYqJZMkoPkhYHIu/0UCPBJMuJhgkobCBtpHWCsPO1k6dfuvI="} 
 </msg>
<msg timestamp="20220725 10:02:07.759" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:07.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:01:53.813" endtime="20220725 10:02:07.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp.status_code}</arg>
</arguments>
<msg timestamp="20220725 10:02:07.760" level="INFO">200</msg>
<status status="PASS" starttime="20220725 10:02:07.759" endtime="20220725 10:02:07.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp.status_code}' != '200'</arg>
<arg>Save_error_When_its_active</arg>
<arg>FACIAL</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:07.760" endtime="20220725 10:02:07.761"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:07.762" level="INFO">${RESPONSE_ENCRYPT_TYPE} = lbQNBKEwoWfV1cZenm0H8ienkLSDyt11AMaHPf8rVQmmFUingZy0qpuEri/2tG9AuirpBpz1l0vZ8lxg13VCLGDu9MFhZ2G6rgWvrz1SYdErW1dYZISU9it6g4PjN0MxBWErSJPRngOuT03bGaFdvSyM1y6y4vpPSpyuYqJZMkoPkhYHIu/0UCPBJMuJhgkobCBtpHWC...</msg>
<status status="PASS" starttime="20220725 10:02:07.761" endtime="20220725 10:02:07.762"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:07.764" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text lbQNBKEwoWfV1cZenm0H8ienkLSDyt11AMaHPf8rVQmmFUingZy0qpuEri/2tG9AuirpBpz1l0vZ8lxg13VCLGDu9MFhZ2G6rgWvrz1SYdErW1dYZISU9it6g4PjN0MxBWErSJPRngOuT03bGaFdvSyM1y6y4vpPSpyuYqJZMkoPkhYHIu/0UCPBJMuJhgkobCBtpHWCsPO1k6dfuvI=</msg>
<msg timestamp="20220725 10:02:07.771" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:07.922" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:07.763" endtime="20220725 10:02:07.922"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:07.923" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:07.923" endtime="20220725 10:02:07.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:07.924" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:07.923" endtime="20220725 10:02:07.925"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:07.925" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":null,"user_message_en":null,"user_message_th":null},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:07.925" endtime="20220725 10:02:07.925"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:07.926" endtime="20220725 10:02:07.926"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:07.762" endtime="20220725 10:02:07.926"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:07.927" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:02:07.927" endtime="20220725 10:02:07.927"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:07.953" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:07.927" endtime="20220725 10:02:07.953"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:07.976" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:07.953" endtime="20220725 10:02:07.976"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:07.979" level="INFO">${MESS_STATUS} = Success</msg>
<status status="PASS" starttime="20220725 10:02:07.976" endtime="20220725 10:02:07.980"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:08.003" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:07.980" endtime="20220725 10:02:08.003"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:08.006" level="INFO">${LN_FR_RESPONE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:08.003" endtime="20220725 10:02:08.007"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:53.589" endtime="20220725 10:02:08.007"></status>
</kw>
<kw name="Check_ial_is_2_3" library="IAL_Page">
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<kw name="Connect To Database" library="DatabaseLibrary">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>psycopg2</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20220725 10:02:08.030" level="INFO">Connecting using : psycopg2.connect(database=bot_v2, user=postgres, password=RDBtxjPqaOmrasU4uNi2, host=tcrb-bot-pprd-db.cluster-cnu8aurcdwzj.ap-southeast-1.rds.amazonaws.com, port=5432) </msg>
<status status="PASS" starttime="20220725 10:02:08.008" endtime="20220725 10:02:08.301"></status>
</kw>
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = '${input_tran_id}'</arg>
</arguments>
<assign>
<var>@{queryResults_from_kyc_tran}</var>
</assign>
<msg timestamp="20220725 10:02:08.302" level="INFO">Executing : Query  |  SELECT x.* FROM kyc_db.kyc_transaction x WHERE trans_id = 'EQ2022072500019' </msg>
<msg timestamp="20220725 10:02:08.422" level="INFO">@{queryResults_from_kyc_tran} = [ ('aed4ede371a74292bdea47a7aa2ff427', 6, 'ca451f0cb90c4afd9ae4839376f42abb', 'EQ2022072500019', 'TCRB-TABLET', 'TCRB', 'EKYC QR Signup', 3, None, '2.3', datetime.date(2027, 7, 24), 'ekyc003', 'SM-P58...</msg>
<status status="PASS" starttime="20220725 10:02:08.302" endtime="20220725 10:02:08.422"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>@{queryResults_from_kyc_tran}</arg>
<arg>9</arg>
</arguments>
<assign>
<var>${ial_score_from_kyc_tran}</var>
</assign>
<msg timestamp="20220725 10:02:08.423" level="INFO">${ial_score_from_kyc_tran} = 2.3</msg>
<status status="PASS" starttime="20220725 10:02:08.423" endtime="20220725 10:02:08.423"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SCORE_IAL_KYCTRAN}</arg>
<arg>${ial_score_from_kyc_tran}</arg>
</arguments>
<msg timestamp="20220725 10:02:08.428" level="INFO">${SCORE_IAL_KYCTRAN} = 2.3</msg>
<status status="PASS" starttime="20220725 10:02:08.424" endtime="20220725 10:02:08.428"></status>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220725 10:02:08.428" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220725 10:02:08.428" endtime="20220725 10:02:08.429"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:08.007" endtime="20220725 10:02:08.429"></status>
</kw>
<doc>ทดสอบระบบ Stamp QR Used กรณีลูกค้า นำ QR code ที่ทำรายการ kyc สำเร็จแล้ว (สถานะ success) และ กลับมาทำ KYC อีกครั้ง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:01:24.355" endtime="20220725 10:02:08.429" critical="yes"></status>
</test>
<test id="s1-t2" name="QR_Stamp_used_5">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:08.435" endtime="20220725 10:02:08.436"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:08.437" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:08.436" endtime="20220725 10:02:08.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:08.438" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:02:08.437" endtime="20220725 10:02:08.438"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:09.117" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:02:09.118" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:02:09 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': '981fb019-030b-4b48-8c37-a44d14f2a162', 'x-amz-apigw-id': 'VzYjoH83yQ0FuDA=', 'X-Amzn-Trace-Id': 'Root=1-62de07b0-0ff944847880e048379211d0'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431582812710507949603246","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:02:09.118" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:09.118" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:08.438" endtime="20220725 10:02:09.118"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.120" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:09.119" endtime="20220725 10:02:09.120"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.121" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:09.120" endtime="20220725 10:02:09.122"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.123" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:09.122" endtime="20220725 10:02:09.123"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.124" level="INFO">${QR_VALUE} = 2431582812710507949603246</msg>
<status status="PASS" starttime="20220725 10:02:09.124" endtime="20220725 10:02:09.125"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.126" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:02:09.125" endtime="20220725 10:02:09.126"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.127" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:02:09.126" endtime="20220725 10:02:09.127"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.127" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:02:09.127" endtime="20220725 10:02:09.128"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:08.434" endtime="20220725 10:02:09.128"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.130" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:09.129" endtime="20220725 10:02:09.130"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:09.129" endtime="20220725 10:02:09.130"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:09.131" endtime="20220725 10:02:09.132"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:09.133" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:09.138" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:09.301" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:09.132" endtime="20220725 10:02:09.301"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:09.301" endtime="20220725 10:02:09.302"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:09.131" endtime="20220725 10:02:09.302"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:09.304" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:09.304" level="INFO">${TextFileContent} = p7mF/583696JPJomNv9dZDZk61cfDu1rR4mgecpRMeL6ZO3feDlPopovaW3JlL5puREIJu1KVXNlDQGztFwlrwXgVyMQKO3a0R6f2Quq9IiCoSHa7bMTm+N5DmCJQPfXcoU6vAU=</msg>
<status status="PASS" starttime="20220725 10:02:09.303" endtime="20220725 10:02:09.304"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.306" level="INFO">${RESULT_ENCRYPT_DATA} = p7mF/583696JPJomNv9dZDZk61cfDu1rR4mgecpRMeL6ZO3feDlPopovaW3JlL5puREIJu1KVXNlDQGztFwlrwXgVyMQKO3a0R6f2Quq9IiCoSHa7bMTm+N5DmCJQPfXcoU6vAU=</msg>
<status status="PASS" starttime="20220725 10:02:09.304" endtime="20220725 10:02:09.306"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:09.303" endtime="20220725 10:02:09.307"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:09.307" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:09.307" endtime="20220725 10:02:09.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:09.309" level="INFO">&amp;{body} = { data=p7mF/583696JPJomNv9dZDZk61cfDu1rR4mgecpRMeL6ZO3feDlPopovaW3JlL5puREIJu1KVXNlDQGztFwlrwXgVyMQKO3a0R6f2Quq9IiCoSHa7bMTm+N5DmCJQPfXcoU6vAU= }</msg>
<status status="PASS" starttime="20220725 10:02:09.308" endtime="20220725 10:02:09.309"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:13.273" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "p7mF/583696JPJomNv9dZDZk61cfDu1rR4mgecpRMeL6ZO3feDlPopovaW3JlL5puREIJu1KVXNlDQGztFwlrwXgVyMQKO3a0R6f2Quq9IiCoSHa7bMTm+N5DmCJQPfXcoU6vAU="}' 
 </msg>
<msg timestamp="20220725 10:02:13.273" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:13 GMT', 'x-amzn-RequestId': '0a4f963b-c97b-4906-a214-c6b58c641c6e', 'x-amz-apigw-id': 'VzYj7HzKSQ0FpCQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07b2-37df39ab0851f03f5bdc97e9', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 075ecc80ea8e9352008139ab9fd7a592.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'aONEmv0KzMZvrrl1gtfpoYO1HTumL2b7tckvVBILq3GNyILqk7wFmg=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:02:13.273" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:13.273" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:09.309" endtime="20220725 10:02:13.274"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.275" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 7ge/JKp6KMVxUEbfrD9rN8T3PPo+cW72pBO7M5F2Qg2kpWPt9RuFSa5TqzjmEfKxzzd16t7dms3v4NuP0ojYMKfQ11X8olzjqRg5CEde3R6EcVttaVrl3YMT6QkGzF6UZAEQG+IyrUc/e7gtlGByhc0WQ8u9qMjQEbwV23cJ7o6X9kCCQcEOfgAlMD3p7Uag6EbUhlBY...</msg>
<status status="PASS" starttime="20220725 10:02:13.274" endtime="20220725 10:02:13.275"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:13.277" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:02:13.281" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:13.443" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:13.275" endtime="20220725 10:02:13.443"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:13.445" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:13.444" endtime="20220725 10:02:13.445"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.446" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6ImM1ODA1MjVlLWQyMzAtNDk3OS04YmVhLTcwYzVjZmExMjE0MyIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg0MzIsImlhdCI6MTY1ODcxODEzMiwianRpIjoiMTBhNzE4MGItMGEzZi00NzY4LTkwOTMtODA5NzViZDU4ODA0IiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.Jc93Y5jYypBXBOnV77qNNIBUjvUu8kR0gEPFK_tfomA_xQ1Q8zbrAEKtJQ3zfXlmPpL4mzqfkZD29nIFpoEbw2QGm6N_ktfK_etNtql--lmVcw47XrKl3VzOi5kT6YkRAMLm_LYichOB5lNdJP2nj00A1KXfnP9y_2YIDMu-9DcqlUl-H70IP4VcnT5rN9orD4DzSJG9CkJqmhc3X1L1s338ECRB0s9TFcwjHRgaGG1k_EXkJ2Ng4fBnaST48axJNQFjPi9NO0eQGLPVuLYwyLhZIexQd0Spnp1_M7cfmQcg57iYkOm-bYdGex5vImIpGrk8HKGgLraUSlTu_UOYlQ","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.jXD-HbIuRvDFV6xXO-aGmtIAxQ4JzJumi1GQrRmsMKNxlD_uOR20ou72JZ6dP8cCEzFqvgWyPBD2nlVqvuMmGdiwp0aGfUCCZNEdwmj-UwHYdCQd7kNAvpzdOEtT0RkXhoNEI_R1HFQL5w6r7_ZvcErBVqTzvnoCKQUlVv0mQEUZGKLAI0x2o7BF-XL-JsuBObp7G9j7Fzhkq_Zx6BZILRV0-0jr9PiBJctGhgFgm4o6-NQIPCimYjpUV3fqO_ad5PFZAjiYpFuIsdF6v5wGBCgzRt-PixtZSCew5Y9-Sq4D8PdYMJMiftVtBohQUiUebP8GeBCEQibiHq0cbgKRTQ.fnGFYsHnq1topGlG.2aT0laNXQyRamlVXMiVHpn2AwndgbiQddQzgrpXeENA2PxVHqF9s5bKF0GWUXKlSuvjFwblyUTCLLC37PYhM_ooiQ6uWAOvwOUWaVuRBwWM6AwPwtzkpKFJTBD-hVpToiP_mxK_Sos2cIaOSVMFSyVeDBMYqTXP2u8xWMZc79IX3c1OepzSkzONnq2c4CPRAN8o8Ecxf7GoJ8w53ny70-7qbph40vjudKF2bSpkJdO4eIydn-qEUwxivGYVtaClbiXXFureRqAj_tPL8gf2MQpgOcRL-T2PiaZvYYRHg4QxE0UrUrmZfCc1io_PPdU7aNMXoJJ8rTO9CGfVb7v7YgzXN_xVApwkv4TH2_mdy-xt3d4ek9-B2j1RsosBG3DgYcXfNGLcABSUv2fr2aZY1MxzzYuFl3gcgTorjDXZwN-dTpV3VXDgMuIeeAuMMLh7eKJAevAsNufi_ACtiXUhbJLOiqtXmEMyJEGGcfKr1fC_7W1pGtm8K_RH6tRt_Diqj88u2wLMxMbPZT-8xVBYYOq3q84C3hkC4bJ9U8Q-_IF079ZnJT3SQtVoStRGU9AhqLEYeI5gCxWf2Bh-HR4cR-kpmlf8kbKvailORC3Po0t_PzzcYFARwEHM2Niv6SGAQXnaKhMhJNyuYzfsv66r9dcnlZPxqS4zD8fcYwg7dUoYbg4N9g49rcMDh-kb-j7q1PFZchKfK1_2dgdswoCK0xa7-RL9_pkyYEj2RYttiBfhaMPpKOrWuIrI39yq1YzkT87-8ATRsBRlmKURacmNnZ_Xt7EH-WJUNAZRGD0cpcTufz0EiUqDDxnLzpZjhIx9bjTpdCnDbNKnUJ2BilHxLj6H8RUJiaL2VMVXTN6e01bBixW7_aPgP1-hLKipnEY-8GgGAZqkeBsy6J6EIrRM8oalbU_Lj-ElMJtbHBeMHb1H5GxuSLUF6n-BaXoK_7CN6FKb2t0Hn710H4VAfTx18qW9HxWv7ruoCEU3rDDXnmGSAlRj_qNMFfA4LsvShnNpemXDxR33fvucVYvSp-k_nG_T710na3QleNc2iCjQpt0aLANS0lGBz0c_DSVGboQA1q4sTUR6dpgshfEZ38lZ6pfECZ5LrgmxIFsdOraKv_q0aiSIxri1Uv9cxXRbvo6ZWkiYQZA4j2TJMmvWuf0Ag4uyIKc3go7sGm0Xr-7haXuYhHuslkOWHGR2An85SZ9n6PpOxjQBYlKeeNIgNUvuxdVF3-sKCT6XzO4xeZMeXOBubsQdFtye0GciSfoZC7sAMKD3HlyOUSeUjaiVdlVN2C7lbqH2g.dP9ATQ3AHktF1I2J8-4bvw","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA"}}</msg>
<status status="PASS" starttime="20220725 10:02:13.446" endtime="20220725 10:02:13.446"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.447" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:02:13.446" endtime="20220725 10:02:13.447"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:13.447" endtime="20220725 10:02:13.448"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:13.275" endtime="20220725 10:02:13.448"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:13.448" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:02:13.448" endtime="20220725 10:02:13.448"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:02:13.474" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:02:13.448" endtime="20220725 10:02:13.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.474" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA']</msg>
<status status="PASS" starttime="20220725 10:02:13.474" endtime="20220725 10:02:13.474"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.475" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:02:13.475" endtime="20220725 10:02:13.475"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:09.128" endtime="20220725 10:02:13.475"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:09.128" endtime="20220725 10:02:13.476"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:13.478" endtime="20220725 10:02:13.478"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.479" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA'}</msg>
<status status="PASS" starttime="20220725 10:02:13.479" endtime="20220725 10:02:13.479"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.480" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:13.480" endtime="20220725 10:02:13.480"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.482" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:13.481" endtime="20220725 10:02:13.482"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:13.480" endtime="20220725 10:02:13.482"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:13.482" endtime="20220725 10:02:13.482"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:13.483" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:13.489" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:13.653" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:13.483" endtime="20220725 10:02:13.653"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:13.654" endtime="20220725 10:02:13.654"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:13.482" endtime="20220725 10:02:13.654"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:13.657" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:13.657" level="INFO">${TextFileContent} = IlpWlbPWGRQNL/FoTNdMi4e1PhWSY5oz8eJZTD8Tp3pH+QwJ65LgkqDei5hIplal2MkYbAZsBYRh8c6wr4AQy52NTkmWM1mJShV7iEiM27RjVpzFOLKOaZQy7zIbgjtG+jzO9DaD0QG8hGHHwR6wzWB/Onf3zk3uROBm+U0xxaaVV6JNs5sEB2GLoK8mD6ra4SDRwZ91...</msg>
<status status="PASS" starttime="20220725 10:02:13.656" endtime="20220725 10:02:13.657"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:13.658" level="INFO">${RESULT_ENCRYPT_DATA} = IlpWlbPWGRQNL/FoTNdMi4e1PhWSY5oz8eJZTD8Tp3pH+QwJ65LgkqDei5hIplal2MkYbAZsBYRh8c6wr4AQy52NTkmWM1mJShV7iEiM27RjVpzFOLKOaZQy7zIbgjtG+jzO9DaD0QG8hGHHwR6wzWB/Onf3zk3uROBm+U0xxaaVV6JNs5sEB2GLoK8mD6ra4SDRwZ91...</msg>
<status status="PASS" starttime="20220725 10:02:13.658" endtime="20220725 10:02:13.658"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:13.655" endtime="20220725 10:02:13.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:13.659" level="INFO">&amp;{body} = { data=IlpWlbPWGRQNL/FoTNdMi4e1PhWSY5oz8eJZTD8Tp3pH+QwJ65LgkqDei5hIplal2MkYbAZsBYRh8c6wr4AQy52NTkmWM1mJShV7iEiM27RjVpzFOLKOaZQy7zIbgjtG+jzO9DaD0QG8hGHHwR6wzWB/Onf3zk3uROBm+U0xxaaVV6JNs5sEB2GLoK8mD6ra4...</msg>
<status status="PASS" starttime="20220725 10:02:13.659" endtime="20220725 10:02:13.659"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:15.962" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "IlpWlbPWGRQNL/FoTNdMi4e1PhWSY5oz8eJZTD8Tp3pH+QwJ65LgkqDei5hIplal2MkYbAZsBYRh8c6wr4AQy52NTkmWM1mJShV7iEiM27RjVpzFOLKOaZQy7zIbgjtG+jzO9DaD0QG8hGHHwR6wzWB/Onf3zk3uROBm+U0xxaaVV6JNs5sEB2GLoK8mD6ra4SDRwZ91+asq5G8PsoclkTypNOMidRu8yZm1gwNnofvtLEmuWeYcdA3SxRbgTd7VYESyZN/h/3FKqWLeY6IwsKNfcNhcMU2w2MF968YE8SMGSN96qMz1m+IqJFXVNNb93IJlyX1M"}' 
 </msg>
<msg timestamp="20220725 10:02:15.963" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:15 GMT', 'x-amzn-RequestId': '77944b15-4182-433d-8248-03fb131e5d59', 'x-amz-apigw-id': 'VzYkiGh9yQ0FXfw=', 'X-Amzn-Trace-Id': 'Root=1-62de07b6-015e08964a54b3203aa588f8', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 a2b911ba341aa7e1e7d2f292be789000.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'vovXn74HW9mx0kYma7UKMzGWLdRF7ZxQ4ZodY3Urp5f0evPW5ooiZA=='} 
 body={"data":"57RamGWKagT1CiuE2fR+uUkxfGitpBR1PCgp7GdFwDOSsz9FTl2Tgo3kuReiA/qDTIrZLOm8GxN1n2cK8a2iqORhiD+AaNF+/PQWdMqlZszAoLByCTrBIAhmHrWvBlRcCMfLVBuIahkf6HE0tI5NG5KOXqOr83X+UiGe+SmixgctRlIHsA0pwno6knrKRcI/+ZxiBTov2dUFSCA3Ffu1fXnHVq5XG5/wl0t8C8RrBD7u8O368LAQ1SOviBL5+UUqec2TsUf9Sl+0kw97bxnQiRQQYhA6/GUNnQmyF/cKdy+w4eLZyxKjKsMHtxh+LzAocDT/uP+pPD+Cb4alSK6jm+CKlMaj2iD70EAU1lDHljV+bjoNHkx8Z2rz5bzPEfeJNC+wH/wX"} 
 </msg>
<msg timestamp="20220725 10:02:15.963" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:15.963" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:13.660" endtime="20220725 10:02:15.963"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:15.964" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 57RamGWKagT1CiuE2fR+uUkxfGitpBR1PCgp7GdFwDOSsz9FTl2Tgo3kuReiA/qDTIrZLOm8GxN1n2cK8a2iqORhiD+AaNF+/PQWdMqlZszAoLByCTrBIAhmHrWvBlRcCMfLVBuIahkf6HE0tI5NG5KOXqOr83X+UiGe+SmixgctRlIHsA0pwno6knrKRcI/+ZxiBTov...</msg>
<status status="PASS" starttime="20220725 10:02:15.963" endtime="20220725 10:02:15.964"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:15.965" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 57RamGWKagT1CiuE2fR+uUkxfGitpBR1PCgp7GdFwDOSsz9FTl2Tgo3kuReiA/qDTIrZLOm8GxN1n2cK8a2iqORhiD+AaNF+/PQWdMqlZszAoLByCTrBIAhmHrWvBlRcCMfLVBuIahkf6HE0tI5NG5KOXqOr83X+UiGe+SmixgctRlIHsA0pwno6knrKRcI/+ZxiBTov2dUFSCA3Ffu1fXnHVq5XG5/wl0t8C8RrBD7u8O368LAQ1SOviBL5+UUqec2TsUf9Sl+0kw97bxnQiRQQYhA6/GUNnQmyF/cKdy+w4eLZyxKjKsMHtxh+LzAocDT/uP+pPD+Cb4alSK6jm+CKlMaj2iD70EAU1lDHljV+bjoNHkx8Z2rz5bzPEfeJNC+wH/wX</msg>
<msg timestamp="20220725 10:02:15.970" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:16.119" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:15.965" endtime="20220725 10:02:16.119"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:16.120" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:16.120" endtime="20220725 10:02:16.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.121" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500020"}}</msg>
<status status="PASS" starttime="20220725 10:02:16.120" endtime="20220725 10:02:16.121"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.122" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:02:16.121" endtime="20220725 10:02:16.122"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:16.122" endtime="20220725 10:02:16.122"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:15.964" endtime="20220725 10:02:16.122"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:16.123" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:02:16.123" endtime="20220725 10:02:16.123"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.147" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:16.123" endtime="20220725 10:02:16.148"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.149" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:16.148" endtime="20220725 10:02:16.149"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.170" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:16.149" endtime="20220725 10:02:16.170"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.170" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:16.170" endtime="20220725 10:02:16.171"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.191" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:16.171" endtime="20220725 10:02:16.192"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.193" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:16.192" endtime="20220725 10:02:16.193"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.217" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:16.193" endtime="20220725 10:02:16.217"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.218" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:16.218" endtime="20220725 10:02:16.218"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.240" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:02:16.218" endtime="20220725 10:02:16.240"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.241" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:02:16.241" endtime="20220725 10:02:16.241"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.262" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:16.241" endtime="20220725 10:02:16.262"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.263" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:16.263" endtime="20220725 10:02:16.263"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.286" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:16.263" endtime="20220725 10:02:16.286"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.287" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:16.286" endtime="20220725 10:02:16.287"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.308" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:02:16.287" endtime="20220725 10:02:16.308"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.309" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:02:16.309" endtime="20220725 10:02:16.309"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:16.332" level="INFO">${values_code} = ['EQ2022072500020']</msg>
<status status="PASS" starttime="20220725 10:02:16.310" endtime="20220725 10:02:16.332"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.333" level="INFO">${TRANS_ID} = EQ2022072500020</msg>
<status status="PASS" starttime="20220725 10:02:16.332" endtime="20220725 10:02:16.333"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:13.476" endtime="20220725 10:02:16.333"></status>
</kw>
<kw name="Disagree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:16.335" endtime="20220725 10:02:16.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.336" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA'}</msg>
<status status="PASS" starttime="20220725 10:02:16.335" endtime="20220725 10:02:16.336"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.336" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:16.336" endtime="20220725 10:02:16.337"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : false }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.338" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:16.337" endtime="20220725 10:02:16.338"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:16.337" endtime="20220725 10:02:16.338"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:16.339" endtime="20220725 10:02:16.340"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:16.342" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:16.347" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:16.502" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:16.340" endtime="20220725 10:02:16.502"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:16.503" endtime="20220725 10:02:16.504"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:16.339" endtime="20220725 10:02:16.504"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:16.506" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:16.507" level="INFO">${TextFileContent} = lUTWQyAuBVlJVsaKjch3IRx6XDojz1NJWBOppPKYOVGGBzsNnLISqL+y3B8ImUL7ac8+QsomzDsFPsENfvYFMSGNMe24DTPnNujGA3+f+7Gc+z3d</msg>
<status status="PASS" starttime="20220725 10:02:16.506" endtime="20220725 10:02:16.507"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:16.508" level="INFO">${RESULT_ENCRYPT_DATA} = lUTWQyAuBVlJVsaKjch3IRx6XDojz1NJWBOppPKYOVGGBzsNnLISqL+y3B8ImUL7ac8+QsomzDsFPsENfvYFMSGNMe24DTPnNujGA3+f+7Gc+z3d</msg>
<status status="PASS" starttime="20220725 10:02:16.507" endtime="20220725 10:02:16.508"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:16.505" endtime="20220725 10:02:16.508"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:02:16.509" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:16.509" level="INFO">To JSON using : content={"data": "lUTWQyAuBVlJVsaKjch3IRx6XDojz1NJWBOppPKYOVGGBzsNnLISqL+y3B8ImUL7ac8+QsomzDsFPsENfvYFMSGNMe24DTPnNujGA3+f+7Gc+z3d"} </msg>
<msg timestamp="20220725 10:02:16.509" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:02:16.509" level="INFO">${body} = {'data': 'lUTWQyAuBVlJVsaKjch3IRx6XDojz1NJWBOppPKYOVGGBzsNnLISqL+y3B8ImUL7ac8+QsomzDsFPsENfvYFMSGNMe24DTPnNujGA3+f+7Gc+z3d'}</msg>
<status status="PASS" starttime="20220725 10:02:16.509" endtime="20220725 10:02:16.510"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:18.776" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "lUTWQyAuBVlJVsaKjch3IRx6XDojz1NJWBOppPKYOVGGBzsNnLISqL+y3B8ImUL7ac8+QsomzDsFPsENfvYFMSGNMe24DTPnNujGA3+f+7Gc+z3d"}' 
 </msg>
<msg timestamp="20220725 10:02:18.776" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:18 GMT', 'x-amzn-RequestId': '2175f983-f02a-4964-ac0a-81fbb46d0500', 'x-amz-apigw-id': 'VzYlDEroSQ0FkCQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07b9-1fe8d98e18a9c9f027e5f0c0', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 4d3ba36f3ff7e0b1faca1055e53c9914.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': '1hZR5_Nzot41JVjPb4pJcNj1xXugV6vSphFLL6ckvwAnDQh_-MMGaA=='} 
 body={"data":"PeFZLjJXIdQZwx23yiQmcgPAGfcgbQv17sAuOgTrLwM2V5umFHVzkK7FtnkaCK26L0OLWPvyhZ6VrZlcTyxM/9yydPbXCaErGtlOTftyMnvewWqquGiu1AjFD4LT9/UT1wcLap8gRpal0VERhFBoLk/ryyTMgVfQsUAFB8QGgjohe63AZV6gu3NxSU47zRk52F4dwiMl5DDPDz03pAJTI0nQKKKgwZcGEL4pQzz7awFiql6HbreLWHGXIPW3lJ62H9bpx37OVnQtv1FhpoFc0xA="} 
 </msg>
<msg timestamp="20220725 10:02:18.776" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:18.776" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:16.510" endtime="20220725 10:02:18.776"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.777" level="INFO">${RESPONSE_ENCRYPT_TYPE} = PeFZLjJXIdQZwx23yiQmcgPAGfcgbQv17sAuOgTrLwM2V5umFHVzkK7FtnkaCK26L0OLWPvyhZ6VrZlcTyxM/9yydPbXCaErGtlOTftyMnvewWqquGiu1AjFD4LT9/UT1wcLap8gRpal0VERhFBoLk/ryyTMgVfQsUAFB8QGgjohe63AZV6gu3NxSU47zRk52F4dwiMl...</msg>
<status status="PASS" starttime="20220725 10:02:18.777" endtime="20220725 10:02:18.778"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:18.779" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text PeFZLjJXIdQZwx23yiQmcgPAGfcgbQv17sAuOgTrLwM2V5umFHVzkK7FtnkaCK26L0OLWPvyhZ6VrZlcTyxM/9yydPbXCaErGtlOTftyMnvewWqquGiu1AjFD4LT9/UT1wcLap8gRpal0VERhFBoLk/ryyTMgVfQsUAFB8QGgjohe63AZV6gu3NxSU47zRk52F4dwiMl5DDPDz03pAJTI0nQKKKgwZcGEL4pQzz7awFiql6HbreLWHGXIPW3lJ62H9bpx37OVnQtv1FhpoFc0xA=</msg>
<msg timestamp="20220725 10:02:18.783" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:18.940" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:18.778" endtime="20220725 10:02:18.940"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:18.942" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:18.941" endtime="20220725 10:02:18.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.942" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:18.942" endtime="20220725 10:02:18.942"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.944" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:18.943" endtime="20220725 10:02:18.944"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:18.944" endtime="20220725 10:02:18.944"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:18.778" endtime="20220725 10:02:18.945"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:18.945" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:02:18.945" endtime="20220725 10:02:18.946"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:18.971" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:18.946" endtime="20220725 10:02:18.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${values_code[0]}' == 'Success'</arg>
<arg>Set global variable</arg>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>Disagree</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>Disagree</arg>
</arguments>
<msg timestamp="20220725 10:02:18.973" level="INFO">${GETTERM_RESPONES_MESSAGE} = Disagree</msg>
<status status="PASS" starttime="20220725 10:02:18.972" endtime="20220725 10:02:18.973"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:18.971" endtime="20220725 10:02:18.973"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:16.334" endtime="20220725 10:02:18.973"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>QR_code_page.Validate_QR_Code_for_test_qrstamp_scene</arg>
</arguments>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:18.975" endtime="20220725 10:02:18.976"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.976" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA'}</msg>
<status status="PASS" starttime="20220725 10:02:18.976" endtime="20220725 10:02:18.976"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.977" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:18.977" endtime="20220725 10:02:18.977"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:18.979" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:18.978" endtime="20220725 10:02:18.979"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:18.978" endtime="20220725 10:02:18.979"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:18.980" endtime="20220725 10:02:18.980"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:18.981" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:18.987" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:19.144" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:18.981" endtime="20220725 10:02:19.144"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:19.145" endtime="20220725 10:02:19.146"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:18.979" endtime="20220725 10:02:19.146"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:19.148" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:19.149" level="INFO">${TextFileContent} = DOfnDT/kAg4oxpb+ICwELAUUqMG17Lr08LS+jpvAvT+7Q8QvSMzIq/gkFS61H/jkOJpF/SfHGhK5OyH2QV/xiKN0jVGfdHDUar+vDc8XjbGAuBTJyN8K4VUivk3AoTrTsvM6FjP4A9Kje4eG+NDWhb3MGtpMe58OdnoSQIwsfszJMfYg28QJQv56vJdSSLzzaQdE0cbc...</msg>
<status status="PASS" starttime="20220725 10:02:19.148" endtime="20220725 10:02:19.149"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:19.150" level="INFO">${RESULT_ENCRYPT_DATA} = DOfnDT/kAg4oxpb+ICwELAUUqMG17Lr08LS+jpvAvT+7Q8QvSMzIq/gkFS61H/jkOJpF/SfHGhK5OyH2QV/xiKN0jVGfdHDUar+vDc8XjbGAuBTJyN8K4VUivk3AoTrTsvM6FjP4A9Kje4eG+NDWhb3MGtpMe58OdnoSQIwsfszJMfYg28QJQv56vJdSSLzzaQdE0cbc...</msg>
<status status="PASS" starttime="20220725 10:02:19.149" endtime="20220725 10:02:19.150"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:19.147" endtime="20220725 10:02:19.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:19.151" level="INFO">&amp;{body} = { data=DOfnDT/kAg4oxpb+ICwELAUUqMG17Lr08LS+jpvAvT+7Q8QvSMzIq/gkFS61H/jkOJpF/SfHGhK5OyH2QV/xiKN0jVGfdHDUar+vDc8XjbGAuBTJyN8K4VUivk3AoTrTsvM6FjP4A9Kje4eG+NDWhb3MGtpMe58OdnoSQIwsfszJMfYg28QJQv56vJdSSLzza...</msg>
<status status="PASS" starttime="20220725 10:02:19.151" endtime="20220725 10:02:19.151"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:21.983" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiYzU4MDUyNWUtZDIzMC00OTc5LThiZWEtNzBjNWNmYTEyMTQzIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxMzIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQzMiwiaWF0IjoxNjU4NzE4MTMyfQ.I5knd8jcOCiCwU0gV3QwmkUZdNYis3hxPyC788ajAOKzrb0iZUDA4y1lRc2XQk0LcHCsDUXIgxsX5ro-4HQmrtImpcYsHUDebWfsx4RY9c6lZ69R1bczST3M81eDDYdcsZHRg4-5Nzn83pUIDbL060zzqCRIwE0DAHv6y_ikIDzYO4TomcHzYCJI8nsoLwc6YXqbdH6klTo8AXASlUxYhQXCl6ex1g17fL3C9a-ZvZW9sj9YhsTXakiAwIasOuzmKW8BRPGRuIwjklXv3rJkillgAUhltBWcaFLF1zWdyAFyfqYguDR8VLQhFz3gCOnePmy5BhGhqZLuppF6wY4wqA', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "DOfnDT/kAg4oxpb+ICwELAUUqMG17Lr08LS+jpvAvT+7Q8QvSMzIq/gkFS61H/jkOJpF/SfHGhK5OyH2QV/xiKN0jVGfdHDUar+vDc8XjbGAuBTJyN8K4VUivk3AoTrTsvM6FjP4A9Kje4eG+NDWhb3MGtpMe58OdnoSQIwsfszJMfYg28QJQv56vJdSSLzzaQdE0cbc+GUOPa9i2D2eeXwYh2RAU0ZD882zq4x7Lo7/tfwff0EhMF+vU36+e1H8YU16Xb33APPoCwwgaNWmpTtCqYkoMMNeGpPjcHOQXNA2YZ8YQLlIotC5Zdo3lo7IAkgeHvN+"}' 
 </msg>
<msg timestamp="20220725 10:02:21.983" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '455', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:21 GMT', 'x-amzn-RequestId': 'bcc226dd-a7ab-4d46-871d-21c82b3d9cea', 'x-amz-apigw-id': 'VzYlgHK0SQ0Fpxg=', 'X-Amzn-Trace-Id': 'Root=1-62de07bc-5a61e5df6761717030729d83', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 fd1b0d50927ebc133be8d4d72e17af24.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'alSupCbQPy2mqkeK4Ml5lOK7nk8HQxeg70y82TJTBAqpOg7rR7-bxg=='} 
 body={"data":"CwX2pijJyVIreH+U4EaR6PgZo795Df0pfYIDHYHfBiAQRdBPeiBaeGj0HNcqi5jLzzUvX8jw50O9TbWpQVUVREOg31M+tTX3kHQUAyKMBSlwS7SzDZTDWu1vSE+A+LwG2avVTPG0GDxrWZbTTZlvdsHTONLEH58neu1Q7uUHDf2lhabTwgGxMJKok5KL6YgMnwFs3Cyex0jqapoFL7af8LQEeinHXR1TzcrRQTL782l2aDHtJURS6YjduO+qooyI/9DogC0PHZYNlIIYqf4Fky6HXtIX//+j9yHecWcwS2+i/aej3XooUTt/bi9lsTsrDrJBNj4FlYMcWPwS3aur8BhHUeGmtLkzhK+cfgvVxVBHzF2x4+n1oTlN7Dz8DjibuqNy6rxLVHsKBpBffCIcUba0fIPDOn7jZdDt2+jXXcywnP1j/RB9XUF0xA=="} 
 </msg>
<msg timestamp="20220725 10:02:21.983" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:21.983" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:19.152" endtime="20220725 10:02:21.983"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:21.984" level="INFO">${RESPONSE_ENCRYPT_TYPE} = CwX2pijJyVIreH+U4EaR6PgZo795Df0pfYIDHYHfBiAQRdBPeiBaeGj0HNcqi5jLzzUvX8jw50O9TbWpQVUVREOg31M+tTX3kHQUAyKMBSlwS7SzDZTDWu1vSE+A+LwG2avVTPG0GDxrWZbTTZlvdsHTONLEH58neu1Q7uUHDf2lhabTwgGxMJKok5KL6YgMnwFs3Cye...</msg>
<status status="PASS" starttime="20220725 10:02:21.983" endtime="20220725 10:02:21.984"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:21.985" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text CwX2pijJyVIreH+U4EaR6PgZo795Df0pfYIDHYHfBiAQRdBPeiBaeGj0HNcqi5jLzzUvX8jw50O9TbWpQVUVREOg31M+tTX3kHQUAyKMBSlwS7SzDZTDWu1vSE+A+LwG2avVTPG0GDxrWZbTTZlvdsHTONLEH58neu1Q7uUHDf2lhabTwgGxMJKok5KL6YgMnwFs3Cyex0jqapoFL7af8LQEeinHXR1TzcrRQTL782l2aDHtJURS6YjduO+qooyI/9DogC0PHZYNlIIYqf4Fky6HXtIX//+j9yHecWcwS2+i/aej3XooUTt/bi9lsTsrDrJBNj4FlYMcWPwS3aur8BhHUeGmtLkzhK+cfgvVxVBHzF2x4+n1oTlN7Dz8DjibuqNy6rxLVHsKBpBffCIcUba0fIPDOn7jZdDt2+jXXcywnP1j/RB9XUF0xA==</msg>
<msg timestamp="20220725 10:02:21.990" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:22.137" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:21.985" endtime="20220725 10:02:22.137"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:22.138" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:22.138" endtime="20220725 10:02:22.139"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.139" level="INFO">{"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:22.139" endtime="20220725 10:02:22.139"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.140" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":nu...</msg>
<status status="PASS" starttime="20220725 10:02:22.140" endtime="20220725 10:02:22.140"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.141" endtime="20220725 10:02:22.141"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:21.984" endtime="20220725 10:02:22.141"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:22.142" level="INFO">${convert_result} = {'status': {'code': '2024', 'message': 'QR Used', 'remark': '', 'user_code': 'E0016', 'user_message_en': 'The QR code is used.', 'user_message_th': 'คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว...</msg>
<status status="PASS" starttime="20220725 10:02:22.141" endtime="20220725 10:02:22.142"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.167" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:22.142" endtime="20220725 10:02:22.167"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.168" level="INFO">${RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:22.167" endtime="20220725 10:02:22.168"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.191" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:22.168" endtime="20220725 10:02:22.191"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.192" level="INFO">${QR_RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:22.191" endtime="20220725 10:02:22.192"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.215" level="INFO">${values_code} = ['QR Used']</msg>
<status status="PASS" starttime="20220725 10:02:22.192" endtime="20220725 10:02:22.215"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.216" level="INFO">${RESPONSE_MESSAGE} = QR Used</msg>
<status status="PASS" starttime="20220725 10:02:22.216" endtime="20220725 10:02:22.216"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.238" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:22.216" endtime="20220725 10:02:22.238"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.239" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:22.238" endtime="20220725 10:02:22.239"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.261" level="INFO">${values_code} = ['E0016']</msg>
<status status="PASS" starttime="20220725 10:02:22.239" endtime="20220725 10:02:22.261"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.261" level="INFO">${RESPONSE_USERCODE} = E0016</msg>
<status status="PASS" starttime="20220725 10:02:22.261" endtime="20220725 10:02:22.261"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.282" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:22.262" endtime="20220725 10:02:22.282"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.283" level="INFO">${RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:22.282" endtime="20220725 10:02:22.283"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.304" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:22.283" endtime="20220725 10:02:22.305"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.305" level="INFO">${QR_RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:22.305" endtime="20220725 10:02:22.305"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.327" level="INFO">${values_code} = ['คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว']</msg>
<status status="PASS" starttime="20220725 10:02:22.306" endtime="20220725 10:02:22.327"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.327" level="INFO">${RESPONSE_USER_TH} = คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว</msg>
<status status="PASS" starttime="20220725 10:02:22.327" endtime="20220725 10:02:22.327"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:22.383" level="INFO">${values_code} = []</msg>
<status status="PASS" starttime="20220725 10:02:22.328" endtime="20220725 10:02:22.384"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.384" level="FAIL">Resolving variable '${values_code[0]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20220725 10:02:22.384" endtime="20220725 10:02:22.384"></status>
</kw>
<status status="FAIL" starttime="20220725 10:02:18.974" endtime="20220725 10:02:22.385"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:18.973" endtime="20220725 10:02:22.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Stamp_Used</arg>
<arg>7</arg>
</arguments>
<kw name="Save_Result_Stamp_Used" library="save_data_excel_page">
<arguments>
<arg>7</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.387" endtime="20220725 10:02:22.466"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>value=${QR_VALUE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.466" endtime="20220725 10:02:22.467"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.467" endtime="20220725 10:02:22.468"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.468" endtime="20220725 10:02:22.469"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.469" endtime="20220725 10:02:22.469"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.469" endtime="20220725 10:02:22.470"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.470" endtime="20220725 10:02:22.471"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.471" endtime="20220725 10:02:22.471"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.471" endtime="20220725 10:02:22.472"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST STATUS}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.472" level="INFO">PASS</msg>
<status status="PASS" starttime="20220725 10:02:22.472" endtime="20220725 10:02:22.473"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.473" endtime="20220725 10:02:22.550"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:02:22.550" endtime="20220725 10:02:22.550"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:22.387" endtime="20220725 10:02:22.551"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:22.386" endtime="20220725 10:02:22.551"></status>
</kw>
<doc>ทดสอบระบบ Stamp QR Used กรณีลูกค้า Gen QR code มาทำ kyc และได้สถานะเป็น Unsuccess (ลูกค้าไม่กดรับ Term &amp; conditions) และ กลับมาทำ KYC อีกครั้ง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:02:08.430" endtime="20220725 10:02:22.551" critical="yes"></status>
</test>
<test id="s1-t3" name="QR_Stamp_used_6">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:22.555" endtime="20220725 10:02:22.555"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:22.556" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:22.555" endtime="20220725 10:02:22.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:22.557" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:02:22.556" endtime="20220725 10:02:22.557"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:23.001" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:02:23.001" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:02:22 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': '440f5859-cc4a-41f1-9424-dbc7cc49a1ac', 'x-amz-apigw-id': 'VzYl1HfxyQ0FYEQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07be-743d7e1450f54f4d2e6d4065'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431511615045716331160951","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:02:23.002" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:23.002" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:22.558" endtime="20220725 10:02:23.002"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.003" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:23.002" endtime="20220725 10:02:23.003"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.004" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:23.003" endtime="20220725 10:02:23.004"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.005" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:23.004" endtime="20220725 10:02:23.005"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.006" level="INFO">${QR_VALUE} = 2431511615045716331160951</msg>
<status status="PASS" starttime="20220725 10:02:23.005" endtime="20220725 10:02:23.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.006" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:02:23.006" endtime="20220725 10:02:23.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.007" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:02:23.007" endtime="20220725 10:02:23.007"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.008" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:02:23.007" endtime="20220725 10:02:23.008"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:22.554" endtime="20220725 10:02:23.008"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.010" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:23.010" endtime="20220725 10:02:23.010"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:23.009" endtime="20220725 10:02:23.011"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:23.011" endtime="20220725 10:02:23.012"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:23.013" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:23.018" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:23.170" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:23.012" endtime="20220725 10:02:23.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:23.172" endtime="20220725 10:02:23.172"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:23.011" endtime="20220725 10:02:23.172"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:23.174" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:23.175" level="INFO">${TextFileContent} = rBLwDVMnhyOskg2e3Eia0Jig8H2ht0AH6l5nrq5TrIe7mumqgEdgmiRCFFfKoxWgoqVXOdAAlrBoy1+RqTFbqJoK34veXewSt3M/HUfhh9U0bNtuUJ9cjvdTATFUVI1HG4/kfDw=</msg>
<status status="PASS" starttime="20220725 10:02:23.174" endtime="20220725 10:02:23.175"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.176" level="INFO">${RESULT_ENCRYPT_DATA} = rBLwDVMnhyOskg2e3Eia0Jig8H2ht0AH6l5nrq5TrIe7mumqgEdgmiRCFFfKoxWgoqVXOdAAlrBoy1+RqTFbqJoK34veXewSt3M/HUfhh9U0bNtuUJ9cjvdTATFUVI1HG4/kfDw=</msg>
<status status="PASS" starttime="20220725 10:02:23.175" endtime="20220725 10:02:23.177"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:23.173" endtime="20220725 10:02:23.177"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:23.178" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:23.177" endtime="20220725 10:02:23.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:23.180" level="INFO">&amp;{body} = { data=rBLwDVMnhyOskg2e3Eia0Jig8H2ht0AH6l5nrq5TrIe7mumqgEdgmiRCFFfKoxWgoqVXOdAAlrBoy1+RqTFbqJoK34veXewSt3M/HUfhh9U0bNtuUJ9cjvdTATFUVI1HG4/kfDw= }</msg>
<status status="PASS" starttime="20220725 10:02:23.179" endtime="20220725 10:02:23.180"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:26.898" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "rBLwDVMnhyOskg2e3Eia0Jig8H2ht0AH6l5nrq5TrIe7mumqgEdgmiRCFFfKoxWgoqVXOdAAlrBoy1+RqTFbqJoK34veXewSt3M/HUfhh9U0bNtuUJ9cjvdTATFUVI1HG4/kfDw="}' 
 </msg>
<msg timestamp="20220725 10:02:26.898" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:26 GMT', 'x-amzn-RequestId': '14af4386-a839-4f6a-a4e1-2ae407c8ad60', 'x-amz-apigw-id': 'VzYmFFReyQ0Fe5A=', 'X-Amzn-Trace-Id': 'Root=1-62de07c0-3f91fb343ce4d57c488f1527', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 cf0259eeefbfae3b17a4a34a45ed0e48.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': '8Rgc2gnmUCvkznrGK9yWvlcaz7qXB6ocYu8tSfd9WNJxwokqxSQ7yw=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:02:26.898" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:26.898" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:23.180" endtime="20220725 10:02:26.899"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:26.900" level="INFO">${RESPONSE_ENCRYPT_TYPE} = f3lafZwe1G1q7997ZoXamZ1jYm4mHtDst6vQeyhaCWeqki/ocYNDdwo5Gk54dnYERo+QLBe+2qfSe+BVuu4QMfqXgjR1KV0BM0LruNnHh3sEfQPD9qUlcluPdwUwXKNEPPygxKyTSw6lm5UaIuG0ScbVwMuh2IwAkK899zEMdkVW06wB2ap4DJFaoIACpGumt+Llj18E...</msg>
<status status="PASS" starttime="20220725 10:02:26.899" endtime="20220725 10:02:26.900"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:26.903" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:02:26.908" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:27.063" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:26.901" endtime="20220725 10:02:27.064"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:27.065" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:27.064" endtime="20220725 10:02:27.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.066" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6ImU4Njg3ZDQ1LWM3MjEtNDBmYS1iOGI2LTBlMDZmZWEyM2IzOSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg0NDYsImlhdCI6MTY1ODcxODE0NiwianRpIjoiZGU5MThiNzktZjg1MS00MzUwLTg5NzMtNDIwNDM2ZDhiN2ZhIiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.IKrHTQTf_vX-Uqg-epDqNMFSXMMJONsCuAh6iCCBVhx9CYCDuFsI93jsOO6pdivsP6p1tCRU3zKKL5EDpOErQ0I1dj4AWNWnLD8iY6zudsAwNyXuVr0RWzftPPlBS7G2RR3gC0iI5DKESuDmXnWAZ3N821XeNon1f_v3jFVq7Tcfpk1rzUr2-CnMc5YkVHkYHYCzBiZWdxCWTYU2EJzrzsViwSdyWQotuPoyRku11pWautRCZGTZ0Z86Q5WygORSGyS1QePJdOOp5i66GfWPEzNPac7REGnHee0j-OOWmWyys301nPXNSx5epR3VaqUeM7YXTHeV27lliSQTbuiLTg","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.g5Fkc5QR612bOLyl7LhsMG5pdMDp7pEZuvL8Hx9i2yqh-8FHtFRTAYHhEKGII9AtbqeoI31SDHkYUywxyXKXcqWmkqgSF25SbG7yaUAsRM66uEdgRHXDocpU5zfoyypTOTNbZA3w_AEyfJPyzQJdTCWNDdcpyMve35t3SZ0FP_fTL2ERK-cStAs8RbE14Xwm-L3SN0uOHlFwlcTwWZ4Jvhua9JrF0nXIwkwBTqmgxRh-HScdMpaXRwMP1XqBTJReQ7K31LCPd5ROxzNI-p_xaBwMkScr8vUgua7MbBzqc0hoJMN2cX9uKMG22jNJY3GWH4XoQoSlZ9fZQqs-5zMtwg.4fPNulDz99B8DR3U.wovQg5a7ecGTshqV5_efZF53zMMp93P2Xj_bwj1F4yiUzomaGZl-N3IcJseAKbY_fDEPrXGmk2Jzx8U7L_Mx7BbC2xShDhNndjEvTLjz7ZxDWkQV7Z-PiP5aYYKUuQgi6Vk560ugqeiWWSQi6Ed9ANJxFGFE6x2L_IsEr3_0UbBsJjawyGAPjOnvo0l-YdwF8ArGRUau4xOyfED0CjCQnEo5QJIfqPec0zxq7CJArqrOUyTgaZDJN9wADGhQ1cOUXDOl65K5z99cIOpcleaRdNckHPMnDhi9kMNS3yvUpCpKmCf95jKeMmxWbfSDPP6u5T2xjWamc1-TARd0yY3BuHse4jHEy2-prAQbtNrj0cxmFy3n3oQKvYJPeBsjF8dEgXrjUZMpor7Q6J9n_lummIp83SefJn8vPZKCe88YbGb2O1otRXxpssMdsG8hZSpSdfrE3Q8SgvFY2wbaOG-wTmQnb_Z8VdzG7exCTkA_hRTkpfZhA0oM35aa9fLFnrjZ_zEBsa3YvqBFzcjMOWCxJB07JrYoQR8YKIaxBO728S5eAjcnu-n6bkXgYStisM7fQFkhQFCE5dqnkxF3j-vgZ2nibUaUek5ZiakOsqjUvsnzZdgsffMiBUnJ3WP0GYtFBV3TLFZj36sAEbmFKlDV8xSO3PWdMVMkUym88r7dOqpxXr1rp7tlNTRdT2E-XyGO0WKpDQDtSscEpeUGYK4JWV2uV16hldbSH9iZp7ZQPDKbfvd-mUZZsQmxaAzw7I025ImWWusR64kMASH_Djb6VpB-cpuhwUDrM00q0ySTDaEnZ_9R5tcxkzR0c6Rz-gHS7mxH90LSGnxakPv24RkVKcNei_mIDUEypkDm9ODqQ5xEtTJnuk3KcxA2sKn_ANPB2DXYYIpMxrtyRsh3vFZGuk-AnM62Au18u2PqCUI6ijJ0Pe7eNWgK1pffMCC-12V3cUWArYG-kZ3Rv7DPdll3c1Wnv9GKCPnPhsgLcFNRcgLMfg4SLdo2xEUnvQQgGhDHqtoWGqqNJG9MkWBaES7E8zXRPzI1v-yV44kvsyn0a3VDLzsMf6mznkKulSjSZywMeO5pfgmgeyj7nXvBhw_4APEGbZHZwfbzsbsCGIdLZ6KRwum1HxZ76gWE-vSYhmkkXsIRhVYS04w9YvloqWD1d9tDK7OAoxD2yRrXN31OcsxihefSqv6ZrIzRUaNYyhOquwVpCRCvbkK0-1aJDhDaP9ony-gEHAuE__wgAhX68VeS4UeTsBvfcLSZfPtf-RetiwcZKlDhyIqVNqgZIIlWxZAUDeCg.35SRTsn6SXjOeTjA7gxCbw","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g"}}</msg>
<status status="PASS" starttime="20220725 10:02:27.065" endtime="20220725 10:02:27.066"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.067" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:02:27.066" endtime="20220725 10:02:27.067"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:27.067" endtime="20220725 10:02:27.068"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:26.900" endtime="20220725 10:02:27.068"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:27.069" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:02:27.068" endtime="20220725 10:02:27.069"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:02:27.095" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:02:27.069" endtime="20220725 10:02:27.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.096" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g']</msg>
<status status="PASS" starttime="20220725 10:02:27.096" endtime="20220725 10:02:27.096"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.097" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:02:27.096" endtime="20220725 10:02:27.097"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:23.009" endtime="20220725 10:02:27.097"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:23.008" endtime="20220725 10:02:27.097"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:27.098" endtime="20220725 10:02:27.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.099" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g'}</msg>
<status status="PASS" starttime="20220725 10:02:27.099" endtime="20220725 10:02:27.099"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.100" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:27.099" endtime="20220725 10:02:27.100"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.102" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:27.101" endtime="20220725 10:02:27.102"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:27.101" endtime="20220725 10:02:27.102"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:27.103" endtime="20220725 10:02:27.104"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:27.105" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:27.110" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:27.264" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:27.104" endtime="20220725 10:02:27.265"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:27.265" endtime="20220725 10:02:27.266"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:27.103" endtime="20220725 10:02:27.266"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:27.268" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:27.268" level="INFO">${TextFileContent} = S2xiMWazoyt68P5jAE5dePBSwbsfy8/uSkuXW5ZJFujnpSdtr9BXtcsL5IvUAN9rERms6KZ19hDyig9Qg5l+fT22coZIZ5cE6jXf09UVRIwD+XjVcuZGlZ98Cx/hVEsCn1zhIsuebhFgxJH1xwZ8ZzxWgLgjn3CwxReU/Un5L2hd7pYh9iEz1/M6cFzhEk83nDsYSa9W...</msg>
<status status="PASS" starttime="20220725 10:02:27.267" endtime="20220725 10:02:27.268"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:27.270" level="INFO">${RESULT_ENCRYPT_DATA} = S2xiMWazoyt68P5jAE5dePBSwbsfy8/uSkuXW5ZJFujnpSdtr9BXtcsL5IvUAN9rERms6KZ19hDyig9Qg5l+fT22coZIZ5cE6jXf09UVRIwD+XjVcuZGlZ98Cx/hVEsCn1zhIsuebhFgxJH1xwZ8ZzxWgLgjn3CwxReU/Un5L2hd7pYh9iEz1/M6cFzhEk83nDsYSa9W...</msg>
<status status="PASS" starttime="20220725 10:02:27.269" endtime="20220725 10:02:27.270"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:27.266" endtime="20220725 10:02:27.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:27.271" level="INFO">&amp;{body} = { data=S2xiMWazoyt68P5jAE5dePBSwbsfy8/uSkuXW5ZJFujnpSdtr9BXtcsL5IvUAN9rERms6KZ19hDyig9Qg5l+fT22coZIZ5cE6jXf09UVRIwD+XjVcuZGlZ98Cx/hVEsCn1zhIsuebhFgxJH1xwZ8ZzxWgLgjn3CwxReU/Un5L2hd7pYh9iEz1/M6cFzhEk83n...</msg>
<status status="PASS" starttime="20220725 10:02:27.270" endtime="20220725 10:02:27.271"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:29.949" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "S2xiMWazoyt68P5jAE5dePBSwbsfy8/uSkuXW5ZJFujnpSdtr9BXtcsL5IvUAN9rERms6KZ19hDyig9Qg5l+fT22coZIZ5cE6jXf09UVRIwD+XjVcuZGlZ98Cx/hVEsCn1zhIsuebhFgxJH1xwZ8ZzxWgLgjn3CwxReU/Un5L2hd7pYh9iEz1/M6cFzhEk83nDsYSa9WLX4AslNkgtVNwBe10pCUmov0TGmHipTth4/8D0q4DH0fuegRnxmxf5Sw/W/qrAm8XJzqqO7M/6tDsrCqQs6UJGiua8wi1XNz5FQ29J89+j8mkz1nr0j5yDu8aAVMx4fu"}' 
 </msg>
<msg timestamp="20220725 10:02:29.949" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:29 GMT', 'x-amzn-RequestId': '6205f2a6-5abc-4f44-ba7c-33f08e9df58e', 'x-amz-apigw-id': 'VzYmxEZjyQ0FsoA=', 'X-Amzn-Trace-Id': 'Root=1-62de07c4-237d807b6724adb02a603682', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 1a25e657bbdfbe4dde177fef28655f02.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'g_mNq69gWB0psGlnKx7SbgCu5RjCA9m-o2zuQzzA_aS8E4DNxEij8w=='} 
 body={"data":"3PjNw0sUQomOP1ROtb5JRLqN0Mc6zkbDAovX5JlZsLuuoxhRmc/a139ZlaU6UzhpJB0DfCu3D5Rv2cVes3TQYYa7av+fHrIle+6en1x4z6aHvw5HGe88Y/Y/88qmeyBI5G6o/fvSkJdPcxNvR8PDrt5jrIjwmUXg0JcsTAe44Z+BomvEakwmQRIdKQhS2E7VrWt6EavfVbrubz/9i0t/DRIqno8JqBceN+7juqy73o6aJmRXphpB2inDTtYf3m/rOHWcTG91N0mYU2sxCcuSzl0owpZclD09ospXW4nPwGRahR3xe7jKlBfTiZd2rlKIRMFntobCfasJG22fBzhq9JfT6ekQDr96lZGsABv7tpkHOmB02krrfe39WLawLrE4CYSqv3bi"} 
 </msg>
<msg timestamp="20220725 10:02:29.949" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:29.949" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:27.271" endtime="20220725 10:02:29.949"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:29.951" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 3PjNw0sUQomOP1ROtb5JRLqN0Mc6zkbDAovX5JlZsLuuoxhRmc/a139ZlaU6UzhpJB0DfCu3D5Rv2cVes3TQYYa7av+fHrIle+6en1x4z6aHvw5HGe88Y/Y/88qmeyBI5G6o/fvSkJdPcxNvR8PDrt5jrIjwmUXg0JcsTAe44Z+BomvEakwmQRIdKQhS2E7VrWt6Eavf...</msg>
<status status="PASS" starttime="20220725 10:02:29.950" endtime="20220725 10:02:29.951"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:29.953" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 3PjNw0sUQomOP1ROtb5JRLqN0Mc6zkbDAovX5JlZsLuuoxhRmc/a139ZlaU6UzhpJB0DfCu3D5Rv2cVes3TQYYa7av+fHrIle+6en1x4z6aHvw5HGe88Y/Y/88qmeyBI5G6o/fvSkJdPcxNvR8PDrt5jrIjwmUXg0JcsTAe44Z+BomvEakwmQRIdKQhS2E7VrWt6EavfVbrubz/9i0t/DRIqno8JqBceN+7juqy73o6aJmRXphpB2inDTtYf3m/rOHWcTG91N0mYU2sxCcuSzl0owpZclD09ospXW4nPwGRahR3xe7jKlBfTiZd2rlKIRMFntobCfasJG22fBzhq9JfT6ekQDr96lZGsABv7tpkHOmB02krrfe39WLawLrE4CYSqv3bi</msg>
<msg timestamp="20220725 10:02:29.959" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:30.132" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:29.952" endtime="20220725 10:02:30.133"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:30.135" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:30.134" endtime="20220725 10:02:30.135"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.136" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500021"}}</msg>
<status status="PASS" starttime="20220725 10:02:30.135" endtime="20220725 10:02:30.136"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.137" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:02:30.136" endtime="20220725 10:02:30.137"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:30.137" endtime="20220725 10:02:30.138"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:29.951" endtime="20220725 10:02:30.138"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:30.139" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:02:30.139" endtime="20220725 10:02:30.139"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.167" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:30.139" endtime="20220725 10:02:30.167"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.167" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:30.167" endtime="20220725 10:02:30.167"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.193" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:30.168" endtime="20220725 10:02:30.193"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.194" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:30.193" endtime="20220725 10:02:30.194"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.217" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:30.194" endtime="20220725 10:02:30.217"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.218" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:30.218" endtime="20220725 10:02:30.218"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.241" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:30.218" endtime="20220725 10:02:30.241"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.242" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:30.241" endtime="20220725 10:02:30.242"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.265" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:02:30.242" endtime="20220725 10:02:30.265"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.266" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:02:30.265" endtime="20220725 10:02:30.266"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.288" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:30.266" endtime="20220725 10:02:30.289"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.289" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:30.289" endtime="20220725 10:02:30.289"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.313" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:30.290" endtime="20220725 10:02:30.313"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.314" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:30.313" endtime="20220725 10:02:30.314"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.341" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:02:30.314" endtime="20220725 10:02:30.341"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.342" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:02:30.341" endtime="20220725 10:02:30.342"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:30.368" level="INFO">${values_code} = ['EQ2022072500021']</msg>
<status status="PASS" starttime="20220725 10:02:30.342" endtime="20220725 10:02:30.368"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.368" level="INFO">${TRANS_ID} = EQ2022072500021</msg>
<status status="PASS" starttime="20220725 10:02:30.368" endtime="20220725 10:02:30.368"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:27.097" endtime="20220725 10:02:30.368"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:30.369" endtime="20220725 10:02:30.370"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.370" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g'}</msg>
<status status="PASS" starttime="20220725 10:02:30.370" endtime="20220725 10:02:30.370"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.371" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:30.370" endtime="20220725 10:02:30.371"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.373" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:30.372" endtime="20220725 10:02:30.373"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:30.372" endtime="20220725 10:02:30.373"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:30.374" endtime="20220725 10:02:30.374"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:30.376" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:30.382" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:30.555" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:30.375" endtime="20220725 10:02:30.555"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:30.556" endtime="20220725 10:02:30.556"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:30.373" endtime="20220725 10:02:30.557"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:30.560" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:30.560" level="INFO">${TextFileContent} = cjk5a87aDFI//FwFxT+s7XXaxvYtIIxG2az8EIYskjU9geN08wcJu1KM0kyMXYNIRc2y9rGx0YlYIQY9AFQKXo5ZnYt5I8ZpqkCDEyu9/CLKLEc=</msg>
<status status="PASS" starttime="20220725 10:02:30.559" endtime="20220725 10:02:30.560"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:30.561" level="INFO">${RESULT_ENCRYPT_DATA} = cjk5a87aDFI//FwFxT+s7XXaxvYtIIxG2az8EIYskjU9geN08wcJu1KM0kyMXYNIRc2y9rGx0YlYIQY9AFQKXo5ZnYt5I8ZpqkCDEyu9/CLKLEc=</msg>
<status status="PASS" starttime="20220725 10:02:30.561" endtime="20220725 10:02:30.561"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:30.557" endtime="20220725 10:02:30.562"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:30.564" level="INFO">&amp;{body} = { data=cjk5a87aDFI//FwFxT+s7XXaxvYtIIxG2az8EIYskjU9geN08wcJu1KM0kyMXYNIRc2y9rGx0YlYIQY9AFQKXo5ZnYt5I8ZpqkCDEyu9/CLKLEc= }</msg>
<status status="PASS" starttime="20220725 10:02:30.562" endtime="20220725 10:02:30.564"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:32.638" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "cjk5a87aDFI//FwFxT+s7XXaxvYtIIxG2az8EIYskjU9geN08wcJu1KM0kyMXYNIRc2y9rGx0YlYIQY9AFQKXo5ZnYt5I8ZpqkCDEyu9/CLKLEc="}' 
 </msg>
<msg timestamp="20220725 10:02:32.638" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:32 GMT', 'x-amzn-RequestId': '2c28b757-5dae-48af-92c6-a83f4e55c899', 'x-amz-apigw-id': 'VzYnPHsNSQ0FY7g=', 'X-Amzn-Trace-Id': 'Root=1-62de07c7-221e4bd0117bbe733a8d468c', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 49830f6fdfb2c3519e81248d6d19f450.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'aMIxAI9Il4OdlxqIsMrRtYPNnMm8IJWAtNZoPwnsd9_5rji0QKbZQw=='} 
 body={"data":"yu+mhe+PXkUldY1i0D2iwp3HloevvcWq2fSedxezCherMCa99LpP1w50JP7fLt9E2cB7ZfHSF/qvS6SaXCBssXYRw7a18H6dlC6G9pYjVdagYT7eBBQWalDTUW8fDToOYSc9WwNTQMxujPV5W9NcI0cqHgXwZoHOkCdKapuP2TCpH600qbGOdVM4F96N/jux7W/Rgb73XtwmZjGfbad8hDjO6kVZJOeUMUo6jj9M+Tr5XEA0dT7rgXMX7W7w2N9YWdqqGrdcKC8vK97cNnprdtw="} 
 </msg>
<msg timestamp="20220725 10:02:32.638" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:32.639" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:30.564" endtime="20220725 10:02:32.639"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.640" level="INFO">${RESPONSE_ENCRYPT_TYPE} = yu+mhe+PXkUldY1i0D2iwp3HloevvcWq2fSedxezCherMCa99LpP1w50JP7fLt9E2cB7ZfHSF/qvS6SaXCBssXYRw7a18H6dlC6G9pYjVdagYT7eBBQWalDTUW8fDToOYSc9WwNTQMxujPV5W9NcI0cqHgXwZoHOkCdKapuP2TCpH600qbGOdVM4F96N/jux7W/Rgb73...</msg>
<status status="PASS" starttime="20220725 10:02:32.639" endtime="20220725 10:02:32.640"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:32.642" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text yu+mhe+PXkUldY1i0D2iwp3HloevvcWq2fSedxezCherMCa99LpP1w50JP7fLt9E2cB7ZfHSF/qvS6SaXCBssXYRw7a18H6dlC6G9pYjVdagYT7eBBQWalDTUW8fDToOYSc9WwNTQMxujPV5W9NcI0cqHgXwZoHOkCdKapuP2TCpH600qbGOdVM4F96N/jux7W/Rgb73XtwmZjGfbad8hDjO6kVZJOeUMUo6jj9M+Tr5XEA0dT7rgXMX7W7w2N9YWdqqGrdcKC8vK97cNnprdtw=</msg>
<msg timestamp="20220725 10:02:32.647" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:32.811" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:32.641" endtime="20220725 10:02:32.811"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:32.812" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:32.812" endtime="20220725 10:02:32.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.813" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:32.813" endtime="20220725 10:02:32.813"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.814" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:32.813" endtime="20220725 10:02:32.814"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:32.814" endtime="20220725 10:02:32.815"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:32.640" endtime="20220725 10:02:32.815"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:32.816" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:02:32.815" endtime="20220725 10:02:32.816"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:32.842" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:32.816" endtime="20220725 10:02:32.842"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.844" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:32.843" endtime="20220725 10:02:32.844"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:30.369" endtime="20220725 10:02:32.844"></status>
</kw>
<kw name="Validate_customer_Fails" library="validate_customer_API_page">
<arguments>
<arg>6</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:32.846" endtime="20220725 10:02:32.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.847" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g'}</msg>
<status status="PASS" starttime="20220725 10:02:32.846" endtime="20220725 10:02:32.847"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:32.847" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:32.847" endtime="20220725 10:02:32.848"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:32.849" endtime="20220725 10:02:33.162"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:02:33.162" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:02:33.162" endtime="20220725 10:02:33.162"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:02:33.163" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:02:33.163" endtime="20220725 10:02:33.163"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:02:33.164" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:02:33.163" endtime="20220725 10:02:33.164"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:02:33.164" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:02:33.164" endtime="20220725 10:02:33.164"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:02:33.165" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:02:33.164" endtime="20220725 10:02:33.165"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:02:33.165" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:02:33.165" endtime="20220725 10:02:33.165"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:02:33.166" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:02:33.165" endtime="20220725 10:02:33.166"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:02:33.167" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:02:33.166" endtime="20220725 10:02:33.167"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.168" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:02:33.167" endtime="20220725 10:02:33.168"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.168" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:02:33.168" endtime="20220725 10:02:33.168"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.169" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:02:33.168" endtime="20220725 10:02:33.169"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.169" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:02:33.169" endtime="20220725 10:02:33.169"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.170" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:02:33.169" endtime="20220725 10:02:33.170"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.170" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:02:33.170" endtime="20220725 10:02:33.170"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.171" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:02:33.171" endtime="20220725 10:02:33.171"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.172" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:02:33.171" endtime="20220725 10:02:33.172"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:02:33.172" endtime="20220725 10:02:33.172"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:32.848" endtime="20220725 10:02:33.172"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"1100600292855", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.174" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:33.173" endtime="20220725 10:02:33.174"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:33.172" endtime="20220725 10:02:33.175"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:33.175" endtime="20220725 10:02:33.176"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:33.176" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:33.182" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:33.364" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:33.176" endtime="20220725 10:02:33.364"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:33.365" endtime="20220725 10:02:33.365"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:33.175" endtime="20220725 10:02:33.366"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:33.368" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:33.368" level="INFO">${TextFileContent} = sTKsEMFLYBQdoHEE0AoiXw52YDmox5m7FuQxDEItVo3OYo9EzYv4jisxGDXvQPkMrqVhu7mfZwunGOT1dGxO54TjhiE3DR7OKcDKRjwWOa+AGJIuFapSJZFZjfnJF7JuvN+ZxEO/hgz3KUUSztR4XMEpxCBe5WWKn6DZETZiaNnQRT7hjUdIeLh/kX+ZWhnHZZcScOhx...</msg>
<status status="PASS" starttime="20220725 10:02:33.367" endtime="20220725 10:02:33.368"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:33.369" level="INFO">${RESULT_ENCRYPT_DATA} = sTKsEMFLYBQdoHEE0AoiXw52YDmox5m7FuQxDEItVo3OYo9EzYv4jisxGDXvQPkMrqVhu7mfZwunGOT1dGxO54TjhiE3DR7OKcDKRjwWOa+AGJIuFapSJZFZjfnJF7JuvN+ZxEO/hgz3KUUSztR4XMEpxCBe5WWKn6DZETZiaNnQRT7hjUdIeLh/kX+ZWhnHZZcScOhx...</msg>
<status status="PASS" starttime="20220725 10:02:33.369" endtime="20220725 10:02:33.369"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:33.366" endtime="20220725 10:02:33.370"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:02:33.370" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:33.371" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:02:33.372" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:02:33.373" level="INFO">${body} = {'data': 'sTKsEMFLYBQdoHEE0AoiXw52YDmox5m7FuQxDEItVo3OYo9EzYv4jisxGDXvQPkMrqVhu7mfZwunGOT1dGxO54TjhiE3DR7OKcDKRjwWOa+AGJIuFapSJZFZjfnJF7JuvN+ZxEO/hgz3KUUSztR4XMEpxCBe5WWKn6DZETZiaNnQRT7hjUdIeLh/kX+ZWh...</msg>
<status status="PASS" starttime="20220725 10:02:33.370" endtime="20220725 10:02:33.373"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:36.919" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:02:36.920" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '467', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:36 GMT', 'x-amzn-RequestId': '34e1e5a3-b5d4-45ba-9cb8-72ff0095bb08', 'x-amz-apigw-id': 'VzYn2FAUSQ0FsHA=', 'X-Amzn-Trace-Id': 'Root=1-62de07cb-3028ada80e75bb26038849e9', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 a1882a601559755135741e91a9f86c28.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': '7r5Dx-zgooWu3aN-jgw_-mP6v2xJf_GLRRiCMsmzyznIUUjfOJ4q9w=='} 
 body={"data":"2d1r87sWvkyuXFfPOl4V+JdhPL4skLKH0VZZ14wES0g+m/2foJIF8wsWxlvKFNPOn7ngj72HTwlsF98WWcZuIjSSzNI/PVpROkwjlqjeRSlGP6wkz/yMxCj+eZTEr6AGKh41V/AGobwT6eWD9J5eu8FUXIZKzhw8kWeFWXj8vA3iZEZkP9R5drrRoK7PQX6DuRF1MxIWYGM1P9tnAucXvSphn7NiN34sL0P5S25VV0+G/mBgeCy2oT5G2UcjOkjScBpb9TZGkjr0SooqE8TEubMNGLR21WmRl/3TyHGPjQ+v/UABRoZuCxSF9SJhDLWnXhSOQ/z2DtEpNmJgDafM2IiIGC0ZqBqpSUDiXB3Zkn1OtXykyifc1y8A1TEBAOV4fm2/B26TRut2/0XA+eaPvQ7x8LhSJFSZft8Ko+m0hxU91sDje+6ogF6yQtEiRyAiwVhegQ=="} 
 </msg>
<msg timestamp="20220725 10:02:36.920" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:36.920" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:33.373" endtime="20220725 10:02:36.920"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:32.845" endtime="20220725 10:02:36.920"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>QR_code_page.Validate_QR_Code_for_test_qrstamp_scene</arg>
</arguments>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:36.922" endtime="20220725 10:02:36.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:36.923" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g'}</msg>
<status status="PASS" starttime="20220725 10:02:36.922" endtime="20220725 10:02:36.923"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:36.924" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:36.923" endtime="20220725 10:02:36.924"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:36.926" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:36.925" endtime="20220725 10:02:36.926"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:36.924" endtime="20220725 10:02:36.926"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:36.926" endtime="20220725 10:02:36.927"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:36.928" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:36.932" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:37.093" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:36.927" endtime="20220725 10:02:37.094"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:37.094" endtime="20220725 10:02:37.095"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:36.926" endtime="20220725 10:02:37.095"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:37.096" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:37.097" level="INFO">${TextFileContent} = JRQaHa17FDwUqJT4t/Pn/kzZELDwYCIN0DUFlnQCKnTXDIi4B9HVujgpWMM7+OR7YWDdeEWzwU7keQNOF+XZU+KdarngjmZMXxpnGWT33HsE8hDVzy1S4GQS/cvnGTRwik7zwP3L6TkyyZ98WQwHS/RR9LJ5btoMp7gWggvYEhTf5BPuFa5fIOCIj2QC5Mc04S4EwSM/...</msg>
<status status="PASS" starttime="20220725 10:02:37.096" endtime="20220725 10:02:37.097"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:37.098" level="INFO">${RESULT_ENCRYPT_DATA} = JRQaHa17FDwUqJT4t/Pn/kzZELDwYCIN0DUFlnQCKnTXDIi4B9HVujgpWMM7+OR7YWDdeEWzwU7keQNOF+XZU+KdarngjmZMXxpnGWT33HsE8hDVzy1S4GQS/cvnGTRwik7zwP3L6TkyyZ98WQwHS/RR9LJ5btoMp7gWggvYEhTf5BPuFa5fIOCIj2QC5Mc04S4EwSM/...</msg>
<status status="PASS" starttime="20220725 10:02:37.097" endtime="20220725 10:02:37.098"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:37.095" endtime="20220725 10:02:37.098"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:37.100" level="INFO">&amp;{body} = { data=JRQaHa17FDwUqJT4t/Pn/kzZELDwYCIN0DUFlnQCKnTXDIi4B9HVujgpWMM7+OR7YWDdeEWzwU7keQNOF+XZU+KdarngjmZMXxpnGWT33HsE8hDVzy1S4GQS/cvnGTRwik7zwP3L6TkyyZ98WQwHS/RR9LJ5btoMp7gWggvYEhTf5BPuFa5fIOCIj2QC5Mc04...</msg>
<status status="PASS" starttime="20220725 10:02:37.099" endtime="20220725 10:02:37.100"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:39.139" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiZTg2ODdkNDUtYzcyMS00MGZhLWI4YjYtMGUwNmZlYTIzYjM5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNDYsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ0NiwiaWF0IjoxNjU4NzE4MTQ2fQ.YWWRrtUuViCqxroe4MH3edTrWjxlHgi1BrmxK-3iGRn_vHBxrFthofRpkwleJpNuvNk9Vcfxcqxe970Cb8QlCt7jr9jxSFKEvnKT9XQ1ZMDGVmNku89T4wqn73aULv5YYpwvKdcU5NbVkDvdT7c6SWMZISey_p80ZD0eRqe10sVBGsGWlYoy9pxN5LQcGSLMigF7yMkT_Cws9hjoGM8mYJ84cLSvr7VtGgpU9op8tDfZk_geRHjlmpc3ygJJCzsCXKCbbKRYcgzwHS6qrLi5xYY9YP9PA2D5e6-dvqp5M1ac9L0arSHIrOJUoUh2EYqTmVqV2PCsiorjqWpWA6iX0g', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "JRQaHa17FDwUqJT4t/Pn/kzZELDwYCIN0DUFlnQCKnTXDIi4B9HVujgpWMM7+OR7YWDdeEWzwU7keQNOF+XZU+KdarngjmZMXxpnGWT33HsE8hDVzy1S4GQS/cvnGTRwik7zwP3L6TkyyZ98WQwHS/RR9LJ5btoMp7gWggvYEhTf5BPuFa5fIOCIj2QC5Mc04S4EwSM/B0ly9DYylCdLrJcCGZ+9KKYY1MNWnvuh41LBI1vLWAFz+nZUW/CakOAYTia++n0o8p4UYCpjuk+xNQlyrSLxrPx8jxPCnqobQ7lyUnXE+Om+e6Nl2BM/Qlw4oZqm64ax"}' 
 </msg>
<msg timestamp="20220725 10:02:39.139" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '455', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:38 GMT', 'x-amzn-RequestId': 'f8d42fd6-dd73-4a28-86c0-3275d7caae8a', 'x-amz-apigw-id': 'VzYoRFO8SQ0FjKQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07ce-2a56ec256c23bbfe0c7e0973', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 f5a11ff9652a64f1fcf7e2671d944f46.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': 'ueEbcRobqSaM20e3PxnAgEtjxySpgzUKsLDWPjIvcxL6V1VEHV4PzQ=='} 
 body={"data":"ObNvs2On5t6BiCdp5rFFTmCzs/3gkiz6SIbMumtBFNa8K5i2sH7/sU7LTUTktZ5+IklBHiu0V6ixrht7eQ3XdZZCiFf3PG8avbfdDp6cayQLNY6RxExIVwZjgjkdr3wXqOUP6doNHT/2d0LwDEW6ZIxTotPuyCqWullmfUt093p0oixPS5gmAXn0NYI0o1EwQ6fe8C69hvcVITI2wIIVNaxBY1iqYm+Dk+P9ldkuOqCT/hlK4240AFiw52Bb0RwX3S92tOqfE3gfnWY00Dduzz8F/WlJYkeh15EyO/taE4qFP3U47YlEjK1kWDJgepG9S1oIda+M1q1qilJuwE5BbhYY5PjYD3kaSuPwE8HdxJ4C9AIPb9nHFXLID6s2uMu4wpo2qPXFXbNMaY1HfOn1+zFG/s+y97WYAQHNPoI9BWfBWOFkWgXgz48udg=="} 
 </msg>
<msg timestamp="20220725 10:02:39.139" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:39.139" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:37.100" endtime="20220725 10:02:39.139"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.140" level="INFO">${RESPONSE_ENCRYPT_TYPE} = ObNvs2On5t6BiCdp5rFFTmCzs/3gkiz6SIbMumtBFNa8K5i2sH7/sU7LTUTktZ5+IklBHiu0V6ixrht7eQ3XdZZCiFf3PG8avbfdDp6cayQLNY6RxExIVwZjgjkdr3wXqOUP6doNHT/2d0LwDEW6ZIxTotPuyCqWullmfUt093p0oixPS5gmAXn0NYI0o1EwQ6fe8C69...</msg>
<status status="PASS" starttime="20220725 10:02:39.140" endtime="20220725 10:02:39.141"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:39.142" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text ObNvs2On5t6BiCdp5rFFTmCzs/3gkiz6SIbMumtBFNa8K5i2sH7/sU7LTUTktZ5+IklBHiu0V6ixrht7eQ3XdZZCiFf3PG8avbfdDp6cayQLNY6RxExIVwZjgjkdr3wXqOUP6doNHT/2d0LwDEW6ZIxTotPuyCqWullmfUt093p0oixPS5gmAXn0NYI0o1EwQ6fe8C69hvcVITI2wIIVNaxBY1iqYm+Dk+P9ldkuOqCT/hlK4240AFiw52Bb0RwX3S92tOqfE3gfnWY00Dduzz8F/WlJYkeh15EyO/taE4qFP3U47YlEjK1kWDJgepG9S1oIda+M1q1qilJuwE5BbhYY5PjYD3kaSuPwE8HdxJ4C9AIPb9nHFXLID6s2uMu4wpo2qPXFXbNMaY1HfOn1+zFG/s+y97WYAQHNPoI9BWfBWOFkWgXgz48udg==</msg>
<msg timestamp="20220725 10:02:39.147" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:39.336" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:39.141" endtime="20220725 10:02:39.336"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:39.338" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:39.337" endtime="20220725 10:02:39.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.340" level="INFO">{"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:39.339" endtime="20220725 10:02:39.340"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.341" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":nu...</msg>
<status status="PASS" starttime="20220725 10:02:39.340" endtime="20220725 10:02:39.342"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.343" endtime="20220725 10:02:39.343"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:39.141" endtime="20220725 10:02:39.344"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:39.345" level="INFO">${convert_result} = {'status': {'code': '2024', 'message': 'QR Used', 'remark': '', 'user_code': 'E0016', 'user_message_en': 'The QR code is used.', 'user_message_th': 'คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว...</msg>
<status status="PASS" starttime="20220725 10:02:39.344" endtime="20220725 10:02:39.345"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.374" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:39.345" endtime="20220725 10:02:39.374"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.375" level="INFO">${RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:39.375" endtime="20220725 10:02:39.375"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.400" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:39.376" endtime="20220725 10:02:39.400"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.401" level="INFO">${QR_RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:39.401" endtime="20220725 10:02:39.401"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.424" level="INFO">${values_code} = ['QR Used']</msg>
<status status="PASS" starttime="20220725 10:02:39.402" endtime="20220725 10:02:39.425"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.425" level="INFO">${RESPONSE_MESSAGE} = QR Used</msg>
<status status="PASS" starttime="20220725 10:02:39.425" endtime="20220725 10:02:39.425"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.448" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:39.426" endtime="20220725 10:02:39.448"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.449" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:39.448" endtime="20220725 10:02:39.449"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.474" level="INFO">${values_code} = ['E0016']</msg>
<status status="PASS" starttime="20220725 10:02:39.449" endtime="20220725 10:02:39.474"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.475" level="INFO">${RESPONSE_USERCODE} = E0016</msg>
<status status="PASS" starttime="20220725 10:02:39.475" endtime="20220725 10:02:39.475"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.497" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:39.476" endtime="20220725 10:02:39.497"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.498" level="INFO">${RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:39.497" endtime="20220725 10:02:39.498"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.520" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:39.498" endtime="20220725 10:02:39.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.520" level="INFO">${QR_RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:39.520" endtime="20220725 10:02:39.521"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.545" level="INFO">${values_code} = ['คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว']</msg>
<status status="PASS" starttime="20220725 10:02:39.521" endtime="20220725 10:02:39.545"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.546" level="INFO">${RESPONSE_USER_TH} = คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว</msg>
<status status="PASS" starttime="20220725 10:02:39.545" endtime="20220725 10:02:39.546"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:39.607" level="INFO">${values_code} = []</msg>
<status status="PASS" starttime="20220725 10:02:39.546" endtime="20220725 10:02:39.607"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.608" level="FAIL">Resolving variable '${values_code[0]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20220725 10:02:39.607" endtime="20220725 10:02:39.608"></status>
</kw>
<status status="FAIL" starttime="20220725 10:02:36.921" endtime="20220725 10:02:39.608"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:36.921" endtime="20220725 10:02:39.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Stamp_Used</arg>
<arg>8</arg>
</arguments>
<kw name="Save_Result_Stamp_Used" library="save_data_excel_page">
<arguments>
<arg>8</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.610" endtime="20220725 10:02:39.689"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>value=${QR_VALUE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.689" endtime="20220725 10:02:39.690"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.690" endtime="20220725 10:02:39.691"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.691" endtime="20220725 10:02:39.692"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.692" endtime="20220725 10:02:39.693"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.693" endtime="20220725 10:02:39.694"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.694" endtime="20220725 10:02:39.695"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.695" endtime="20220725 10:02:39.695"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.696" endtime="20220725 10:02:39.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST STATUS}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.697" level="INFO">PASS</msg>
<status status="PASS" starttime="20220725 10:02:39.696" endtime="20220725 10:02:39.697"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.697" endtime="20220725 10:02:39.765"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:02:39.766" endtime="20220725 10:02:39.766"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:39.609" endtime="20220725 10:02:39.766"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:39.609" endtime="20220725 10:02:39.766"></status>
</kw>
<doc>ทดสอบระบบ Stamp QR Used กรณีลูกค้า Gen QR code มาทำ kyc และได้สถานะเป็น Unsuccess (Validate Customer Fail Dip chip ด้วยบัตรประชาชนผู้อื่น) และ กลับมาทำ KYC อีกครั้ง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:02:22.551" endtime="20220725 10:02:39.766" critical="yes"></status>
</test>
<test id="s1-t4" name="QR_Stamp_used_7">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:39.769" endtime="20220725 10:02:39.770"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:39.771" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:39.770" endtime="20220725 10:02:39.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:39.772" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:02:39.771" endtime="20220725 10:02:39.772"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:40.198" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:02:40.198" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:02:40 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': '87cf7cd8-e0d1-494b-8c92-e0c1bd7a74e2', 'x-amz-apigw-id': 'VzYohEDryQ0FYEA=', 'X-Amzn-Trace-Id': 'Root=1-62de07cf-7c286f8b42e0881c5cef7b91'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431517874957316570159437","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:02:40.198" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:40.198" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:39.772" endtime="20220725 10:02:40.198"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.200" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:40.199" endtime="20220725 10:02:40.200"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.200" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:40.200" endtime="20220725 10:02:40.201"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.202" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:40.201" endtime="20220725 10:02:40.202"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.202" level="INFO">${QR_VALUE} = 2431517874957316570159437</msg>
<status status="PASS" starttime="20220725 10:02:40.202" endtime="20220725 10:02:40.203"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.203" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:02:40.203" endtime="20220725 10:02:40.204"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.205" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:02:40.204" endtime="20220725 10:02:40.205"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.206" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:02:40.205" endtime="20220725 10:02:40.206"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:39.769" endtime="20220725 10:02:40.206"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.208" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:40.207" endtime="20220725 10:02:40.208"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:40.207" endtime="20220725 10:02:40.208"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:40.209" endtime="20220725 10:02:40.209"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:40.210" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:40.215" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:40.416" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:40.209" endtime="20220725 10:02:40.416"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:40.417" endtime="20220725 10:02:40.418"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:40.208" endtime="20220725 10:02:40.418"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:40.420" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:40.421" level="INFO">${TextFileContent} = 3aKwpjseSiYLEtZFz35+F3lavQp6q17tiidvkyPrFZMOAwXCfDFczVYBCJ3QxHpwYjJgj5N2fWWk9WMX8hpIs8jzDP5U10wICpFhL2C15B6drd4rAuNaZJSCce8onPFGwt2vUmw=</msg>
<status status="PASS" starttime="20220725 10:02:40.420" endtime="20220725 10:02:40.421"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.422" level="INFO">${RESULT_ENCRYPT_DATA} = 3aKwpjseSiYLEtZFz35+F3lavQp6q17tiidvkyPrFZMOAwXCfDFczVYBCJ3QxHpwYjJgj5N2fWWk9WMX8hpIs8jzDP5U10wICpFhL2C15B6drd4rAuNaZJSCce8onPFGwt2vUmw=</msg>
<status status="PASS" starttime="20220725 10:02:40.421" endtime="20220725 10:02:40.422"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:40.419" endtime="20220725 10:02:40.422"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:40.423" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:40.423" endtime="20220725 10:02:40.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:40.425" level="INFO">&amp;{body} = { data=3aKwpjseSiYLEtZFz35+F3lavQp6q17tiidvkyPrFZMOAwXCfDFczVYBCJ3QxHpwYjJgj5N2fWWk9WMX8hpIs8jzDP5U10wICpFhL2C15B6drd4rAuNaZJSCce8onPFGwt2vUmw= }</msg>
<status status="PASS" starttime="20220725 10:02:40.424" endtime="20220725 10:02:40.425"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:43.632" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "3aKwpjseSiYLEtZFz35+F3lavQp6q17tiidvkyPrFZMOAwXCfDFczVYBCJ3QxHpwYjJgj5N2fWWk9WMX8hpIs8jzDP5U10wICpFhL2C15B6drd4rAuNaZJSCce8onPFGwt2vUmw="}' 
 </msg>
<msg timestamp="20220725 10:02:43.632" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:43 GMT', 'x-amzn-RequestId': '40781654-296e-47d5-a115-378630ae1ec1', 'x-amz-apigw-id': 'VzYouGMzSQ0Faxw=', 'X-Amzn-Trace-Id': 'Root=1-62de07d1-681f71873578c586573336dd', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 862ec075039e1105ce2f16200feebc3a.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'EWR52-C4', 'X-Amz-Cf-Id': '_ZNOhcvguKjLOguZNiQtTbVheR7c35VF6QTHO4Z_TQZL0x4HxW_DLA=='} 
 body={"data":"siLMVFHm03Vcf6TQ7wGZjP9o7tjo7jSROhJHUIi0ZnSaFkJM5OtzcCOM/kZw0RXhGvbHb/1ODOgbnJvAUD8O5zwQLrmEdTpVIVMuurMvbdDwwfqyXrX1j+/0CbrBeyykfunpkHDsoWm9ODyK44HOUzqhz7qrpLQwqXd7cuyMbXl1wfKw7M+1HrdJWZbWo0ToiQS0D9VxhX+leI4yK2Jl1Z8FmfcQzlkZmkxftHMqifeB0HNbKRqhImYWYB+8WHEZ1Nc+5HZkghWj/xuE5/Rn1F+G3v0J33ggr9eaJPNe8SXL3g0k+FoHf47Sj86GoyJCu2eL9vvYuaSSrc3ffOTwZJhXe4ZPiWK+5nG5cLwVAXh1TaTGflohFekFsDLOsKTq5HOC807JNZnuIAzozJal85aGvr/q7yapyE4RT1bg1c19nNtVYv8uIz47SdPolb18buhcSBMcLQ1omSX/jvbAbRd/4Aldz336Dh/e3NgV0zHhpLFS/oszDR9KKAjfvj5TnibSh1zFH7Vu5dXTovQ0bBOll8TtXhuhNEYZgi9OGQfGPkfyBYm9YChqaosR5lgfZoOhHPPkJP56l4A3Gg23w6DCnlR9meF2qbbHGxCl4o8/ZW7k5zGxhtfPLPjqZonlHf/S0EGtBl9E8y2K9wyUNTr6pBvx3RwUxZLTWlFR8o0+cA46bfRGP+UyY4aBXIxhF6VFmxn7QMicC0r0gn7np001icCxrCmrfz/BciW1TnyDOBKC8rIIIXitNqiC0memykGRu35SklS+j7h8Z7CQ0uw6CvtxSz0o8BhoEayOI2fSXwFw1Tms97ZDqDX+7xtm9VjRn5c00ef3Ff6BWz9EZ6u8728efBE282UZsRPaoiMYp/AF6GeO7v2zQiPWo2M27v7nFR9h6rwYBmwedf9sCWe0jyxzT88In01qOn7GtR8S3fejqRJRq0ZbUji+ql38yrigNCYIGegyXP4FTihpEfSZmnSOx21VWOBAuPci6Z09NC4KI1Eu3ZQODL6n1/fIJxMNqnF82pykDiPGHFUDMhFfT7TjOwTyoPxxdOGFwbAlOV6lSAHgJ0kQ3ZDDpQXzwynrKd1pFcvejj1RdDITY0pO/sV6hxqAcjnFpPUiggQCNq87voZfxKMKU5ICRtJ78VSc02/s9Y9tYLAAWrrx1V101Q1DA3dLdK+qYrB0AP84d5XX8ghfZcUiJiHBA8JYauFKXavRBL6O0q0BKNfwG4zn0HtEckUx0ClrzMEPDRybHK6LvQ0M6DxA9g9tPHtGoxAKaG1FkTXUFmzE67GBtWUn1KK9FCGxPL9W4eTp7bkT/CfakBLk01uceHOQGSvo/FcGI/0Jin31UlT1eQLvSQ6XDXzicZI0WutsnKT+MB/ZVf4XmkAvW8Vfw/JTdtepg7aoGevDacm0lmH7zgDIbKzZR00NjSyiGKOxOMwvcDsfJ62JmLUFCBf2I6D/396kCHsBIgQFUMkdeVEh6FC5yxq8V0fmuRnMoMC8+2qxgOQ2SqvCvTFC5UuhR2rNKHyP0fSq+0984brSBuNhKgaW6M3OITKXhceHVKstmgzzr4JbG5v7IAkoUxdPdzuavQrI1/jzgKHR7sOLuLKRvsToQIc5y+YcVsApfcGjZZ1eYjz2DWi4EUE6XkqEVHYdwK0/kB9f5afga2ctrjUTA6aILbuWdjZehbnf60qqi10nDp7xHg6/RwofcuA+1eGJMtiHSVxwijt4vB3JGid7bYNYI9vkGnsbst0xRF+tAGQ2zQOMSg8LDPaUq26BAMhLpJkXrM4IYHCA5QkcSHd7kskvwr5gtBa4BsGdpJRD+opHD15NZnP3/9bmQgEuDecCenTTZm6h+C1rLd+MQUYzEViiCscK1LcTIES+sBlraE8froVOFiEp+Sm/DGfM/hdL8bsS/FhkvTa6KmS+wwhXeuHBQbikgViTc75sULASgmKIsiqX8Q8++SwRuhBnhT5YeFCzqjI6nsM8gEh3OG/BxVZ7gjZk1AKNpEtkL/5y22md0pz9MspYC1XWPKCgUJKTIad56dg0HQW+fE2Fv9CDmTuEv9tFC7MJkxZRmzey03cTyMKICUox3DzdhxrJZEfLY8qIaWf9KFqaVx5xXJMDr+SDv0m3/6d/pZ/C503LFfPpPGMpm0QovQmJxcWQq6Zk1HZIN8IgE1dgg1x+pwdFURJu5ixtz7SfPcHWkOnguzL4DYGqywPeVAOwz1Ju173AnJPIiF/ktenN4IHF7eY4hZ2NUFP5BUWsdq4RPJy0i7S82kLlU+qfa3sbXWnXzTq1wcVfvHXx2oNVbFmUZ+Hrbp1lXOeassXoPWZAHesc3eZNs2kIa37QSSMuqnZKiX0dUpq/rQOevx/vvKnLg74zUzM0LMwsye4S5VIsTATVH6CrXBni2WORebJzGLYbyV8rwOUMoYMK/X/3t0gWH1q9gDg+rrAmFHBtavGIPTgX8nQXRiX3ERuHrKJRJF7Lwd7yfWDoQC++wt1naK+bJtl6M9duxypeWGqpHTF+k0y7JQoy/vv12BU9i02DsZJGWYlM3dhtq0nZBx554+DirN4lmCnn3CcX0aNVJflZbhfgUt+Z/5It87CPTe8PWEjHNlLbuKbxMlrz7KJm8p1p1mIywx/AkBHDrUkRmd5nYRnRlSuMloh8Nb1ikyBHLT9InaOKddtsMumk3xn7SCyMIIWIHIj7//ly8Houn6bfvtwGSm9lD0gi0cySBenDZ63NkXHWF8BZSnBzRLUkVTm+uYe7yfJ82LsHhf7zz+IURfzO3HJyLvybgRLXTSDXxU1iehnfN0aGXrT+eUDJYLHZKduXAFH6lNUG/XcoGWSKoQgzvYnNFfYTVhFPw6YoJsFijFWAe+pV4sQX9xolRz2QDD9QM19WkFYRoIxTMeNBeInxOG4voHGpfU24plJ9hwBrQFrWE+JPqunKAcbgOfumEjZKgFP6oXyP/q1XLTEGSXGbrQVjMoFooc7YIUF7bFFaTVfr/+H/zywzwYj1i8RC4eyHgVSBjgGCLKtOweOZh+o2O9ZbSeb+wcT0cN/aJLTuC136zK0fhukUN48De2DJYu6gDKVZX9/kqJg/69VWFi5a5Vx6drsIsULQ+nI7MkPZesuYgWHFnYValO1dXuGza6dMwpZ7dCVQiwRRD7lU3qYZqPcaOn11YcedJJD6fmeAEVm4ZKlpg3eVItmgjhsAUaAV9rMcdmPrcw6BSvSgZSKWkEeFULtoR0DkT1lw8dCtHChlCDPHdJ0wyWsrN+aLkNHIIGaFzkuHY2kdyAzzQHcVKDtyr7KpgIk9MStAaJSb+xRyC/mtq2YxAU4az882ZOGqFAbKWPoP4dDDQ8e4S4KpG20Be6Ca6S/TYauP+/uwmxLEldYWYYFOdieTq9JzPohRPRQpTH0scbKH+sspvMI7+kPREx7SXmxUe8gPeUspfjh/rzPan8AoLj+P259ykklPUB4FVnqqeEefz4j5paL10hyEivlp0xPv29fY/KXW0OTOOe2cBYhHaTeZ+J4IimzDWWQt/V9lTFzLuIquPP+7/ha1xtOz7gGAYYmwW0eN7QGRbBDKj1KE/fgx3XEUeYYgF0pp+wwE4zi4JFWcuQEn5kRwSSTZF9U7vM4WTaw6A5/Esqa0be9Rv90+DU6Z4L0cbjqtjAmwFTZRuasC5a6hE1//N8VWOdnT+ol6hrrrb1vs2u0iov6HXgGbRB14NSjWRYT4Aj+0JqP+PV0jG5U3NGlqFOujg3fJZjlfabGkt5iBcJyBtx0q8ZHACN+YzJHk8cFOp3T6sX8RuughqgcQ+eSRrIm5NbqstMDovnD1hICD32+vRIjqfKsW+Mb2T5ONQV/EDlXsxNib/YKFf1oJnHM68FJ3vPX705BK/2DaNDjT1sHc4Invz1CF6l5dNuGtXkZPstiqnB4VccdG+fAb+hJKSZxcmh9wgegGL0tMfmXVFskDzf3MxChqzaY5APESFvaAwJws//27+Elaa9KZqhelKyXdJiYlZpAP4oDszhHe3BBzlkxGYs5QnhA8fiHAPpFweqP4tVzG35C6lyTVsqgbVU3IjUeFtgHd4OT3xsHQ9a+Sf9vx0WQcqfeeX84zkj61l+Rhkyus5hHRX1UQOs9a36SbW58/i1bV4rdnhgAKABE13Ri8cVWYoXL0rBj0PHOWPiQHPSSC/PG13Bo3DWj0HLWyXyq4RFDSBsawo1kC6XICIdF6yYlvdeAsgiQNaJAjarslUeMA0mgeDdT2zmz3lQcK0soH/y7xaGc6MydqXNqlZxU+FpQ080dlskSDmOteJZ3wOINdM1bBtuj3PHMpA53wvsKNaDQtd0hpWrYyWWAj71SLU6aIzqbYdWiJT3C+wnXMzia0fHpkm4MT0CvMGNdPXQtw2BgscPwqV9xhgNlDar1uV+od6BLJvwCXj7oFYeAYlrFQ+rtVOskbnStp/KowI9g1kpDIUGrD3t7b1PyabX/HZ6hwptNvggfZDa2pd6OFQVtDFbSaP3zsTcdDFmmTpqJ+F2IPkXdWOVTZml+C+KkUPg/dxqwbREK5BErRBDrsjbz9HY519mHLH2vX5VGNaDVuNvfz477r6lm2ZX1ezCzBW0rzlrDId7vw0GSQ4Df5VRxDM6G7D50W/gp7T8aoqJ/cY29WD4D6KkQgsCFhaktzxWkAdBJuEI3YIEGB61kSH1+LlxsZEtHvUgD8EQvK+3T60uRUE/+PoS3eSoGtj+ad03ZHn5UuMV0MOWKECuv554nKewON+G+eP7ROkiilP9kPgOvxzT25OkZVMc6h2LR3dnLyWgYYKgThnk73zFqQI8nhJi78IEOHLmNV1dnTCiaN85nYcy1FE/W8AJy0uZXO/DoD/nmw20GBIoeQkpq0LHE5GCQ9ebFsFFBJp/s+eitFtWeuZlD8JwxMA7Qrwr3IzBGhvyKvXYoB/AH4HIXYLnT8j1D4is8Hu5rpEYPUHLuRRAbpTxX3iCRaECRSccaN3sSZHcDeNkV7ItP4b7y8wU5yK9MTabXkjcBeVFJ1kVN/B6pIH00KdPAoTOFF+hYtAf3n2C/i18d5g596mYTB2TpiVEdbmHTDNsVyqZCUrObEmbf8O8BzGxbdcNonMvx8WUBPaKqIFO4vxL7+TTfxF/IQXSxPmeUfVjZ8iOINGrEkd1EFB++JcBdeuG0S28W4t5+jqnrjBb5nfqOIyU84KPHNtLIoadpB5I4t/xfDB8W42Jh6EdcmzXukqj3Em5XlpYfhrDQRqd5K7cyV24b0BZPO81dlAdU24G0PLLKvdA=="} 
 </msg>
<msg timestamp="20220725 10:02:43.632" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:43.632" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:40.425" endtime="20220725 10:02:43.632"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.634" level="INFO">${RESPONSE_ENCRYPT_TYPE} = siLMVFHm03Vcf6TQ7wGZjP9o7tjo7jSROhJHUIi0ZnSaFkJM5OtzcCOM/kZw0RXhGvbHb/1ODOgbnJvAUD8O5zwQLrmEdTpVIVMuurMvbdDwwfqyXrX1j+/0CbrBeyykfunpkHDsoWm9ODyK44HOUzqhz7qrpLQwqXd7cuyMbXl1wfKw7M+1HrdJWZbWo0ToiQS0D9Vx...</msg>
<status status="PASS" starttime="20220725 10:02:43.633" endtime="20220725 10:02:43.634"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:43.637" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:02:43.643" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:43.802" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:43.635" endtime="20220725 10:02:43.803"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:43.804" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:43.804" endtime="20220725 10:02:43.804"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.805" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjZlNDEzNTQ4LTY5OTItNGQ1Yy04ZTQyLWQ3NTAzMjUwNjA1YSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg0NjMsImlhdCI6MTY1ODcxODE2MywianRpIjoiNmQ1Y2Y4ZTQtOTA4NS00MWI2LTllZjEtMzNiZDE5ZDgyNWNiIiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.gMQcgie4C3Z9cSNMyDVMFl7n5K6OU0qwlxB4Q40AV89serp2HEMomPdQY-LCIXjzY-2mtOSYqbB5imLe-s7nFdjG-Tom2TafEGeUv2RZswAffyOY_K9ODsPJzGSdHn9HtNnS5vFbk36xBEkN8OCd-60Gdt5e2Cq2TXPTbAV-L0PShyVv_RSe_uuNX9YznfKJSSn7LF3dYYleXmtdvvzKXvrecb61cF6qJA4mouW26Ef5l7zsUiDj3ocjMAV5oDIeHs7DztQdfsN9R6l2TevoJc-T2camMO1mCpN9j6__6ArluXFGIHip-Bq5C2ngtX_YYlkFj4WzsR9BeGYKLCL_GQ","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.l8pamiPuieCCS1rFCu7XnoRQA8BHumwN7DHT7Dbnyhq9VcP3NRCxeo_UmSpAE_Cw06o0kawECKW89WwrRag7r3Vlidmt3_zpLmnordwlTFyiRs80TnS9FnZF4LQlOovFkldYseVC75EY-aYEx42fyJCTPP3B1aOgyi-xfFrR9_hIR9sBNeGbAo6dTTtZAMnnpv8FY3cGHbe2ZwaZif7Di2BfIT2UVBOWdaRI7rvfv6S5L4dGaZMFeO-yRW_6QFQrZ8wMC0b63qe2LgYXRFhQWcu5z5IMRztqqb10S0EyVfoUBIYerAQIYzxF0fl9iAoNK3JhcEI0u6C2tsyEWfOo-Q.cpPoFF6AK68rPrkV.uiwDBAlEpT3S_huv_mNgoiZnLiz-8BzQf-BlZt0lLWLMDmYm8A656hKjMG_uBrSnzzzH-eMCZhItF_DTPQiUyACsn-vmFtAGINdMJ_5ucJ2_1-p095026tumX9OrbAGdK-_24XIIyyLL78zYDp79ZS2PaNuDpzqs2qi_08wA8MWO7hU9HWGNWaef6wuKTE-Qd0WKjcHOBvdpKKWDCG9coTjI2eht1kmfqy7BdPPJsEP4U0qOImTJKitagoMdTrVtOoduUeCYsbJ-hvLDRZ3W64vjYsancfJr-ieDvTiyVexc2UAfkJ-6vrhD221UqyRUsCvs9EyKe16JM1eZCDrGhbbqRPDoLXRekx6eY7ZsmsPwsjOz5kRXlyOPa9fI-R_q9vlm8r_G9RqEQwVaGQzARk8gN_xEZ0IGppwsE-RHG0iXePLmZaPWE8cKgIT0UhaMkrqiNM4fnyKabo7DvhxjTR7fZk26n6mN85tOQlKme0nnnUvBtpchCVOJ2rqkSm597kmbHtoxxq7-Wy62kru5bfaG8ln9GDhLAAq5yCtu_TxNupOQ1uP22--pW_C5xkzB6IVljHQp7Cg4pauqgBhIP2PKBxqeCY3q0Fn3eX88To4pMUnxxLHyzwEXuWL_Vmn9pYkk-intCfUuXPioAGQpH3rLU_NJNu10Aj6VkmRmzCkVGZqqQ7FS2LteqxjiPnOi4jkKUHWL81_BimRbk20IzVfW-XCjLzT3D3JC55wsVhWTIuSzkfIVUzfg9W8V7_Vi4qDMEMfx4usjTJ9MDpUxqPiyJytoyzI_X2ZHdD1ZxpjnToaHN1NKMgHyPdzGipY6yTe8pZgR30b7FHIXwwjuThFunCzu0Yr8VS0XmpgNsDpBzACURRk4S8W7aJRgq8RCR5P942LUsi3rjGUS1V_sBt4wKAOVkStdr7X5Ba8fQuHEZfGcvqCYsS25UaKhHqhyZO9IiVKF00sVRUL1bbtcE5nqQ_-ZikkYvB1-jx4hA_AyguXvMq3n98jS5RI7qWGSCx6nr6ERno6lcZbFSdLXb-S4GZiUzGJioKYnxOHCfXcTnFgjWOsMH2yIXTfKW5pHju7X-vf-AGk7VUGo79ZpYRojGfW1UVAxk7iMIYpj8bLAeW_Mub7uhZ0LdIGER61xjodBiDIelP7xZyqB40y8OswYU9YL1UVsEw2mUG0usyFSK8gxfAyOBQhWC9udSHI17jWncY57S7FKDFRpIn4CPxVg99Wv_vRzM0QTd-9Fk25ufoscY843SgQLLrsqcCwiRjrYQx294uGsX5kFuvMhs7R5CZS5.gt2ZOLZVyGzXHSJhT7riyw","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ"}}</msg>
<status status="PASS" starttime="20220725 10:02:43.805" endtime="20220725 10:02:43.806"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.807" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:02:43.806" endtime="20220725 10:02:43.807"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:43.807" endtime="20220725 10:02:43.808"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:43.634" endtime="20220725 10:02:43.808"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:43.809" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:02:43.808" endtime="20220725 10:02:43.809"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:02:43.837" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:02:43.809" endtime="20220725 10:02:43.837"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.837" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ']</msg>
<status status="PASS" starttime="20220725 10:02:43.837" endtime="20220725 10:02:43.838"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.838" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:02:43.838" endtime="20220725 10:02:43.839"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:40.207" endtime="20220725 10:02:43.839"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:40.206" endtime="20220725 10:02:43.839"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:43.840" endtime="20220725 10:02:43.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.841" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:43.841" endtime="20220725 10:02:43.841"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.842" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:43.842" endtime="20220725 10:02:43.842"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:43.844" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:43.843" endtime="20220725 10:02:43.844"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:43.843" endtime="20220725 10:02:43.844"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:43.845" endtime="20220725 10:02:43.845"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:43.846" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:43.851" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:44.002" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:43.845" endtime="20220725 10:02:44.002"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:44.003" endtime="20220725 10:02:44.003"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:43.844" endtime="20220725 10:02:44.004"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:44.005" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:44.006" level="INFO">${TextFileContent} = L2swRLwc+L996bBwjpqQCw7Oc+U/ENKJ1o+F1Kv4BGwiKvV4+L74irEJ9RDE95lG1tv7ePDYDplsKTvrhrsyXCYVFcK09zntD2q0rrE/5grAdW4ZWRvntVtPVl7DnDbqZTNImitON4gvcmYni7itoXydPaWv2FwTNfowsQfsjAKlWFd5leL+CJ05on37rZIWYbAQYvJ0...</msg>
<status status="PASS" starttime="20220725 10:02:44.005" endtime="20220725 10:02:44.006"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:44.007" level="INFO">${RESULT_ENCRYPT_DATA} = L2swRLwc+L996bBwjpqQCw7Oc+U/ENKJ1o+F1Kv4BGwiKvV4+L74irEJ9RDE95lG1tv7ePDYDplsKTvrhrsyXCYVFcK09zntD2q0rrE/5grAdW4ZWRvntVtPVl7DnDbqZTNImitON4gvcmYni7itoXydPaWv2FwTNfowsQfsjAKlWFd5leL+CJ05on37rZIWYbAQYvJ0...</msg>
<status status="PASS" starttime="20220725 10:02:44.006" endtime="20220725 10:02:44.007"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:44.004" endtime="20220725 10:02:44.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:44.008" level="INFO">&amp;{body} = { data=L2swRLwc+L996bBwjpqQCw7Oc+U/ENKJ1o+F1Kv4BGwiKvV4+L74irEJ9RDE95lG1tv7ePDYDplsKTvrhrsyXCYVFcK09zntD2q0rrE/5grAdW4ZWRvntVtPVl7DnDbqZTNImitON4gvcmYni7itoXydPaWv2FwTNfowsQfsjAKlWFd5leL+CJ05on37rZIWY...</msg>
<status status="PASS" starttime="20220725 10:02:44.007" endtime="20220725 10:02:44.008"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:44.879" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "L2swRLwc+L996bBwjpqQCw7Oc+U/ENKJ1o+F1Kv4BGwiKvV4+L74irEJ9RDE95lG1tv7ePDYDplsKTvrhrsyXCYVFcK09zntD2q0rrE/5grAdW4ZWRvntVtPVl7DnDbqZTNImitON4gvcmYni7itoXydPaWv2FwTNfowsQfsjAKlWFd5leL+CJ05on37rZIWYbAQYvJ0y65Y9CUji0aJk0oHEQygbyNhOXM9bYKdY9NlxDmj6SmVVscuTWWC8Bb7tYTNGIGpAiPS3ljhxERhdW+Z9A5+eSRmlSwrPq/R7NMHHgm/S1AYFJ+OeH6toRsfKZt1CFRi"}' 
 </msg>
<msg timestamp="20220725 10:02:44.880" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:44 GMT', 'x-amzn-RequestId': 'fb6a7d74-8e02-4d08-bfa7-f0c8a4ff18d6', 'x-amz-apigw-id': 'VzYpLH58yQ0FR9w=', 'X-Amzn-Trace-Id': 'Root=1-62de07d4-726cecdb110bf05a0ad150ce', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 7f21c90f051c9035262e26fd7e425ee8.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'jmWdKqJHMpsvwV7rad8ItzdMtHuzradYfdlG_056KH1TP2bgHy32tg=='} 
 body={"data":"SZtez9Z6cQfnITpLmnZIzcWZCfy7SGlaleqghj5GYEAZcdterx9fwh0Mqn5pkE2ssxvS5tm7Lz4CixlS0Z6kGkIhyOEigOWPkWb9e2SqoYyP5AkK5MoSGQKcYr8GZ8A/RbFeq/sFY0qAIVJE+nT18hhHUR0QGZL51NANBQ80o7IhH4IbyR2RyP1nX4yPMzgRIx4NQbQNHZIErbU1z0yrQ5Vry0xfXdOJ2j/7XkaraHMs7CJHRPXRJ4eeJshz/ymYqLpkMLDwj9cRdRP2rz+b9AIVUwcfeNrcbgkGhhM0FA0ggeKxziP21OtXfqmB0/V12HP9gH885PtjI6tZ9wh92pNx3UYFhdFr8ZwIwhgpMx6RslPgX+5lHfWCaOye2Bz0IWnYzYDI"} 
 </msg>
<msg timestamp="20220725 10:02:44.880" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:44.880" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:44.008" endtime="20220725 10:02:44.880"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:44.881" level="INFO">${RESPONSE_ENCRYPT_TYPE} = SZtez9Z6cQfnITpLmnZIzcWZCfy7SGlaleqghj5GYEAZcdterx9fwh0Mqn5pkE2ssxvS5tm7Lz4CixlS0Z6kGkIhyOEigOWPkWb9e2SqoYyP5AkK5MoSGQKcYr8GZ8A/RbFeq/sFY0qAIVJE+nT18hhHUR0QGZL51NANBQ80o7IhH4IbyR2RyP1nX4yPMzgRIx4NQbQN...</msg>
<status status="PASS" starttime="20220725 10:02:44.880" endtime="20220725 10:02:44.881"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:44.883" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text SZtez9Z6cQfnITpLmnZIzcWZCfy7SGlaleqghj5GYEAZcdterx9fwh0Mqn5pkE2ssxvS5tm7Lz4CixlS0Z6kGkIhyOEigOWPkWb9e2SqoYyP5AkK5MoSGQKcYr8GZ8A/RbFeq/sFY0qAIVJE+nT18hhHUR0QGZL51NANBQ80o7IhH4IbyR2RyP1nX4yPMzgRIx4NQbQNHZIErbU1z0yrQ5Vry0xfXdOJ2j/7XkaraHMs7CJHRPXRJ4eeJshz/ymYqLpkMLDwj9cRdRP2rz+b9AIVUwcfeNrcbgkGhhM0FA0ggeKxziP21OtXfqmB0/V12HP9gH885PtjI6tZ9wh92pNx3UYFhdFr8ZwIwhgpMx6RslPgX+5lHfWCaOye2Bz0IWnYzYDI</msg>
<msg timestamp="20220725 10:02:44.889" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:45.035" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:44.882" endtime="20220725 10:02:45.035"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:45.037" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:45.036" endtime="20220725 10:02:45.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.037" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500022"}}</msg>
<status status="PASS" starttime="20220725 10:02:45.037" endtime="20220725 10:02:45.038"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.039" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:02:45.038" endtime="20220725 10:02:45.039"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:45.039" endtime="20220725 10:02:45.039"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:44.881" endtime="20220725 10:02:45.040"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:45.040" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:02:45.040" endtime="20220725 10:02:45.040"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.065" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:45.040" endtime="20220725 10:02:45.065"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.066" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:45.065" endtime="20220725 10:02:45.066"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.090" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:02:45.066" endtime="20220725 10:02:45.090"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.091" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:45.090" endtime="20220725 10:02:45.091"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.113" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:45.091" endtime="20220725 10:02:45.113"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.114" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:45.113" endtime="20220725 10:02:45.114"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.134" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:45.114" endtime="20220725 10:02:45.135"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.136" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:45.135" endtime="20220725 10:02:45.136"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.159" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:02:45.136" endtime="20220725 10:02:45.159"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.160" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:02:45.159" endtime="20220725 10:02:45.160"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.184" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:45.160" endtime="20220725 10:02:45.184"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.185" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:45.184" endtime="20220725 10:02:45.185"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.208" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:45.185" endtime="20220725 10:02:45.208"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.209" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:02:45.208" endtime="20220725 10:02:45.209"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.234" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:02:45.210" endtime="20220725 10:02:45.234"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.235" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:02:45.234" endtime="20220725 10:02:45.235"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:45.258" level="INFO">${values_code} = ['EQ2022072500022']</msg>
<status status="PASS" starttime="20220725 10:02:45.235" endtime="20220725 10:02:45.258"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.259" level="INFO">${TRANS_ID} = EQ2022072500022</msg>
<status status="PASS" starttime="20220725 10:02:45.259" endtime="20220725 10:02:45.259"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:43.840" endtime="20220725 10:02:45.260"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:45.261" endtime="20220725 10:02:45.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.262" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:45.261" endtime="20220725 10:02:45.262"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.262" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:45.262" endtime="20220725 10:02:45.262"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.264" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:45.263" endtime="20220725 10:02:45.264"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:45.263" endtime="20220725 10:02:45.264"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:45.265" endtime="20220725 10:02:45.266"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:45.267" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:45.272" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:45.435" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:45.266" endtime="20220725 10:02:45.435"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:45.436" endtime="20220725 10:02:45.437"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:45.265" endtime="20220725 10:02:45.437"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:45.439" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:45.439" level="INFO">${TextFileContent} = uQoeHlE+IwuYKdNmLuhoy3iyHhwx3Ajt5BvIUebJKy4QZYHxV/7sfdQoGb1FcaHNyrtJJIqDwAasf7i9oDycNZPIm/2WncFfkTIKeDBejTWv0Xw=</msg>
<status status="PASS" starttime="20220725 10:02:45.438" endtime="20220725 10:02:45.439"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:45.440" level="INFO">${RESULT_ENCRYPT_DATA} = uQoeHlE+IwuYKdNmLuhoy3iyHhwx3Ajt5BvIUebJKy4QZYHxV/7sfdQoGb1FcaHNyrtJJIqDwAasf7i9oDycNZPIm/2WncFfkTIKeDBejTWv0Xw=</msg>
<status status="PASS" starttime="20220725 10:02:45.440" endtime="20220725 10:02:45.440"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:45.437" endtime="20220725 10:02:45.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:45.442" level="INFO">&amp;{body} = { data=uQoeHlE+IwuYKdNmLuhoy3iyHhwx3Ajt5BvIUebJKy4QZYHxV/7sfdQoGb1FcaHNyrtJJIqDwAasf7i9oDycNZPIm/2WncFfkTIKeDBejTWv0Xw= }</msg>
<status status="PASS" starttime="20220725 10:02:45.441" endtime="20220725 10:02:45.442"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:46.081" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "uQoeHlE+IwuYKdNmLuhoy3iyHhwx3Ajt5BvIUebJKy4QZYHxV/7sfdQoGb1FcaHNyrtJJIqDwAasf7i9oDycNZPIm/2WncFfkTIKeDBejTWv0Xw="}' 
 </msg>
<msg timestamp="20220725 10:02:46.081" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:46 GMT', 'x-amzn-RequestId': '9e02a7be-2b34-4a87-a8e0-467cd2f8176c', 'x-amz-apigw-id': 'VzYpaH9FyQ0FYbw=', 'X-Amzn-Trace-Id': 'Root=1-62de07d5-1d11c4234f2020680db616fa', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 b5697b33d5b1898c8ec9864d3568219c.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'J1XDEqei0jtdo1sbOFlvXF9sO6oywqd8sY3XZEShGMmulNi_3fLWwg=='} 
 body={"data":"oI8l/9FSEzF2qb9lDMmnF/dqZNP2p+pvxNqyLNvhSE6T/XCBpjUSU+IuQVwWeaWkNC8uzNh2WbFgHA7zF8igJgmXzsY8+Bjzd7R3OaaiaTtUvL05d41e3q48/5vAmEcYuus20aTjaHL3bhE/qGUnFu3IVDpntCFRHMBQHkOqbUYdJYBON3N8QhMskMzwGQDEhWukjBaNkaGJw7hdcfy5ex1LEJJcKRhLyVFDy9Z5UPU8jo3tGC1gZLoYok6UPM3TLFirYoMqgqV6jcOjo+BTMHk="} 
 </msg>
<msg timestamp="20220725 10:02:46.081" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:46.081" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:45.443" endtime="20220725 10:02:46.081"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.082" level="INFO">${RESPONSE_ENCRYPT_TYPE} = oI8l/9FSEzF2qb9lDMmnF/dqZNP2p+pvxNqyLNvhSE6T/XCBpjUSU+IuQVwWeaWkNC8uzNh2WbFgHA7zF8igJgmXzsY8+Bjzd7R3OaaiaTtUvL05d41e3q48/5vAmEcYuus20aTjaHL3bhE/qGUnFu3IVDpntCFRHMBQHkOqbUYdJYBON3N8QhMskMzwGQDEhWukjBaN...</msg>
<status status="PASS" starttime="20220725 10:02:46.082" endtime="20220725 10:02:46.083"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:46.084" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text oI8l/9FSEzF2qb9lDMmnF/dqZNP2p+pvxNqyLNvhSE6T/XCBpjUSU+IuQVwWeaWkNC8uzNh2WbFgHA7zF8igJgmXzsY8+Bjzd7R3OaaiaTtUvL05d41e3q48/5vAmEcYuus20aTjaHL3bhE/qGUnFu3IVDpntCFRHMBQHkOqbUYdJYBON3N8QhMskMzwGQDEhWukjBaNkaGJw7hdcfy5ex1LEJJcKRhLyVFDy9Z5UPU8jo3tGC1gZLoYok6UPM3TLFirYoMqgqV6jcOjo+BTMHk=</msg>
<msg timestamp="20220725 10:02:46.091" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:46.244" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:46.084" endtime="20220725 10:02:46.244"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:46.246" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:46.245" endtime="20220725 10:02:46.246"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.246" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:46.246" endtime="20220725 10:02:46.247"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.247" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:46.247" endtime="20220725 10:02:46.247"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:46.248" endtime="20220725 10:02:46.248"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.083" endtime="20220725 10:02:46.248"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:46.249" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:02:46.249" endtime="20220725 10:02:46.249"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:46.272" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:46.249" endtime="20220725 10:02:46.272"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.273" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:46.272" endtime="20220725 10:02:46.273"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:45.260" endtime="20220725 10:02:46.273"></status>
</kw>
<kw name="Validate_customer_pass" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:46.274" endtime="20220725 10:02:46.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.275" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:46.275" endtime="20220725 10:02:46.275"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.276" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:46.275" endtime="20220725 10:02:46.276"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:46.277" endtime="20220725 10:02:46.605"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:02:46.606" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:02:46.605" endtime="20220725 10:02:46.606"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:02:46.607" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:02:46.606" endtime="20220725 10:02:46.607"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:02:46.608" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:02:46.607" endtime="20220725 10:02:46.608"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:02:46.609" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:02:46.608" endtime="20220725 10:02:46.609"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:02:46.609" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:02:46.609" endtime="20220725 10:02:46.609"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:02:46.610" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:02:46.609" endtime="20220725 10:02:46.610"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:02:46.610" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:02:46.610" endtime="20220725 10:02:46.610"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:02:46.611" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:02:46.611" endtime="20220725 10:02:46.611"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.612" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:02:46.611" endtime="20220725 10:02:46.612"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.612" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:02:46.612" endtime="20220725 10:02:46.612"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.613" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:02:46.612" endtime="20220725 10:02:46.613"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.614" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:02:46.613" endtime="20220725 10:02:46.614"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.615" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:02:46.614" endtime="20220725 10:02:46.615"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.615" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:02:46.615" endtime="20220725 10:02:46.615"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.616" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:02:46.616" endtime="20220725 10:02:46.616"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.616" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:02:46.616" endtime="20220725 10:02:46.617"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:02:46.617" endtime="20220725 10:02:46.617"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.277" endtime="20220725 10:02:46.617"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.619" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:46.618" endtime="20220725 10:02:46.619"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.617" endtime="20220725 10:02:46.620"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:46.620" endtime="20220725 10:02:46.621"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:46.622" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:46.628" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:46.814" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:46.621" endtime="20220725 10:02:46.814"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:46.815" endtime="20220725 10:02:46.816"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.620" endtime="20220725 10:02:46.816"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:46.818" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:46.818" level="INFO">${TextFileContent} = md6nBv52Mn3+nIC49XI4J80h4s+LxDAh0HJ7coLBjEUENg7Giy72hCJbPiOpz0AIW4dtwnTDCYbNRZfHANmO4xB11QARpvhx+MbTRh1tNczwAgg/+jCHzaNqBGCFB2G12vnAkjyrQKDvAljqRoQtLAGeMnqUTuyZ9xnGZU9jcuCR2Ou+9i/YNjvnMDf8DrUKM1GdRqhi...</msg>
<status status="PASS" starttime="20220725 10:02:46.817" endtime="20220725 10:02:46.818"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:46.820" level="INFO">${RESULT_ENCRYPT_DATA} = md6nBv52Mn3+nIC49XI4J80h4s+LxDAh0HJ7coLBjEUENg7Giy72hCJbPiOpz0AIW4dtwnTDCYbNRZfHANmO4xB11QARpvhx+MbTRh1tNczwAgg/+jCHzaNqBGCFB2G12vnAkjyrQKDvAljqRoQtLAGeMnqUTuyZ9xnGZU9jcuCR2Ou+9i/YNjvnMDf8DrUKM1GdRqhi...</msg>
<status status="PASS" starttime="20220725 10:02:46.819" endtime="20220725 10:02:46.820"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.817" endtime="20220725 10:02:46.820"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:02:46.821" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:46.822" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:02:46.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:02:46.824" level="INFO">${body} = {'data': 'md6nBv52Mn3+nIC49XI4J80h4s+LxDAh0HJ7coLBjEUENg7Giy72hCJbPiOpz0AIW4dtwnTDCYbNRZfHANmO4xB11QARpvhx+MbTRh1tNczwAgg/+jCHzaNqBGCFB2G12vnAkjyrQKDvAljqRoQtLAGeMnqUTuyZ9xnGZU9jcuCR2Ou+9i/YNjvnMDf8Dr...</msg>
<status status="PASS" starttime="20220725 10:02:46.820" endtime="20220725 10:02:46.824"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:50.192" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:02:50.192" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:50 GMT', 'x-amzn-RequestId': '5026a37d-d011-415e-8d92-511dc9423bf2', 'x-amz-apigw-id': 'VzYpnGZayQ0FX7A=', 'X-Amzn-Trace-Id': 'Root=1-62de07d6-610bc7e961a875af63064aa4', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 0e78cd85e770cae91af28801bffe5c5e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'vIK5TWjGx9OyO8S_gFka3GYd7d6rbNGiathD5U_iZYz8RCbaSU6NIQ=='} 
 body={"data":"rDF8lSjacqA2X+QcKd5VH4L45dHCZX6Pb2Sh0GDZo8eQCjupgCtlAv2oChLPb9oDgRGZxcekG/KwaEQ8kkqr05eZF5Tx5SkM+Y5eULzlc7CC3PbC097liqGawdQQm2Ip/T25Ok7YkbfPo44IkYO4p4u0yievCRl66xPp1H/MQ6lyBfuTHIsHU2GB1PVZVByL6ZmEqNYHSzYl9xvASRIOz/XgrqkZF91yFRBXidkOWZObethiJwilv0RfLTK0qjh49kYbIVvvtwh+S/0aDXj1nyDEg/PCFpog+GM1uWe/YawAXIz5n+kSZObUtcOZll20Wv6QuOc3+Gv1EAw3+zYtZVDvIEg9Wg=="} 
 </msg>
<msg timestamp="20220725 10:02:50.193" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:50.193" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:46.824" endtime="20220725 10:02:50.193"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.194" level="INFO">${RESPONSE_ENCRYPT_TYPE} = rDF8lSjacqA2X+QcKd5VH4L45dHCZX6Pb2Sh0GDZo8eQCjupgCtlAv2oChLPb9oDgRGZxcekG/KwaEQ8kkqr05eZF5Tx5SkM+Y5eULzlc7CC3PbC097liqGawdQQm2Ip/T25Ok7YkbfPo44IkYO4p4u0yievCRl66xPp1H/MQ6lyBfuTHIsHU2GB1PVZVByL6ZmEqNYH...</msg>
<status status="PASS" starttime="20220725 10:02:50.193" endtime="20220725 10:02:50.194"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:50.197" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text rDF8lSjacqA2X+QcKd5VH4L45dHCZX6Pb2Sh0GDZo8eQCjupgCtlAv2oChLPb9oDgRGZxcekG/KwaEQ8kkqr05eZF5Tx5SkM+Y5eULzlc7CC3PbC097liqGawdQQm2Ip/T25Ok7YkbfPo44IkYO4p4u0yievCRl66xPp1H/MQ6lyBfuTHIsHU2GB1PVZVByL6ZmEqNYHSzYl9xvASRIOz/XgrqkZF91yFRBXidkOWZObethiJwilv0RfLTK0qjh49kYbIVvvtwh+S/0aDXj1nyDEg/PCFpog+GM1uWe/YawAXIz5n+kSZObUtcOZll20Wv6QuOc3+Gv1EAw3+zYtZVDvIEg9Wg==</msg>
<msg timestamp="20220725 10:02:50.204" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:50.361" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:50.196" endtime="20220725 10:02:50.362"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:50.363" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:50.363" endtime="20220725 10:02:50.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.364" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220725 10:02:50.364" endtime="20220725 10:02:50.364"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.365" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220725 10:02:50.364" endtime="20220725 10:02:50.365"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:50.366" endtime="20220725 10:02:50.366"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.195" endtime="20220725 10:02:50.366"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:50.367" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0875787441', 'consent...</msg>
<status status="PASS" starttime="20220725 10:02:50.367" endtime="20220725 10:02:50.367"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..consent_new_version</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:50.392" level="INFO">${values_code} = [True]</msg>
<status status="PASS" starttime="20220725 10:02:50.367" endtime="20220725 10:02:50.392"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.393" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220725 10:02:50.393" endtime="20220725 10:02:50.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Agree_Consent</arg>
</arguments>
<kw name="Agree_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:50.395" endtime="20220725 10:02:50.396"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.397" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:50.396" endtime="20220725 10:02:50.397"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.398" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:50.397" endtime="20220725 10:02:50.399"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.401" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:50.400" endtime="20220725 10:02:50.401"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.399" endtime="20220725 10:02:50.401"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:50.402" endtime="20220725 10:02:50.402"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:50.403" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:50.412" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:50.594" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:50.402" endtime="20220725 10:02:50.594"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:50.595" endtime="20220725 10:02:50.596"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.401" endtime="20220725 10:02:50.596"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:50.598" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:50.599" level="INFO">${TextFileContent} = qTCXdHStC4XBnZO3aYre49RK095IAy8rSB8VxgJYmyPZT8Z6gf6IHBk+znEmOarTVuptiVhRyBztl7z8/oeiJQ/em16q8ChJrarkZPNNWmTWSaI=</msg>
<status status="PASS" starttime="20220725 10:02:50.598" endtime="20220725 10:02:50.599"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:50.600" level="INFO">${RESULT_ENCRYPT_DATA} = qTCXdHStC4XBnZO3aYre49RK095IAy8rSB8VxgJYmyPZT8Z6gf6IHBk+znEmOarTVuptiVhRyBztl7z8/oeiJQ/em16q8ChJrarkZPNNWmTWSaI=</msg>
<status status="PASS" starttime="20220725 10:02:50.599" endtime="20220725 10:02:50.600"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.597" endtime="20220725 10:02:50.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:02:50.600" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:50.601" level="INFO">To JSON using : content={"data": "qTCXdHStC4XBnZO3aYre49RK095IAy8rSB8VxgJYmyPZT8Z6gf6IHBk+znEmOarTVuptiVhRyBztl7z8/oeiJQ/em16q8ChJrarkZPNNWmTWSaI="} </msg>
<msg timestamp="20220725 10:02:50.601" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:02:50.601" level="INFO">${body} = {'data': 'qTCXdHStC4XBnZO3aYre49RK095IAy8rSB8VxgJYmyPZT8Z6gf6IHBk+znEmOarTVuptiVhRyBztl7z8/oeiJQ/em16q8ChJrarkZPNNWmTWSaI='}</msg>
<status status="PASS" starttime="20220725 10:02:50.600" endtime="20220725 10:02:50.601"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:51.949" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "qTCXdHStC4XBnZO3aYre49RK095IAy8rSB8VxgJYmyPZT8Z6gf6IHBk+znEmOarTVuptiVhRyBztl7z8/oeiJQ/em16q8ChJrarkZPNNWmTWSaI="}' 
 </msg>
<msg timestamp="20220725 10:02:51.950" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:51 GMT', 'x-amzn-RequestId': 'd87e74ff-8980-4626-9bb4-77f0622ba8a0', 'x-amz-apigw-id': 'VzYqNEWwyQ0FTUw=', 'X-Amzn-Trace-Id': 'Root=1-62de07da-33e8d14011b9bdfe3fb81195', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9c6ba766f3969603ce0d08d75fcfd692.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'fgHhzjEpWJUzZub0zappvtJ8WqfMClufUlJ8oreNuHM6wuH48nhgKA=='} 
 body={"data":"4izXRUUln5tXtWxtUBdefBsIMkT5WBWei6JclicIze/3x0S2UaphN1+f3wKjpzcVYF0OTqakpvb8EdlURrNxZsjHa2IN4rqc7bTTJQjo0YfXNOzbmkFZkNymIixdSlrMAi1YvbBdqdlRt0R4g6lksNu0TA9i+sscvtSTAY2pl+AuTa1uQAG5Jxnfzrz4uXDjInwGLDKZNcpCQ7uCbZGLeY74/vMo/XTSOftcszOgZYoeXUmF1bwYSfiMGxKqeVvG+ivK85XuXKZRH57p+9t+w8E="} 
 </msg>
<msg timestamp="20220725 10:02:51.950" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:51.950" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:50.602" endtime="20220725 10:02:51.950"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:51.952" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 4izXRUUln5tXtWxtUBdefBsIMkT5WBWei6JclicIze/3x0S2UaphN1+f3wKjpzcVYF0OTqakpvb8EdlURrNxZsjHa2IN4rqc7bTTJQjo0YfXNOzbmkFZkNymIixdSlrMAi1YvbBdqdlRt0R4g6lksNu0TA9i+sscvtSTAY2pl+AuTa1uQAG5Jxnfzrz4uXDjInwGLDKZ...</msg>
<status status="PASS" starttime="20220725 10:02:51.950" endtime="20220725 10:02:51.952"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:51.954" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 4izXRUUln5tXtWxtUBdefBsIMkT5WBWei6JclicIze/3x0S2UaphN1+f3wKjpzcVYF0OTqakpvb8EdlURrNxZsjHa2IN4rqc7bTTJQjo0YfXNOzbmkFZkNymIixdSlrMAi1YvbBdqdlRt0R4g6lksNu0TA9i+sscvtSTAY2pl+AuTa1uQAG5Jxnfzrz4uXDjInwGLDKZNcpCQ7uCbZGLeY74/vMo/XTSOftcszOgZYoeXUmF1bwYSfiMGxKqeVvG+ivK85XuXKZRH57p+9t+w8E=</msg>
<msg timestamp="20220725 10:02:51.959" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:52.112" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:51.953" endtime="20220725 10:02:52.113"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:52.115" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:52.114" endtime="20220725 10:02:52.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.117" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:52.115" endtime="20220725 10:02:52.117"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.118" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:52.117" endtime="20220725 10:02:52.118"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:52.119" endtime="20220725 10:02:52.119"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:51.952" endtime="20220725 10:02:52.119"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:52.120" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:02:52.120" endtime="20220725 10:02:52.120"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:52.146" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:02:52.120" endtime="20220725 10:02:52.146"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.147" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:52.146" endtime="20220725 10:02:52.147"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.395" endtime="20220725 10:02:52.147"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:50.394" endtime="20220725 10:02:52.147"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:46.273" endtime="20220725 10:02:52.147"></status>
</kw>
<kw name="Check_DOPA_Fail" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:52.148" endtime="20220725 10:02:52.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.150" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:52.149" endtime="20220725 10:02:52.150"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser" : "XXXXXXXXXXXX"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.151" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:52.150" endtime="20220725 10:02:52.151"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:52.150" endtime="20220725 10:02:52.151"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:52.152" endtime="20220725 10:02:52.152"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:52.153" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:52.158" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:52.321" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:52.152" endtime="20220725 10:02:52.322"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:52.323" endtime="20220725 10:02:52.323"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:52.152" endtime="20220725 10:02:52.324"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:52.325" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:52.326" level="INFO">${TextFileContent} = 9D8g62C1mn1TRRpMm3jtZNhlFDe6c/SUHxzfbTCDRfAsl/9Puoz/iw+TLHxo5o5rnDC0J62yAqTl6PaWOTQ58dXhmJ0u1TzLgupAMQ5QYNdHKjv9uCaj</msg>
<status status="PASS" starttime="20220725 10:02:52.325" endtime="20220725 10:02:52.326"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:52.327" level="INFO">${RESULT_ENCRYPT_DATA} = 9D8g62C1mn1TRRpMm3jtZNhlFDe6c/SUHxzfbTCDRfAsl/9Puoz/iw+TLHxo5o5rnDC0J62yAqTl6PaWOTQ58dXhmJ0u1TzLgupAMQ5QYNdHKjv9uCaj</msg>
<status status="PASS" starttime="20220725 10:02:52.326" endtime="20220725 10:02:52.328"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:52.324" endtime="20220725 10:02:52.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:02:52.328" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:52.330" level="INFO">To JSON using : content={"data": "9D8g62C1mn1TRRpMm3jtZNhlFDe6c/SUHxzfbTCDRfAsl/9Puoz/iw+TLHxo5o5rnDC0J62yAqTl6PaWOTQ58dXhmJ0u1TzLgupAMQ5QYNdHKjv9uCaj"} </msg>
<msg timestamp="20220725 10:02:52.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:02:52.330" level="INFO">${body} = {'data': '9D8g62C1mn1TRRpMm3jtZNhlFDe6c/SUHxzfbTCDRfAsl/9Puoz/iw+TLHxo5o5rnDC0J62yAqTl6PaWOTQ58dXhmJ0u1TzLgupAMQ5QYNdHKjv9uCaj'}</msg>
<status status="PASS" starttime="20220725 10:02:52.328" endtime="20220725 10:02:52.330"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:55.361" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '128', 'Content-Type': 'application/json'} 
 body=b'{"data": "9D8g62C1mn1TRRpMm3jtZNhlFDe6c/SUHxzfbTCDRfAsl/9Puoz/iw+TLHxo5o5rnDC0J62yAqTl6PaWOTQ58dXhmJ0u1TzLgupAMQ5QYNdHKjv9uCaj"}' 
 </msg>
<msg timestamp="20220725 10:02:55.361" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '1047', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:55 GMT', 'x-amzn-RequestId': 'a47988d1-63a3-4e2f-8d74-1ad0f8e90d92', 'x-amz-apigw-id': 'VzYqdGeVyQ0Faew=', 'X-Amzn-Trace-Id': 'Root=1-62de07dc-379a510d584339c8204dcdeb', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9c6ba766f3969603ce0d08d75fcfd692.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'XreHfoL7lGVlSlVZGGhyk1SRmQDRZHbcynXT-uqjAjLdRGGyv4Q3QQ=='} 
 body={"data":"upsteKMOb9VPbuJH0Eymw3YnzknItrIyxwGmCb0TSkWldSDzsYO+RS7kybJxRESgqV29uKvdZTjUDfgRydRvItydGsa9qtw0PU90putQ99gPG04RljldIIXdI5wcpGS+Z0VawE2cRmqGP1xsANlisz8KYu+TMYYdNGsEq3K8vyzFlYOC/T6Isohr8dMfDhw6rctI16WdIpWs64Nl75VvLM1NcGpix9r5FYmlmQKI9zjRO0fprDHduExaK7IdTutqSY5n2V3jg4edx3cHfnfxBSz24i8v9m5PmhqTk3R+xbYE2cfeQH1No/23guoFzems643TbfaaJdFDa+u5lLRAOkrR/276fznmU+gmVcBujSHxgefGQ5fYGwcR9/wFE1/YO0xbbIDnuFbC5O2dwN6uluKR+8h3b2c/QuJJJNuaLG+rCCKnh1j0PNKNkNdncxrggTVRD8BNxvm8hZBleay6bwqFF23iGPrjpGvDsYUVrLKoDC4l1GKwMmDgXzOiuhwE2/uzo6cg4slvwNV4kB+6wszhvQKwOqyQkHLOJ9OuhqEKwZRE0zyuzgbCQ2sCdwlgKrCemyS4mW0jiQOC7zsETPx5KHnf0yAnpZ3AA/FQ8GfEE5MMX0dQ8pPPMYwCD1paMfMetGPPx5bUOqSXb1tGm8c112SzxDYSJcgZj+RkeNbkHVSqHg7I7Ku5xoYc3kEWFUF7XRA8x/Fm6p3km5/DuaHM9HJXcfRCzgyl0JgdrLroypUAuJyNafzrEhmM/UzCwFtgYDDDigpLYAN24302MUnzkeVMbcuKLDJtEsnxKifE6MFKVFiM+Zg9fXxW3nvldXtUuMjnyxJ2BfP0sukd/PCk7eaNwHLYZRqO3FzRCDfpkO2MgVfiwOdq0qZywe0ytQPdxwd3HsED3Qx/ES+CTVIIAxP6wxazWGFZVtzQjRYIMj9O8Y3R9NQqKoUk7ReoJjGGTpE/ssWbkCKhZkeHamHsA3HVBU9hG2bqpFtXU3eOus0rQwafeNeKbt6aWNcWXMXMuQ3lRp8="} 
 </msg>
<msg timestamp="20220725 10:02:55.361" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:55.362" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:52.331" endtime="20220725 10:02:55.362"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:52.148" endtime="20220725 10:02:55.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>QR_code_page.Validate_QR_Code_for_test_qrstamp_scene</arg>
</arguments>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:55.364" endtime="20220725 10:02:55.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:55.365" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ'}</msg>
<status status="PASS" starttime="20220725 10:02:55.364" endtime="20220725 10:02:55.365"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:55.366" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:55.365" endtime="20220725 10:02:55.366"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:55.368" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:55.367" endtime="20220725 10:02:55.368"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:55.366" endtime="20220725 10:02:55.369"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:55.370" endtime="20220725 10:02:55.371"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:55.373" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:55.379" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:55.559" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:55.372" endtime="20220725 10:02:55.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:55.560" endtime="20220725 10:02:55.560"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:55.369" endtime="20220725 10:02:55.561"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:55.564" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:55.564" level="INFO">${TextFileContent} = FBsURznLLe93TtIPJFh7wvzNu5g0IIx3cQnGHvRsMkFFHYA43D89sm4WhfH4R/d5bbBFwZ9LlyhMdGoIWAf6x79eaXXPKktJ0ft29jBjGE6zy6IfByb+W27Hyuz5dm1ahJXFujq4VFCu/NDQkZ6RYTVPb35MlmBtJ6o4GDlgMQdcGEaU98vaLdNAeCnl2L5cE/UCCR6j...</msg>
<status status="PASS" starttime="20220725 10:02:55.563" endtime="20220725 10:02:55.564"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:55.565" level="INFO">${RESULT_ENCRYPT_DATA} = FBsURznLLe93TtIPJFh7wvzNu5g0IIx3cQnGHvRsMkFFHYA43D89sm4WhfH4R/d5bbBFwZ9LlyhMdGoIWAf6x79eaXXPKktJ0ft29jBjGE6zy6IfByb+W27Hyuz5dm1ahJXFujq4VFCu/NDQkZ6RYTVPb35MlmBtJ6o4GDlgMQdcGEaU98vaLdNAeCnl2L5cE/UCCR6j...</msg>
<status status="PASS" starttime="20220725 10:02:55.565" endtime="20220725 10:02:55.566"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:55.561" endtime="20220725 10:02:55.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:55.567" level="INFO">&amp;{body} = { data=FBsURznLLe93TtIPJFh7wvzNu5g0IIx3cQnGHvRsMkFFHYA43D89sm4WhfH4R/d5bbBFwZ9LlyhMdGoIWAf6x79eaXXPKktJ0ft29jBjGE6zy6IfByb+W27Hyuz5dm1ahJXFujq4VFCu/NDQkZ6RYTVPb35MlmBtJ6o4GDlgMQdcGEaU98vaLdNAeCnl2L5cE...</msg>
<status status="PASS" starttime="20220725 10:02:55.566" endtime="20220725 10:02:55.567"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:56.160" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNmU0MTM1NDgtNjk5Mi00ZDVjLThlNDItZDc1MDMyNTA2MDVhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNjMsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ2MywiaWF0IjoxNjU4NzE4MTYzfQ.CXCwwYrAtS6WSL6Ast6F37L24c_6-qCCgZzRq5zEUOzzVTqepehj66G74gRRHUPsULzduVbyWyHV8TlavaMzRISK7WNk8dvGQbXzGLVTmZR_zrm0Ql0z3s8OR3BIfBAAjVBFoNoPD3tN4H62R4i_QLC2QjxWWivLQIlYSAzErtouwOxzagkRCf7MjXwewHLZDQ5GSD-IePPbRi7ee2tgrcAnm8xjC0MNun3R7FFmBedXOi0UZnS0nEkV9Gq5c4Dasq_jl3sBuOZCNXLWSguiifJ2hwYaHsqjsXO7NtI-eRrVYoqApGLlK85a7vxH_INMMPbY9w1iNj6116e6mfwnLQ', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "FBsURznLLe93TtIPJFh7wvzNu5g0IIx3cQnGHvRsMkFFHYA43D89sm4WhfH4R/d5bbBFwZ9LlyhMdGoIWAf6x79eaXXPKktJ0ft29jBjGE6zy6IfByb+W27Hyuz5dm1ahJXFujq4VFCu/NDQkZ6RYTVPb35MlmBtJ6o4GDlgMQdcGEaU98vaLdNAeCnl2L5cE/UCCR6jRSJrT4T4RFGFYn6ncCjStgPvxA3eR40I9weFTDqugmhLZnVCaVeV5YJlArrjl5cv2Qn+JUQvaejPcutmZeEHrbpdH9duumlJ1lN1Fh3Flq5I9ozDVp4QPCqguVLo5Xkj"}' 
 </msg>
<msg timestamp="20220725 10:02:56.161" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '455', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:56 GMT', 'x-amzn-RequestId': 'af5e2993-41f7-45a3-bdd5-c0f048597e5d', 'x-amz-apigw-id': 'VzYq-HrTSQ0FiIA=', 'X-Amzn-Trace-Id': 'Root=1-62de07df-5f3063643b91d16c52db17ce', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9b0031bf7587362e4b824035156bfd7e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'cQtSlln5SU_JDVc9vw_lxf2w-X9VoCnO1kpBN_YEVC2_xpzj6mtPLQ=='} 
 body={"data":"9ziV69nKWfsfoyRp+0EToRrYBWwxKF6dgCiPG7G0HNRx6GiHSIa8xUpxPxwGIqeY/+B0Cj7aUralK1GS8sD+cYhDckD+6oU1cFSN33RtGP8MUBzq+JTOMKo6B7KCCpQbRSOY8cnmojQzit+jFBp9yFk0ksKjTkzsPRFK55TrwMMkcbPTpDNAg8V5UOxuFI9B9OIG6P6RkbRSbEChsWgoc/woXM59EfADefd5VZE2oxY1X6B3zrpUP03IVvyRdt4B53lg+s30P6NbL61eQGEhciZjYkv5eF4R8tQcmOqNVJFNKD4AIcDdez25h1cUtVVAENDraEWqmRwtOoq1wAfOgMY3bYAp1Caa1cEtbR2jfjAMq7TqsbwRDM+Fc6iO8+gHVEwKKCPyRhGOjupsvNIs27XOT+Mz0trQQIPrRriZmyOWMTWM4VxA74+Huw=="} 
 </msg>
<msg timestamp="20220725 10:02:56.161" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:56.161" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:55.567" endtime="20220725 10:02:56.161"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.162" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 9ziV69nKWfsfoyRp+0EToRrYBWwxKF6dgCiPG7G0HNRx6GiHSIa8xUpxPxwGIqeY/+B0Cj7aUralK1GS8sD+cYhDckD+6oU1cFSN33RtGP8MUBzq+JTOMKo6B7KCCpQbRSOY8cnmojQzit+jFBp9yFk0ksKjTkzsPRFK55TrwMMkcbPTpDNAg8V5UOxuFI9B9OIG6P6R...</msg>
<status status="PASS" starttime="20220725 10:02:56.161" endtime="20220725 10:02:56.162"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:56.164" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 9ziV69nKWfsfoyRp+0EToRrYBWwxKF6dgCiPG7G0HNRx6GiHSIa8xUpxPxwGIqeY/+B0Cj7aUralK1GS8sD+cYhDckD+6oU1cFSN33RtGP8MUBzq+JTOMKo6B7KCCpQbRSOY8cnmojQzit+jFBp9yFk0ksKjTkzsPRFK55TrwMMkcbPTpDNAg8V5UOxuFI9B9OIG6P6RkbRSbEChsWgoc/woXM59EfADefd5VZE2oxY1X6B3zrpUP03IVvyRdt4B53lg+s30P6NbL61eQGEhciZjYkv5eF4R8tQcmOqNVJFNKD4AIcDdez25h1cUtVVAENDraEWqmRwtOoq1wAfOgMY3bYAp1Caa1cEtbR2jfjAMq7TqsbwRDM+Fc6iO8+gHVEwKKCPyRhGOjupsvNIs27XOT+Mz0trQQIPrRriZmyOWMTWM4VxA74+Huw==</msg>
<msg timestamp="20220725 10:02:56.169" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:56.330" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:56.163" endtime="20220725 10:02:56.330"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:56.332" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:56.331" endtime="20220725 10:02:56.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.332" level="INFO">{"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:02:56.332" endtime="20220725 10:02:56.333"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.333" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":nu...</msg>
<status status="PASS" starttime="20220725 10:02:56.333" endtime="20220725 10:02:56.333"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.334" endtime="20220725 10:02:56.334"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:56.162" endtime="20220725 10:02:56.335"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:56.335" level="INFO">${convert_result} = {'status': {'code': '2024', 'message': 'QR Used', 'remark': '', 'user_code': 'E0016', 'user_message_en': 'The QR code is used.', 'user_message_th': 'คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว...</msg>
<status status="PASS" starttime="20220725 10:02:56.335" endtime="20220725 10:02:56.336"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.360" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:56.336" endtime="20220725 10:02:56.360"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.361" level="INFO">${RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:56.360" endtime="20220725 10:02:56.361"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.381" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:02:56.361" endtime="20220725 10:02:56.381"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.382" level="INFO">${QR_RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:02:56.382" endtime="20220725 10:02:56.382"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.403" level="INFO">${values_code} = ['QR Used']</msg>
<status status="PASS" starttime="20220725 10:02:56.383" endtime="20220725 10:02:56.403"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.404" level="INFO">${RESPONSE_MESSAGE} = QR Used</msg>
<status status="PASS" starttime="20220725 10:02:56.403" endtime="20220725 10:02:56.404"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.427" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:02:56.404" endtime="20220725 10:02:56.427"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.427" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:56.427" endtime="20220725 10:02:56.427"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.452" level="INFO">${values_code} = ['E0016']</msg>
<status status="PASS" starttime="20220725 10:02:56.428" endtime="20220725 10:02:56.452"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.453" level="INFO">${RESPONSE_USERCODE} = E0016</msg>
<status status="PASS" starttime="20220725 10:02:56.452" endtime="20220725 10:02:56.453"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.477" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:56.454" endtime="20220725 10:02:56.477"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.478" level="INFO">${RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:56.477" endtime="20220725 10:02:56.478"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.536" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:02:56.478" endtime="20220725 10:02:56.536"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.537" level="INFO">${QR_RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:02:56.536" endtime="20220725 10:02:56.537"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.559" level="INFO">${values_code} = ['คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว']</msg>
<status status="PASS" starttime="20220725 10:02:56.538" endtime="20220725 10:02:56.559"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.560" level="INFO">${RESPONSE_USER_TH} = คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว</msg>
<status status="PASS" starttime="20220725 10:02:56.560" endtime="20220725 10:02:56.560"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:02:56.582" level="INFO">${values_code} = []</msg>
<status status="PASS" starttime="20220725 10:02:56.561" endtime="20220725 10:02:56.582"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.583" level="FAIL">Resolving variable '${values_code[0]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20220725 10:02:56.582" endtime="20220725 10:02:56.583"></status>
</kw>
<status status="FAIL" starttime="20220725 10:02:55.363" endtime="20220725 10:02:56.583"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:55.363" endtime="20220725 10:02:56.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Stamp_Used</arg>
<arg>9</arg>
</arguments>
<kw name="Save_Result_Stamp_Used" library="save_data_excel_page">
<arguments>
<arg>9</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.584" endtime="20220725 10:02:56.677"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>value=${QR_VALUE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.677" endtime="20220725 10:02:56.678"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.678" endtime="20220725 10:02:56.679"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.679" endtime="20220725 10:02:56.680"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.680" endtime="20220725 10:02:56.680"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.681" endtime="20220725 10:02:56.682"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.682" endtime="20220725 10:02:56.683"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.684" endtime="20220725 10:02:56.685"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.685" endtime="20220725 10:02:56.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST STATUS}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.686" level="INFO">PASS</msg>
<status status="PASS" starttime="20220725 10:02:56.686" endtime="20220725 10:02:56.686"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.687" endtime="20220725 10:02:56.766"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:02:56.767" endtime="20220725 10:02:56.767"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:56.584" endtime="20220725 10:02:56.768"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:56.583" endtime="20220725 10:02:56.768"></status>
</kw>
<doc>ทดสอบระบบ Stamp QR Used กรณีลูกค้า Gen QR code มาทำ kyc และได้สถานะเป็น Unsuccess (DOPA FAIL) และ กลับมาทำ KYC อีกครั้ง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:02:39.767" endtime="20220725 10:02:56.768" critical="yes"></status>
</test>
<test id="s1-t5" name="QR_Stamp_used_8">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:56.772" endtime="20220725 10:02:56.772"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:56.774" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:56.773" endtime="20220725 10:02:56.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:56.775" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:02:56.774" endtime="20220725 10:02:56.775"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:57.227" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:02:57.228" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:02:57 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': '802d36ce-d802-4d24-bf05-d1cefcb255d1', 'x-amz-apigw-id': 'VzYrLE_KSQ0Fhug=', 'X-Amzn-Trace-Id': 'Root=1-62de07e0-536907584bdf2b9a36fce6c0'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431526259765375784762819","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:02:57.228" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:57.228" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:56.776" endtime="20220725 10:02:57.228"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.229" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:02:57.228" endtime="20220725 10:02:57.229"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.230" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:02:57.230" endtime="20220725 10:02:57.230"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.231" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:02:57.231" endtime="20220725 10:02:57.232"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.232" level="INFO">${QR_VALUE} = 2431526259765375784762819</msg>
<status status="PASS" starttime="20220725 10:02:57.232" endtime="20220725 10:02:57.232"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.233" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:02:57.233" endtime="20220725 10:02:57.233"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.234" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:02:57.234" endtime="20220725 10:02:57.234"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.235" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:02:57.235" endtime="20220725 10:02:57.235"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:56.771" endtime="20220725 10:02:57.236"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.239" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:57.238" endtime="20220725 10:02:57.239"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:57.238" endtime="20220725 10:02:57.239"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:57.240" endtime="20220725 10:02:57.240"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:57.241" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:57.246" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:57.406" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:57.241" endtime="20220725 10:02:57.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:57.408" endtime="20220725 10:02:57.408"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:57.240" endtime="20220725 10:02:57.408"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:02:57.411" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:02:57.411" level="INFO">${TextFileContent} = 4engfXoeNYJuNJ8WatpgqEC1RzGXV888DzOnPLX1ZvkTfsH8upoUqTQcwN1qn2rCPKM/nT7luqtAI6EmdbimRyOe3pEitEjNWZ5TLMJ7CF8Zg5TzCwV+ovT1KlXrY2yFqi6GNUY=</msg>
<status status="PASS" starttime="20220725 10:02:57.410" endtime="20220725 10:02:57.411"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.412" level="INFO">${RESULT_ENCRYPT_DATA} = 4engfXoeNYJuNJ8WatpgqEC1RzGXV888DzOnPLX1ZvkTfsH8upoUqTQcwN1qn2rCPKM/nT7luqtAI6EmdbimRyOe3pEitEjNWZ5TLMJ7CF8Zg5TzCwV+ovT1KlXrY2yFqi6GNUY=</msg>
<status status="PASS" starttime="20220725 10:02:57.411" endtime="20220725 10:02:57.412"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:57.409" endtime="20220725 10:02:57.412"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:57.413" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:57.412" endtime="20220725 10:02:57.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:02:57.415" level="INFO">&amp;{body} = { data=4engfXoeNYJuNJ8WatpgqEC1RzGXV888DzOnPLX1ZvkTfsH8upoUqTQcwN1qn2rCPKM/nT7luqtAI6EmdbimRyOe3pEitEjNWZ5TLMJ7CF8Zg5TzCwV+ovT1KlXrY2yFqi6GNUY= }</msg>
<status status="PASS" starttime="20220725 10:02:57.414" endtime="20220725 10:02:57.415"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:02:59.689" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "4engfXoeNYJuNJ8WatpgqEC1RzGXV888DzOnPLX1ZvkTfsH8upoUqTQcwN1qn2rCPKM/nT7luqtAI6EmdbimRyOe3pEitEjNWZ5TLMJ7CF8Zg5TzCwV+ovT1KlXrY2yFqi6GNUY="}' 
 </msg>
<msg timestamp="20220725 10:02:59.689" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:02:59 GMT', 'x-amzn-RequestId': '479c269a-96df-41cd-8d4f-fb5f82b8c488', 'x-amz-apigw-id': 'VzYrRFaUSQ0FW_g=', 'X-Amzn-Trace-Id': 'Root=1-62de07e1-040fde5d2d137aa346a29139', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 c54b9c83bf792961460afd6b807b54a8.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'qutu8TQgKDlkZgiCWQ3z1OOXU_Kf0y7ienWiWKXqEJFwefWrSdYkPw=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:02:59.689" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:02:59.690" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:02:57.415" endtime="20220725 10:02:59.690"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.692" level="INFO">${RESPONSE_ENCRYPT_TYPE} = aQ2heIp0bFkOiw0mUyJBCufk2295t4onlgqfxxdh1mG1ehsmz2YlYo8i5Yfm6bJBq3zCyxoVYf6HpxjaekCZqq8yJKr6C9hmULo4dM3bec28D2a5NOLtSt5KmGK2Ci9hT7/elE9sNLz7r8Y9AqponpyfRgp0BU9HyqoIZKCczAmw60er9PvggAL2JncSXq5R6PMh2h6W...</msg>
<status status="PASS" starttime="20220725 10:02:59.690" endtime="20220725 10:02:59.692"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:59.695" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:02:59.703" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:02:59.867" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:59.693" endtime="20220725 10:02:59.867"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:02:59.869" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:02:59.868" endtime="20220725 10:02:59.869"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.870" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjAyODQ2ODIzLThhYTQtNGJlOS05NjIxLWU4MjRjNGUwNGFhOSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg0NzksImlhdCI6MTY1ODcxODE3OSwianRpIjoiMDViNjk3NTUtNDRmOC00MTk1LWJjZDMtZjJlYTY0Zjg2Y2FiIiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.Pki6XHOmDj2fSpIvqOSaU5uXG5C49WGT4jbFaHkKX5o_znXaiTCdPQz1RAYKeBUexpN-k6NJ46ZTG0bh1-0F1x_kygOsAVYQ1UyEl9Y94Jclg8tR11EybcLFKkbbmvvPydK-fqfUPKUUs9yIpvQPEqHfoDY7VPo1cXoFZZDGJM0Kl4QHYR9xR-MCb4c9EAwbCt4yiKQLtmoUssprAdfqkze0z_x_cImAsFPWikXQv5q6_LqUGhUk6zNlZxcTJe4j6CEBaQGOV8gsaLKiP2WWozUIUAWIYGRWQC8WjTXf4d6DTzlqGgLRXfQe_eD0tir1u17Z20jjFnr741E6Q8GEaw","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.jJZw38qZbeSrvN5iAu3f8DdWPK77CF35VlULryePDoXSPWz0Ls7LDYOyJPqmiQoTt9RbBYSkn2jDc9q6V9lpqv9lcOxxYlKJJ0rV2-7vQkFk9QYbLMUoIUTj4z-qmalADzMDouFyeqGRPJHJGVEpTSsAZi_8q2kWGy-8GtPbItyOiDsnRs4NnDeetd8dfTia2YbA3WK-iOf3GvKXdqIXnMfvJFGr46jXHCw9gq6bhKpr27n56S6mmfkevYsPaviA9CAeovIoXdadsJkAtVK3xujHrY9ZJTQpeRFFJN4e1zJE5jTK2zY3ThRWb4ceHxKP9ZBXs4-o9_efWxaWRta7cg.NpdwhRodjl6GP_wP.j-_Wa-6xm2AqU1kwtqrUkEPu2COQ0Hb2kHCARbwyer1PmIaqefuGeU0ku2gPMTW_1A6CarqIzZscg0YfVy6FESbA_0t2V0WzDWCm50zb-xKGY6uApKALBNCSXNe0T1U5Eao2sKkIRxabXcN5GUbZzXGaZmBATevKPXq8zh_acpnu4y_EVkqhF1Pxk3rsvUYLcdfkS6nU6nOrEtOxLZ5Vta_rLJ3nRmPz9AsHwriEHnMUKUPsi-EguIg7vJXYhPUMDzNZmbNZe5BsTLprvQLpygGjgCbcqck27gK35SDCHOPzljTVGyfeJSBsFsCAuL0u8maJapOZr_2meJpdbnb9l1hZXwKKbDjHWSpzESEEC25qPozN-z_V0kMfiORTvD4flMpwJnohbOlAdfmV6VP7jhUNhsYY0uY9CVmtiu5OhtHqoyFS7fkM5xFbr-XQ4hT638iliWueGuQQg4H6Ig86wYwEk1ZhgLMFBAFHYkiAkQkYFL8X95giPTTLuZ-Zyhd9b0msi5MlLCifvsxkVJaARHbVPLa3hAehtfvaj2XWRIN-hc8XzXXixRavL0H2d7F8jid964dcem3KIPntxvym1giabrCCk21eLYFL-2ySfpQck0ax8dUNo7owg76TKXA3Ggg0BGSm0RTUW1eEohiAHU5rIBmDyYzt8MJ8iE6WGXnvj0AmXOmzJye6U7kHQZehUla6NuxrBfKk9q97omnjyXcSQFV6L5E8VFPEAc0eIhGCTFCeqx8Fmgvg5yAvEvF_35ZOq9zEEbs3Njk-2jUW8ZMUc0JhxMXH4lkY_QxmgVoVsHdZQzkJlQfJ-cJBii6ttfiVouhY9I_QLHHFvusk_7Tn-RTv_PANX6k1lrHOIVEQCvkCNt5kc53-tKuySNTaYy5LE8UN0l-cdcP0Q1WPVf0cKfRU48LaoSYTO6M4qiaUtwva1bNzBgjtnHDXjZOIVfe2MqASUiZS5Gj4Y5_AUybQviN6ygn7RvxF7geMke7T-XRPy6UkuQcx_tpqm4xp4AKqzRy-cobhE69bkzWciCZ1wGpErpxD6uRCfiGjBpC95UJJjorWH8HjIt_P8wZRC0X2ZGRQO9GBGMRq3b9cVA0rcOHmpEn5btNxW7H4y-8hpSKp9yy44dsmJtPnzA7A7GWBU9vsdPDBNDl6TjDfDPGLtVbjCsmx2bjJkAViDiMJSEHse4LdF4fe3j5eHvZ6cvC2W7_hCQ8h2aVO1fZSDVYtCsApmCmB4MwucSm-1AATZvxT0XtRZbaQMeYGTEcXSiGNu4dqX6CuOocQXBEYKvWU7L3X.iDLJ2eOe0DrQSQhI_XlT7g","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ"}}</msg>
<status status="PASS" starttime="20220725 10:02:59.870" endtime="20220725 10:02:59.870"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.871" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:02:59.871" endtime="20220725 10:02:59.872"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:59.872" endtime="20220725 10:02:59.872"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:59.692" endtime="20220725 10:02:59.872"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:02:59.873" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:02:59.872" endtime="20220725 10:02:59.873"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:02:59.898" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:02:59.873" endtime="20220725 10:02:59.898"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.899" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ']</msg>
<status status="PASS" starttime="20220725 10:02:59.899" endtime="20220725 10:02:59.899"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.900" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:02:59.899" endtime="20220725 10:02:59.900"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:57.237" endtime="20220725 10:02:59.900"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:57.237" endtime="20220725 10:02:59.900"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:59.901" endtime="20220725 10:02:59.902"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.902" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:02:59.902" endtime="20220725 10:02:59.902"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.903" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:02:59.902" endtime="20220725 10:02:59.903"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:02:59.905" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:02:59.904" endtime="20220725 10:02:59.905"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:59.904" endtime="20220725 10:02:59.906"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:02:59.907" endtime="20220725 10:02:59.907"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:02:59.908" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:02:59.914" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:00.067" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:02:59.907" endtime="20220725 10:03:00.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:00.067" endtime="20220725 10:03:00.068"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:59.906" endtime="20220725 10:03:00.068"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:00.070" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:00.070" level="INFO">${TextFileContent} = SG9h+4TTIcnWcB34qbKq4vcKRGgpEifXtst9mWKI4z53wEKqk5je5hDwJgvQ2L2DhcgMzYJMTAdssc/vRSF9uZ+pdzZBDlNSl6ER/uZmzuPmpcNOXlo3RvgSLR/28mgda6Oh01NrndFudacDZ1ob5IjPwmn5DmrKs+8zhWr8f6fuJy+qgHxVNpc7ikBQ3zvCi6EJzchl...</msg>
<status status="PASS" starttime="20220725 10:03:00.069" endtime="20220725 10:03:00.070"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:00.071" level="INFO">${RESULT_ENCRYPT_DATA} = SG9h+4TTIcnWcB34qbKq4vcKRGgpEifXtst9mWKI4z53wEKqk5je5hDwJgvQ2L2DhcgMzYJMTAdssc/vRSF9uZ+pdzZBDlNSl6ER/uZmzuPmpcNOXlo3RvgSLR/28mgda6Oh01NrndFudacDZ1ob5IjPwmn5DmrKs+8zhWr8f6fuJy+qgHxVNpc7ikBQ3zvCi6EJzchl...</msg>
<status status="PASS" starttime="20220725 10:03:00.070" endtime="20220725 10:03:00.071"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:00.069" endtime="20220725 10:03:00.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:00.072" level="INFO">&amp;{body} = { data=SG9h+4TTIcnWcB34qbKq4vcKRGgpEifXtst9mWKI4z53wEKqk5je5hDwJgvQ2L2DhcgMzYJMTAdssc/vRSF9uZ+pdzZBDlNSl6ER/uZmzuPmpcNOXlo3RvgSLR/28mgda6Oh01NrndFudacDZ1ob5IjPwmn5DmrKs+8zhWr8f6fuJy+qgHxVNpc7ikBQ3zvCi...</msg>
<status status="PASS" starttime="20220725 10:03:00.072" endtime="20220725 10:03:00.072"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:00.960" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "SG9h+4TTIcnWcB34qbKq4vcKRGgpEifXtst9mWKI4z53wEKqk5je5hDwJgvQ2L2DhcgMzYJMTAdssc/vRSF9uZ+pdzZBDlNSl6ER/uZmzuPmpcNOXlo3RvgSLR/28mgda6Oh01NrndFudacDZ1ob5IjPwmn5DmrKs+8zhWr8f6fuJy+qgHxVNpc7ikBQ3zvCi6EJzchldqg97aDVuBAjUC7dHFEW5SQ0/yCUS3NAhIQoASz40j+4bK0MYe9uHwHwPxNELgN8oQbwPKox/aUEha8FN/gYUOx7kFmMyhDSmNLPZHfwS3NKTyilZziSrN1WrONZxpW3"}' 
 </msg>
<msg timestamp="20220725 10:03:00.960" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:00 GMT', 'x-amzn-RequestId': 'c1c917ee-de1b-4748-a5bb-24a2849bbcee', 'x-amz-apigw-id': 'VzYrrGL-SQ0FRag=', 'X-Amzn-Trace-Id': 'Root=1-62de07e4-02962e6a3b4c7c0428017dc5', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 e5571ff3cfd1f0e761a16a024c99c7f4.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'f49ZmyYDkQz2LoQBEu5pmrTp7RweYpDBEU_FEM5mreoQe8fyUE3TkQ=='} 
 body={"data":"hbU8yM5YOyfexRU6WsVas2b1/fALZZbyezQ6QmKpuEfxpRfTPKE54DK2fDRPFtj4DVpl273uCPcmQk6Vy70SNY4NryhJ86E3WWb0+Wzn2PKt/SSjznyUiWTZ/ZV0K4aTb7twWvQesijmR/QOoY/wuFmzmXDdzv/DivC3e7TqrqPQPmHFXNCagH5hfsXyqoktVPm77esyUrsyfCutV5cz+xnif9sxxYGy5AU5YaNEzXQJIoqbKiQ1RYnDoZBymtVuzacMM1n9ZklXTUTe+MtCuqG/7ss6/I8DJXbvMpduml8lkLDKNu3lJWepY7dCQ2Wv1I4TG0HNKZhmtsIFogESrYiokZ7tpzNqn3y9xt+71KmGiXe6SKNKemcWWGYiBnFXRHi8AY31"} 
 </msg>
<msg timestamp="20220725 10:03:00.960" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:00.960" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:00.072" endtime="20220725 10:03:00.960"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:00.961" level="INFO">${RESPONSE_ENCRYPT_TYPE} = hbU8yM5YOyfexRU6WsVas2b1/fALZZbyezQ6QmKpuEfxpRfTPKE54DK2fDRPFtj4DVpl273uCPcmQk6Vy70SNY4NryhJ86E3WWb0+Wzn2PKt/SSjznyUiWTZ/ZV0K4aTb7twWvQesijmR/QOoY/wuFmzmXDdzv/DivC3e7TqrqPQPmHFXNCagH5hfsXyqoktVPm77esy...</msg>
<status status="PASS" starttime="20220725 10:03:00.961" endtime="20220725 10:03:00.961"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:00.963" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text hbU8yM5YOyfexRU6WsVas2b1/fALZZbyezQ6QmKpuEfxpRfTPKE54DK2fDRPFtj4DVpl273uCPcmQk6Vy70SNY4NryhJ86E3WWb0+Wzn2PKt/SSjznyUiWTZ/ZV0K4aTb7twWvQesijmR/QOoY/wuFmzmXDdzv/DivC3e7TqrqPQPmHFXNCagH5hfsXyqoktVPm77esyUrsyfCutV5cz+xnif9sxxYGy5AU5YaNEzXQJIoqbKiQ1RYnDoZBymtVuzacMM1n9ZklXTUTe+MtCuqG/7ss6/I8DJXbvMpduml8lkLDKNu3lJWepY7dCQ2Wv1I4TG0HNKZhmtsIFogESrYiokZ7tpzNqn3y9xt+71KmGiXe6SKNKemcWWGYiBnFXRHi8AY31</msg>
<msg timestamp="20220725 10:03:00.969" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:01.154" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:00.962" endtime="20220725 10:03:01.155"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:01.156" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:01.155" endtime="20220725 10:03:01.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.157" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500023"}}</msg>
<status status="PASS" starttime="20220725 10:03:01.156" endtime="20220725 10:03:01.157"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.158" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:03:01.157" endtime="20220725 10:03:01.158"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:01.158" endtime="20220725 10:03:01.158"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:00.961" endtime="20220725 10:03:01.158"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:01.159" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:03:01.159" endtime="20220725 10:03:01.159"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.185" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:01.159" endtime="20220725 10:03:01.185"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.186" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:01.185" endtime="20220725 10:03:01.186"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.210" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:01.186" endtime="20220725 10:03:01.210"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.211" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:01.211" endtime="20220725 10:03:01.211"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.234" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:01.211" endtime="20220725 10:03:01.234"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.235" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:01.235" endtime="20220725 10:03:01.236"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.259" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:01.236" endtime="20220725 10:03:01.259"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.260" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:01.260" endtime="20220725 10:03:01.261"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.284" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:03:01.261" endtime="20220725 10:03:01.284"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.285" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:03:01.284" endtime="20220725 10:03:01.285"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.309" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:01.285" endtime="20220725 10:03:01.309"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.310" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:01.309" endtime="20220725 10:03:01.310"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.333" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:01.310" endtime="20220725 10:03:01.334"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.334" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:01.334" endtime="20220725 10:03:01.334"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.357" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:03:01.335" endtime="20220725 10:03:01.357"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.358" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:03:01.357" endtime="20220725 10:03:01.358"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:01.379" level="INFO">${values_code} = ['EQ2022072500023']</msg>
<status status="PASS" starttime="20220725 10:03:01.358" endtime="20220725 10:03:01.379"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.380" level="INFO">${TRANS_ID} = EQ2022072500023</msg>
<status status="PASS" starttime="20220725 10:03:01.379" endtime="20220725 10:03:01.380"></status>
</kw>
<status status="PASS" starttime="20220725 10:02:59.900" endtime="20220725 10:03:01.380"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:01.381" endtime="20220725 10:03:01.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.382" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:01.382" endtime="20220725 10:03:01.382"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.383" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:01.382" endtime="20220725 10:03:01.383"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.385" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:01.384" endtime="20220725 10:03:01.385"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:01.384" endtime="20220725 10:03:01.385"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:01.386" endtime="20220725 10:03:01.386"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:01.387" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:01.393" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:01.549" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:01.387" endtime="20220725 10:03:01.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:01.550" endtime="20220725 10:03:01.550"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:01.385" endtime="20220725 10:03:01.551"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:01.552" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:01.553" level="INFO">${TextFileContent} = PBocCalbhxV2xGdXhEQMMGkqyPqH48Z0R8cxJTN+lT1JxeO4cgU4rGY9hiskuUI1/5RuwcUXGIS6o+rUMi96dcyxep6e8tdKggmQhEtzs/1JNQ8=</msg>
<status status="PASS" starttime="20220725 10:03:01.552" endtime="20220725 10:03:01.553"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:01.554" level="INFO">${RESULT_ENCRYPT_DATA} = PBocCalbhxV2xGdXhEQMMGkqyPqH48Z0R8cxJTN+lT1JxeO4cgU4rGY9hiskuUI1/5RuwcUXGIS6o+rUMi96dcyxep6e8tdKggmQhEtzs/1JNQ8=</msg>
<status status="PASS" starttime="20220725 10:03:01.553" endtime="20220725 10:03:01.554"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:01.551" endtime="20220725 10:03:01.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:01.556" level="INFO">&amp;{body} = { data=PBocCalbhxV2xGdXhEQMMGkqyPqH48Z0R8cxJTN+lT1JxeO4cgU4rGY9hiskuUI1/5RuwcUXGIS6o+rUMi96dcyxep6e8tdKggmQhEtzs/1JNQ8= }</msg>
<status status="PASS" starttime="20220725 10:03:01.555" endtime="20220725 10:03:01.556"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:02.266" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "PBocCalbhxV2xGdXhEQMMGkqyPqH48Z0R8cxJTN+lT1JxeO4cgU4rGY9hiskuUI1/5RuwcUXGIS6o+rUMi96dcyxep6e8tdKggmQhEtzs/1JNQ8="}' 
 </msg>
<msg timestamp="20220725 10:03:02.267" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:02 GMT', 'x-amzn-RequestId': '36ff701f-5b27-4543-b2f2-a0284ea22bb9', 'x-amz-apigw-id': 'VzYr6EpgyQ0FgrA=', 'X-Amzn-Trace-Id': 'Root=1-62de07e5-54ce68c9153342210765e72f', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d1213591a98aaf070e22a40b4f832f80.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'oO_WxV87v6xxHQGTQZCGwKDbJ0HUfYL6y_wyiLOdz6y_H4FIUFjOWA=='} 
 body={"data":"yAVho1+2tY/Hrhhr174piKcrwc8vbHgDaBaMeTapp1pGxEHDAhBg0oouv3sCR8zZv+W2QzDq7qMwKrQED3yxD1VnBc4/MSWS8lA3Da7UwM7OGvGO5mBDsk2OBcwU8WoM6U6rhhjYz5se/Vag9vRIobzIndmvkHqvQFcmuAi8wg81/6/7kFmhInxGPD6ZYJeFrOOnXHQB7dTgRJ0f1yistk8D/M5YQEdZ5XdkP2E8MxOUynRMLd1Fm6p0ok/TtY3ZTZmsLNhiWPUB2DiXdNnexdA="} 
 </msg>
<msg timestamp="20220725 10:03:02.267" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:02.267" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:01.556" endtime="20220725 10:03:02.267"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.268" level="INFO">${RESPONSE_ENCRYPT_TYPE} = yAVho1+2tY/Hrhhr174piKcrwc8vbHgDaBaMeTapp1pGxEHDAhBg0oouv3sCR8zZv+W2QzDq7qMwKrQED3yxD1VnBc4/MSWS8lA3Da7UwM7OGvGO5mBDsk2OBcwU8WoM6U6rhhjYz5se/Vag9vRIobzIndmvkHqvQFcmuAi8wg81/6/7kFmhInxGPD6ZYJeFrOOnXHQB...</msg>
<status status="PASS" starttime="20220725 10:03:02.267" endtime="20220725 10:03:02.268"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:02.270" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text yAVho1+2tY/Hrhhr174piKcrwc8vbHgDaBaMeTapp1pGxEHDAhBg0oouv3sCR8zZv+W2QzDq7qMwKrQED3yxD1VnBc4/MSWS8lA3Da7UwM7OGvGO5mBDsk2OBcwU8WoM6U6rhhjYz5se/Vag9vRIobzIndmvkHqvQFcmuAi8wg81/6/7kFmhInxGPD6ZYJeFrOOnXHQB7dTgRJ0f1yistk8D/M5YQEdZ5XdkP2E8MxOUynRMLd1Fm6p0ok/TtY3ZTZmsLNhiWPUB2DiXdNnexdA=</msg>
<msg timestamp="20220725 10:03:02.275" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:02.432" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:02.269" endtime="20220725 10:03:02.433"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:02.434" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:02.433" endtime="20220725 10:03:02.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.435" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:02.435" endtime="20220725 10:03:02.435"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.436" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:02.435" endtime="20220725 10:03:02.436"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:02.436" endtime="20220725 10:03:02.437"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.269" endtime="20220725 10:03:02.437"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:02.437" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:03:02.437" endtime="20220725 10:03:02.437"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:02.462" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:02.438" endtime="20220725 10:03:02.462"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.463" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:02.462" endtime="20220725 10:03:02.463"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:01.380" endtime="20220725 10:03:02.463"></status>
</kw>
<kw name="Validate_customer_pass" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:02.464" endtime="20220725 10:03:02.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.465" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:02.465" endtime="20220725 10:03:02.465"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.465" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:02.465" endtime="20220725 10:03:02.466"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:02.467" endtime="20220725 10:03:02.775"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:03:02.777" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:03:02.776" endtime="20220725 10:03:02.777"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:03:02.777" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:03:02.777" endtime="20220725 10:03:02.777"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:03:02.778" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:03:02.777" endtime="20220725 10:03:02.778"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:03:02.778" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:03:02.778" endtime="20220725 10:03:02.778"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:03:02.779" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:03:02.779" endtime="20220725 10:03:02.779"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:03:02.780" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:03:02.779" endtime="20220725 10:03:02.780"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:03:02.780" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:03:02.780" endtime="20220725 10:03:02.780"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:03:02.781" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:03:02.781" endtime="20220725 10:03:02.781"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.781" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:03:02.781" endtime="20220725 10:03:02.782"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.782" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:03:02.782" endtime="20220725 10:03:02.782"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.783" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:03:02.783" endtime="20220725 10:03:02.783"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.784" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:03:02.783" endtime="20220725 10:03:02.784"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.784" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:03:02.784" endtime="20220725 10:03:02.784"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.785" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:03:02.784" endtime="20220725 10:03:02.785"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.786" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:03:02.785" endtime="20220725 10:03:02.786"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.786" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:03:02.786" endtime="20220725 10:03:02.786"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:02.786" endtime="20220725 10:03:02.787"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.466" endtime="20220725 10:03:02.787"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.789" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:02.788" endtime="20220725 10:03:02.789"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.787" endtime="20220725 10:03:02.789"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:02.790" endtime="20220725 10:03:02.790"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:02.791" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:02.797" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:02.975" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:02.790" endtime="20220725 10:03:02.976"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:02.977" endtime="20220725 10:03:02.977"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.789" endtime="20220725 10:03:02.977"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:02.980" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:02.981" level="INFO">${TextFileContent} = gjF+M5+3o0ZuaTwtWvH8REkwCkd8fW5lQHP/0WjpILVd/cvZXjDSVGaLUTpB9DrKDuLmh7AzwwGxzvfLJ8JrWs/tp6SkP2CfMr/vAE1YshvI91U5DIHG0qKSzTCMXOza2MmEGbpvUzQn7jPsCkxJZEG0fywX39g4YIdIZS+gnTSR6iUQRs1AwpTL3TFCUqTpe9zQAoWc...</msg>
<status status="PASS" starttime="20220725 10:03:02.979" endtime="20220725 10:03:02.981"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:02.983" level="INFO">${RESULT_ENCRYPT_DATA} = gjF+M5+3o0ZuaTwtWvH8REkwCkd8fW5lQHP/0WjpILVd/cvZXjDSVGaLUTpB9DrKDuLmh7AzwwGxzvfLJ8JrWs/tp6SkP2CfMr/vAE1YshvI91U5DIHG0qKSzTCMXOza2MmEGbpvUzQn7jPsCkxJZEG0fywX39g4YIdIZS+gnTSR6iUQRs1AwpTL3TFCUqTpe9zQAoWc...</msg>
<status status="PASS" starttime="20220725 10:03:02.982" endtime="20220725 10:03:02.983"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.978" endtime="20220725 10:03:02.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:02.984" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:02.985" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:02.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:02.987" level="INFO">${body} = {'data': 'gjF+M5+3o0ZuaTwtWvH8REkwCkd8fW5lQHP/0WjpILVd/cvZXjDSVGaLUTpB9DrKDuLmh7AzwwGxzvfLJ8JrWs/tp6SkP2CfMr/vAE1YshvI91U5DIHG0qKSzTCMXOza2MmEGbpvUzQn7jPsCkxJZEG0fywX39g4YIdIZS+gnTSR6iUQRs1AwpTL3TFCUq...</msg>
<status status="PASS" starttime="20220725 10:03:02.984" endtime="20220725 10:03:02.987"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:05.069" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:05.070" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:05 GMT', 'x-amzn-RequestId': '09f237a4-dc4e-4ff6-ab89-2a5025cbe680', 'x-amz-apigw-id': 'VzYsJF3yyQ0FRtg=', 'X-Amzn-Trace-Id': 'Root=1-62de07e7-6c3e9d03629e51b162ac03d7', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 061148a0ea305f6199bba8f216e438f4.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'hcr9L-cINMlF_-l7WBTsavJK1b4tvlsyG98BfDSvQDC1t12iLSH4-g=='} 
 body={"data":"XGAUd3WrfH2BRlbN6ocubYOe9Wux8E1683oo7F9NmxnbQUpgIdC09hOvsUnBDJwEDzJCr7rfX67cOfaClgihdgrn13LstzOzDdzmgyw8lBPv9RO9omxgj/UCM3jdbsk4EBbrozR8yHJI7PQRC5KFuRZlaaDvMMCxxhNSnmhwEV5KtMFEhMR6YHXHCSaXq91fw4uUska/0ttKbd0A7i9vTw15vRySN9KzRx6txXj1k7K1nClCMag8nX4BcvwIjOZL0tWEOF42elBWQmJ5hR2fzUF2QS1DeEWezWq49f12+AGNiz40EGTDJdLCCbxREWHm7BXmAcNtYTSUvjoKussTwwIw/m4idg=="} 
 </msg>
<msg timestamp="20220725 10:03:05.070" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:05.070" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:02.987" endtime="20220725 10:03:05.070"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.072" level="INFO">${RESPONSE_ENCRYPT_TYPE} = XGAUd3WrfH2BRlbN6ocubYOe9Wux8E1683oo7F9NmxnbQUpgIdC09hOvsUnBDJwEDzJCr7rfX67cOfaClgihdgrn13LstzOzDdzmgyw8lBPv9RO9omxgj/UCM3jdbsk4EBbrozR8yHJI7PQRC5KFuRZlaaDvMMCxxhNSnmhwEV5KtMFEhMR6YHXHCSaXq91fw4uUska/...</msg>
<status status="PASS" starttime="20220725 10:03:05.071" endtime="20220725 10:03:05.072"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:05.075" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text XGAUd3WrfH2BRlbN6ocubYOe9Wux8E1683oo7F9NmxnbQUpgIdC09hOvsUnBDJwEDzJCr7rfX67cOfaClgihdgrn13LstzOzDdzmgyw8lBPv9RO9omxgj/UCM3jdbsk4EBbrozR8yHJI7PQRC5KFuRZlaaDvMMCxxhNSnmhwEV5KtMFEhMR6YHXHCSaXq91fw4uUska/0ttKbd0A7i9vTw15vRySN9KzRx6txXj1k7K1nClCMag8nX4BcvwIjOZL0tWEOF42elBWQmJ5hR2fzUF2QS1DeEWezWq49f12+AGNiz40EGTDJdLCCbxREWHm7BXmAcNtYTSUvjoKussTwwIw/m4idg==</msg>
<msg timestamp="20220725 10:03:05.083" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:05.231" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:05.073" endtime="20220725 10:03:05.231"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:05.233" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:05.232" endtime="20220725 10:03:05.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.234" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220725 10:03:05.234" endtime="20220725 10:03:05.235"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.236" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220725 10:03:05.235" endtime="20220725 10:03:05.236"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:05.236" endtime="20220725 10:03:05.237"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.072" endtime="20220725 10:03:05.237"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:05.238" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0875787441', 'consent...</msg>
<status status="PASS" starttime="20220725 10:03:05.237" endtime="20220725 10:03:05.238"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..consent_new_version</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:05.265" level="INFO">${values_code} = [True]</msg>
<status status="PASS" starttime="20220725 10:03:05.238" endtime="20220725 10:03:05.265"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_NEW_VERSION}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.266" level="INFO">${CONSENT_NEW_VERSION} = True</msg>
<status status="PASS" starttime="20220725 10:03:05.266" endtime="20220725 10:03:05.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONSENT_NEW_VERSION}' == 'True'</arg>
<arg>Get_Consent_API_page.Agree_Consent</arg>
</arguments>
<kw name="Agree_Consent" library="Get_Consent_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:05.268" endtime="20220725 10:03:05.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.269" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:05.268" endtime="20220725 10:03:05.269"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.269" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:05.269" endtime="20220725 10:03:05.270"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.272" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:05.271" endtime="20220725 10:03:05.272"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.270" endtime="20220725 10:03:05.272"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:05.273" endtime="20220725 10:03:05.274"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:05.275" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:05.281" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:05.435" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:05.274" endtime="20220725 10:03:05.435"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:05.436" endtime="20220725 10:03:05.436"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.273" endtime="20220725 10:03:05.437"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:05.439" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:05.439" level="INFO">${TextFileContent} = J2nKLpBKWR6O/cqlE6BZzE9J+QTvLIKZ57DFpWcxV29DD/8hN3GlRNdh4zTUT/y4bHY/7NlucJpUAz9vqwc4hkFpe3s+K44QjL29nWJ2KtdhWho=</msg>
<status status="PASS" starttime="20220725 10:03:05.438" endtime="20220725 10:03:05.439"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:05.440" level="INFO">${RESULT_ENCRYPT_DATA} = J2nKLpBKWR6O/cqlE6BZzE9J+QTvLIKZ57DFpWcxV29DD/8hN3GlRNdh4zTUT/y4bHY/7NlucJpUAz9vqwc4hkFpe3s+K44QjL29nWJ2KtdhWho=</msg>
<status status="PASS" starttime="20220725 10:03:05.439" endtime="20220725 10:03:05.441"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.437" endtime="20220725 10:03:05.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:05.441" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:05.442" level="INFO">To JSON using : content={"data": "J2nKLpBKWR6O/cqlE6BZzE9J+QTvLIKZ57DFpWcxV29DD/8hN3GlRNdh4zTUT/y4bHY/7NlucJpUAz9vqwc4hkFpe3s+K44QjL29nWJ2KtdhWho="} </msg>
<msg timestamp="20220725 10:03:05.442" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:05.442" level="INFO">${body} = {'data': 'J2nKLpBKWR6O/cqlE6BZzE9J+QTvLIKZ57DFpWcxV29DD/8hN3GlRNdh4zTUT/y4bHY/7NlucJpUAz9vqwc4hkFpe3s+K44QjL29nWJ2KtdhWho='}</msg>
<status status="PASS" starttime="20220725 10:03:05.441" endtime="20220725 10:03:05.442"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_CONSENT}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:06.342" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 path_url=/tcrb-platform-kyc/v1/consent 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "J2nKLpBKWR6O/cqlE6BZzE9J+QTvLIKZ57DFpWcxV29DD/8hN3GlRNdh4zTUT/y4bHY/7NlucJpUAz9vqwc4hkFpe3s+K44QjL29nWJ2KtdhWho="}' 
 </msg>
<msg timestamp="20220725 10:03:06.342" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/consent 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:06 GMT', 'x-amzn-RequestId': '0f8cdcba-696c-4337-bce0-70c924107553', 'x-amz-apigw-id': 'VzYsgHKhyQ0FWZg=', 'X-Amzn-Trace-Id': 'Root=1-62de07e9-7f773a3d61820e717bc09fe2', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 061148a0ea305f6199bba8f216e438f4.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'kvoQvfPTctVcOwa0IcYHK4wjLKmBXJMFUCFsGWhOroYpgIZH-3MCGQ=='} 
 body={"data":"JPoDfrT0+JbPOfXM3Sh5YPkI6gkx1805x49ASgIhH+NPNcfopgiJi3W9e64xvlHFS3GHdWUud9G7qH3dl8lZori8y/ohdDmIZIWHzoc9bI2wunIyqRcrKz5F7+BPdrAiI1slOc3AvtMIhmJRW1REcLnM+koba3oBMGTyEcprnaTGonaTIunC5GF4Yss3sPsCVM46kINKeMpJA1irQNSHXPWoPQj5FNMdj9ZOfU3ok3sRBpP13Y5d+O51sd3Vuo/qR/rFTkeiekw7gI6+NfpTT54="} 
 </msg>
<msg timestamp="20220725 10:03:06.343" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:06.343" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:05.443" endtime="20220725 10:03:06.343"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.344" level="INFO">${RESPONSE_ENCRYPT_TYPE} = JPoDfrT0+JbPOfXM3Sh5YPkI6gkx1805x49ASgIhH+NPNcfopgiJi3W9e64xvlHFS3GHdWUud9G7qH3dl8lZori8y/ohdDmIZIWHzoc9bI2wunIyqRcrKz5F7+BPdrAiI1slOc3AvtMIhmJRW1REcLnM+koba3oBMGTyEcprnaTGonaTIunC5GF4Yss3sPsCVM46kINK...</msg>
<status status="PASS" starttime="20220725 10:03:06.343" endtime="20220725 10:03:06.344"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:06.346" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text JPoDfrT0+JbPOfXM3Sh5YPkI6gkx1805x49ASgIhH+NPNcfopgiJi3W9e64xvlHFS3GHdWUud9G7qH3dl8lZori8y/ohdDmIZIWHzoc9bI2wunIyqRcrKz5F7+BPdrAiI1slOc3AvtMIhmJRW1REcLnM+koba3oBMGTyEcprnaTGonaTIunC5GF4Yss3sPsCVM46kINKeMpJA1irQNSHXPWoPQj5FNMdj9ZOfU3ok3sRBpP13Y5d+O51sd3Vuo/qR/rFTkeiekw7gI6+NfpTT54=</msg>
<msg timestamp="20220725 10:03:06.352" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:06.502" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:06.345" endtime="20220725 10:03:06.502"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:06.504" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:06.503" endtime="20220725 10:03:06.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.505" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:06.504" endtime="20220725 10:03:06.506"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.506" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:06.506" endtime="20220725 10:03:06.506"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:06.507" endtime="20220725 10:03:06.507"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:06.344" endtime="20220725 10:03:06.507"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:06.508" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:03:06.507" endtime="20220725 10:03:06.508"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:06.534" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:06.508" endtime="20220725 10:03:06.534"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${CONSENT_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.535" level="INFO">${CONSENT_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:06.534" endtime="20220725 10:03:06.535"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.267" endtime="20220725 10:03:06.535"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:05.267" endtime="20220725 10:03:06.535"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:02.463" endtime="20220725 10:03:06.535"></status>
</kw>
<kw name="Check_DOPA" library="Check_DOPA_API_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:06.536" endtime="20220725 10:03:06.537"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.537" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:06.537" endtime="20220725 10:03:06.537"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.538" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:06.538" endtime="20220725 10:03:06.539"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"kyc_trans_id":"${TRANS_ID}","laser":"${GET_LASER_CODE}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.541" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:06.540" endtime="20220725 10:03:06.541"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:06.539" endtime="20220725 10:03:06.541"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:06.542" endtime="20220725 10:03:06.542"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:06.544" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:06.549" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:06.701" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:06.543" endtime="20220725 10:03:06.702"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:06.703" endtime="20220725 10:03:06.703"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:06.542" endtime="20220725 10:03:06.703"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:06.705" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:06.705" level="INFO">${TextFileContent} = 7pmtFW8jJDymd6HnqXD49OgQaZgP+9n1upkI2KnFob+3arRWTuGWGOO7pmziuVm6jSShLg0vC/RKumNbosy16Ck7IVL5Nib64n1G/HczDJQZtzOfmw==</msg>
<status status="PASS" starttime="20220725 10:03:06.705" endtime="20220725 10:03:06.705"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:06.707" level="INFO">${RESULT_ENCRYPT_DATA} = 7pmtFW8jJDymd6HnqXD49OgQaZgP+9n1upkI2KnFob+3arRWTuGWGOO7pmziuVm6jSShLg0vC/RKumNbosy16Ck7IVL5Nib64n1G/HczDJQZtzOfmw==</msg>
<status status="PASS" starttime="20220725 10:03:06.706" endtime="20220725 10:03:06.707"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:06.704" endtime="20220725 10:03:06.707"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:06.707" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:06.708" level="INFO">To JSON using : content={"data": "7pmtFW8jJDymd6HnqXD49OgQaZgP+9n1upkI2KnFob+3arRWTuGWGOO7pmziuVm6jSShLg0vC/RKumNbosy16Ck7IVL5Nib64n1G/HczDJQZtzOfmw=="} </msg>
<msg timestamp="20220725 10:03:06.708" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:06.708" level="INFO">${body} = {'data': '7pmtFW8jJDymd6HnqXD49OgQaZgP+9n1upkI2KnFob+3arRWTuGWGOO7pmziuVm6jSShLg0vC/RKumNbosy16Ck7IVL5Nib64n1G/HczDJQZtzOfmw=='}</msg>
<status status="PASS" starttime="20220725 10:03:06.707" endtime="20220725 10:03:06.708"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_CHECK_DOPA}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:10.194" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 path_url=/tcrb-platform-kyc/v1/dopa 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '128', 'Content-Type': 'application/json'} 
 body=b'{"data": "7pmtFW8jJDymd6HnqXD49OgQaZgP+9n1upkI2KnFob+3arRWTuGWGOO7pmziuVm6jSShLg0vC/RKumNbosy16Ck7IVL5Nib64n1G/HczDJQZtzOfmw=="}' 
 </msg>
<msg timestamp="20220725 10:03:10.194" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/dopa 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '415', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:10 GMT', 'x-amzn-RequestId': '4fa7e616-9c0d-4b14-a788-b85b8acf4250', 'x-amz-apigw-id': 'VzYstEf5yQ0FdwA=', 'X-Amzn-Trace-Id': 'Root=1-62de07ea-4196e642337566590973cecf', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 cec06ea4816324cb747f713ba5733e00.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '4185HrX3f-TgN4JI0i0UhULnodmGcFJhW7sfkmf1ofIXlL6PrRFMBA=='} 
 body={"data":"GNZ7m5Wctmi6aPUz821WLbTpThnPulZgEAEEf34AvBnVgZb2yhqO5gvcE7Ha8obpo5vAmJiY+vmLwvoN4X5rValsN/VuT2Te1vgrMhy1ieo6ZNsQrWvEZ8+OzGB6KLzRLClVcOUsNNgyiadQQCPRC1exU2o/cgAQU8eqBUwH81AjgJB7t4JzpJnC2tXetjo/4czQ8rSwDBZUUybIsI3+Bgmg0U58PWO7QS1j550LcCRiZTGrtEPvxNJvwHWngv1Vmyc9SOVnc0kh3UL+bw7MgZ3gBFvdcClsukaV/xqSTSOTrliFuBKvxa3EZUTtSJvRxl1L9i67ZqpuJ+LG0CbMMCguEmJnSHVoQ5cdsn8XGVIYbG+jW5NzNWcFDrreAxNQFRmTSI4/rFtzbHO7A44="} 
 </msg>
<msg timestamp="20220725 10:03:10.194" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:10.195" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:06.709" endtime="20220725 10:03:10.195"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.196" level="INFO">${RESPONSE_ENCRYPT_TYPE} = GNZ7m5Wctmi6aPUz821WLbTpThnPulZgEAEEf34AvBnVgZb2yhqO5gvcE7Ha8obpo5vAmJiY+vmLwvoN4X5rValsN/VuT2Te1vgrMhy1ieo6ZNsQrWvEZ8+OzGB6KLzRLClVcOUsNNgyiadQQCPRC1exU2o/cgAQU8eqBUwH81AjgJB7t4JzpJnC2tXetjo/4czQ8rSw...</msg>
<status status="PASS" starttime="20220725 10:03:10.195" endtime="20220725 10:03:10.197"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:10.199" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text GNZ7m5Wctmi6aPUz821WLbTpThnPulZgEAEEf34AvBnVgZb2yhqO5gvcE7Ha8obpo5vAmJiY+vmLwvoN4X5rValsN/VuT2Te1vgrMhy1ieo6ZNsQrWvEZ8+OzGB6KLzRLClVcOUsNNgyiadQQCPRC1exU2o/cgAQU8eqBUwH81AjgJB7t4JzpJnC2tXetjo/4czQ8rSwDBZUUybIsI3+Bgmg0U58PWO7QS1j550LcCRiZTGrtEPvxNJvwHWngv1Vmyc9SOVnc0kh3UL+bw7MgZ3gBFvdcClsukaV/xqSTSOTrliFuBKvxa3EZUTtSJvRxl1L9i67ZqpuJ+LG0CbMMCguEmJnSHVoQ5cdsn8XGVIYbG+jW5NzNWcFDrreAxNQFRmTSI4/rFtzbHO7A44=</msg>
<msg timestamp="20220725 10:03:10.205" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:10.357" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:10.198" endtime="20220725 10:03:10.358"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:10.359" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:10.358" endtime="20220725 10:03:10.359"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.359" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072500023","dopa_status":"0","dopa_message":"สถานะปกติ"}}</msg>
<status status="PASS" starttime="20220725 10:03:10.359" endtime="20220725 10:03:10.360"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.360" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"kyc_trans_id":"EQ2022072500023","dopa_status":"0","d...</msg>
<status status="PASS" starttime="20220725 10:03:10.360" endtime="20220725 10:03:10.360"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:10.361" endtime="20220725 10:03:10.361"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.197" endtime="20220725 10:03:10.361"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:10.362" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'kyc_trans_id': 'EQ2022072500023', 'dop...</msg>
<status status="PASS" starttime="20220725 10:03:10.361" endtime="20220725 10:03:10.362"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:10.385" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:10.362" endtime="20220725 10:03:10.385"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.386" level="INFO">${DOPA_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:10.385" endtime="20220725 10:03:10.386"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:10.410" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:10.386" endtime="20220725 10:03:10.410"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.411" level="INFO">${DOPA_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:10.410" endtime="20220725 10:03:10.411"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:10.433" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:10.411" endtime="20220725 10:03:10.433"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DOPA_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.434" level="INFO">${DOPA_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:10.433" endtime="20220725 10:03:10.434"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:10.458" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:10.435" endtime="20220725 10:03:10.458"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.459" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:10.458" endtime="20220725 10:03:10.459"></status>
</kw>
<kw name="Retry_if_dopa_offline" library="Check_DOPA_API_page">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DOPA_RESPONSE_CODE}' == '1004'</arg>
<arg>Check_DOPA</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:10.459" endtime="20220725 10:03:10.459"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.459" endtime="20220725 10:03:10.460"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:06.536" endtime="20220725 10:03:10.460"></status>
</kw>
<kw name="Face_Rec_fail" library="Facial_RecognitionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:10.461" endtime="20220725 10:03:10.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.462" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:10.462" endtime="20220725 10:03:10.462"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.462" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:10.462" endtime="20220725 10:03:10.463"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${FACEREC_FAIL}","kyc_trans_id" : "${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.465" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:10.464" endtime="20220725 10:03:10.465"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.463" endtime="20220725 10:03:10.465"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:10.466" endtime="20220725 10:03:10.466"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:10.468" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220725 10:03:10.473" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:10.659" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:10.467" endtime="20220725 10:03:10.659"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:10.660" endtime="20220725 10:03:10.660"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.465" endtime="20220725 10:03:10.661"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:10.662" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:10.664" level="INFO">${TextFileContent} = 6GP20B9dFZmp7Wqa4VHkjQJL4nNI4+SCs6KGl3VbkxnB4KOLaskxQhpbpa/7EmkyXFS/FG0yi4qG3c76PDsnOmTHcQsfDhXXYUL0bBqPP+7GXaDkYEPw/j175W83kBBNSwzB2Vi2RaDeoz0jkgM7b+4vOubiwa5gyEjlknNKptkcvf7p7viRZ4HWImt3OEgYzU2NPYoS...</msg>
<status status="PASS" starttime="20220725 10:03:10.662" endtime="20220725 10:03:10.664"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:10.665" level="INFO">${RESULT_ENCRYPT_DATA} = 6GP20B9dFZmp7Wqa4VHkjQJL4nNI4+SCs6KGl3VbkxnB4KOLaskxQhpbpa/7EmkyXFS/FG0yi4qG3c76PDsnOmTHcQsfDhXXYUL0bBqPP+7GXaDkYEPw/j175W83kBBNSwzB2Vi2RaDeoz0jkgM7b+4vOubiwa5gyEjlknNKptkcvf7p7viRZ4HWImt3OEgYzU2NPYoS...</msg>
<status status="PASS" starttime="20220725 10:03:10.664" endtime="20220725 10:03:10.666"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.661" endtime="20220725 10:03:10.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:10.667" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:10.669" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:10.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:10.671" level="INFO">${body} = {'data': '6GP20B9dFZmp7Wqa4VHkjQJL4nNI4+SCs6KGl3VbkxnB4KOLaskxQhpbpa/7EmkyXFS/FG0yi4qG3c76PDsnOmTHcQsfDhXXYUL0bBqPP+7GXaDkYEPw/j175W83kBBNSwzB2Vi2RaDeoz0jkgM7b+4vOubiwa5gyEjlknNKptkcvf7p7viRZ4HWImt3OE...</msg>
<status status="PASS" starttime="20220725 10:03:10.667" endtime="20220725 10:03:10.671"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220725 10:03:17.411" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '103148', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:17.412" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '655', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:17 GMT', 'x-amzn-RequestId': '2e15f5c4-83c4-4a08-9272-67305c724f03', 'x-amz-apigw-id': 'VzYtVG9_SQ0FZlg=', 'X-Amzn-Trace-Id': 'Root=1-62de07ee-3533f8b514340e917ef4ccff', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 218f4cb21f8bb515531930bd18f9dfee.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'pqtX_bFkkqfolANHFpA7RZGVu4qmVi54TV9lh5TT7rX81rU_1bGR_A=='} 
 body={"data":"lFxTzw1K5hD70vyDIiwXoD+a7eGDm5d9aEq2D+OQ7nxgHX6ZSAXQT7OPFOVGRlrN9tCXUoEA1J6KDOKXTDpasUjb/qTigGU1xBU96tcqScueo/GKkPfHdd+ERdLDtzn97wNkeFI11wgT06hzKjPJFbho5m5ueSpe38TAvi27V3unNnZT41H+I5WHSK/HV6CHdXy2Mrh/sfcEM//FwcHi2eVTFITy8+Z57enmRCFv+DV0MCl/5iRZE8muQn41clO0j5QRCTtqbPBQiJNLn8H8t/wrBhMeBRMegMfXDQcpUH4nk4dQydSulWfRwpQZdtzfBh23IO7VkU85CbQGufmeEzFlKYmOSnxOxBVvOzQyaptD2N59SvamyGJLSGV+KuJrbOQW87XIbFV7+n60T5++0z2kdyYSHsb+Sr+CNwuN8czHc0jWeIqyuOE400gyDpP31S/rnw7xqVz2rPmuwPPbCQCGLQ50akSpQ2WGPoz7eHCeHFTxr9GSkVu/hHjO6UTNSu4yudWFP5id2yvgC3KRcV+7f4xtbJew65DIzxRNFopaW/YonauPgWh9EBaWJZTlB6zH4DefIbK5/5p1R8sGbwBCDP8cLerbgCofm8JYA99AuKxCBZYqigYNx28Q5w0ce4pH"} 
 </msg>
<msg timestamp="20220725 10:03:17.412" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:17.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:10.671" endtime="20220725 10:03:17.412"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>response=${resp}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:17.412" endtime="20220725 10:03:17.413"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.414" level="INFO">${RESPONSE_ENCRYPT_TYPE} = lFxTzw1K5hD70vyDIiwXoD+a7eGDm5d9aEq2D+OQ7nxgHX6ZSAXQT7OPFOVGRlrN9tCXUoEA1J6KDOKXTDpasUjb/qTigGU1xBU96tcqScueo/GKkPfHdd+ERdLDtzn97wNkeFI11wgT06hzKjPJFbho5m5ueSpe38TAvi27V3unNnZT41H+I5WHSK/HV6CHdXy2Mrh/...</msg>
<status status="PASS" starttime="20220725 10:03:17.414" endtime="20220725 10:03:17.415"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:17.417" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text lFxTzw1K5hD70vyDIiwXoD+a7eGDm5d9aEq2D+OQ7nxgHX6ZSAXQT7OPFOVGRlrN9tCXUoEA1J6KDOKXTDpasUjb/qTigGU1xBU96tcqScueo/GKkPfHdd+ERdLDtzn97wNkeFI11wgT06hzKjPJFbho5m5ueSpe38TAvi27V3unNnZT41H+I5WHSK/HV6CHdXy2Mrh/sfcEM//FwcHi2eVTFITy8+Z57enmRCFv+DV0MCl/5iRZE8muQn41clO0j5QRCTtqbPBQiJNLn8H8t/wrBhMeBRMegMfXDQcpUH4nk4dQydSulWfRwpQZdtzfBh23IO7VkU85CbQGufmeEzFlKYmOSnxOxBVvOzQyaptD2N59SvamyGJLSGV+KuJrbOQW87XIbFV7+n60T5++0z2kdyYSHsb+Sr+CNwuN8czHc0jWeIqyuOE400gyDpP31S/rnw7xqVz2rPmuwPPbCQCGLQ50akSpQ2WGPoz7eHCeHFTxr9GSkVu/hHjO6UTNSu4yudWFP5id2yvgC3KRcV+7f4xtbJew65DIzxRNFopaW/YonauPgWh9EBaWJZTlB6zH4DefIbK5/5p1R8sGbwBCDP8cLerbgCofm8JYA99AuKxCBZYqigYNx28Q5w0ce4pH</msg>
<msg timestamp="20220725 10:03:17.424" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:17.579" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:17.416" endtime="20220725 10:03:17.579"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:17.581" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:17.580" endtime="20220725 10:03:17.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.581" level="INFO">{"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน ภาพที่ถ่ายจากอุปกรณ์ไม่ตรงกับภาพในระบบ"},"data":{"score":12.31,"description":"","status":"success","responseCode":"000000"}}</msg>
<status status="PASS" starttime="20220725 10:03:17.581" endtime="20220725 10:03:17.581"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.583" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน...</msg>
<status status="PASS" starttime="20220725 10:03:17.582" endtime="20220725 10:03:17.583"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:17.583" endtime="20220725 10:03:17.583"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:17.415" endtime="20220725 10:03:17.584"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:17.585" level="INFO">${convert_result} = {'status': {'code': '2011', 'message': 'Face Match Failed', 'remark': '12.31', 'user_code': 'E0031', 'user_message_en': 'The photo is not matched with the system.', 'user_message_th': 'การเปรียบเทียบใ...</msg>
<status status="PASS" starttime="20220725 10:03:17.584" endtime="20220725 10:03:17.585"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:17.651" level="INFO">${values_code} = ['12.31']</msg>
<status status="PASS" starttime="20220725 10:03:17.585" endtime="20220725 10:03:17.651"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.652" level="INFO">${MESS_STATUS} = 12.31</msg>
<status status="PASS" starttime="20220725 10:03:17.651" endtime="20220725 10:03:17.652"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:17.675" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:17.652" endtime="20220725 10:03:17.676"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FR_RETURN_MESSAGE_FAIL}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.680" level="INFO">${FR_RETURN_MESSAGE_FAIL} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:17.676" endtime="20220725 10:03:17.680"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:17.703" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:17.680" endtime="20220725 10:03:17.703"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.704" level="INFO">${LN_FR_RESPONE_MESSAGE} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:17.703" endtime="20220725 10:03:17.704"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:10.460" endtime="20220725 10:03:17.704"></status>
</kw>
<kw name="Face_Rec_fail" library="Facial_RecognitionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:17.705" endtime="20220725 10:03:17.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.706" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:17.706" endtime="20220725 10:03:17.706"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.707" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:17.707" endtime="20220725 10:03:17.708"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${FACEREC_FAIL}","kyc_trans_id" : "${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.710" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:17.709" endtime="20220725 10:03:17.710"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:17.708" endtime="20220725 10:03:17.710"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:17.711" endtime="20220725 10:03:17.712"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:17.714" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220725 10:03:17.720" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:17.900" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:17.712" endtime="20220725 10:03:17.900"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:17.901" endtime="20220725 10:03:17.901"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:17.711" endtime="20220725 10:03:17.902"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:17.903" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:17.904" level="INFO">${TextFileContent} = DsUqYhnnr35sTt3MkjhA+jZ4fF/mWCMsOuCcgPJSC9BLBuEOoxrLNeRarYF7JE68EWtdFyiy4CZ2ljfaTkEpwhqduibCBIL9VjOdJzovRAY8ACl3HhLmPm6hzV9F4wFjU/43Q7kDt2in49iDJA2mQhINZPFGuQ/XmxYRsPkUwB60p1c0C0mkm3s4yVNe/BGnEFWNIcs1...</msg>
<status status="PASS" starttime="20220725 10:03:17.903" endtime="20220725 10:03:17.904"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:17.906" level="INFO">${RESULT_ENCRYPT_DATA} = DsUqYhnnr35sTt3MkjhA+jZ4fF/mWCMsOuCcgPJSC9BLBuEOoxrLNeRarYF7JE68EWtdFyiy4CZ2ljfaTkEpwhqduibCBIL9VjOdJzovRAY8ACl3HhLmPm6hzV9F4wFjU/43Q7kDt2in49iDJA2mQhINZPFGuQ/XmxYRsPkUwB60p1c0C0mkm3s4yVNe/BGnEFWNIcs1...</msg>
<status status="PASS" starttime="20220725 10:03:17.905" endtime="20220725 10:03:17.906"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:17.902" endtime="20220725 10:03:17.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:17.907" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:17.909" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:17.910" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:17.911" level="INFO">${body} = {'data': 'DsUqYhnnr35sTt3MkjhA+jZ4fF/mWCMsOuCcgPJSC9BLBuEOoxrLNeRarYF7JE68EWtdFyiy4CZ2ljfaTkEpwhqduibCBIL9VjOdJzovRAY8ACl3HhLmPm6hzV9F4wFjU/43Q7kDt2in49iDJA2mQhINZPFGuQ/XmxYRsPkUwB60p1c0C0mkm3s4yVNe/B...</msg>
<status status="PASS" starttime="20220725 10:03:17.906" endtime="20220725 10:03:17.911"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220725 10:03:23.102" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '103148', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:23.102" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '655', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:23 GMT', 'x-amzn-RequestId': '7f8213d2-a59b-45fa-8b13-125de5b86c1c', 'x-amz-apigw-id': 'VzYudFZ2SQ0FlTw=', 'X-Amzn-Trace-Id': 'Root=1-62de07f5-36914eab6b336a1d7db14875', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 9b0031bf7587362e4b824035156bfd7e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '8YViwYlIT9hCAqS7GEl1UIgSpvKrme2vxPesiGB4r3ndRZ-4tybBqw=='} 
 body={"data":"6TnlgLcVEbKewlXd6ABqvwhhp09BuxG0alaTKHzCrBAGGEJUVTqBF6oo4aDeJ7t2JTNG8j7VgZygzQzTtcSzPGvF2TBvSbZ+zDYNNzkB7omLc6nm9QAUxNXAycno6DrNSQW9fwKYn/Gyaj2CSOvY61mUUVFvYsdAnlttSaTXHK0IyTnN+qcbg5hW5uHfneAgrqiO81pFccBTp06Nzeg2N1OQZ3JvM25SxKvl1C8ydvAtIRTv2p8tkoHcXkb7nBs/NSbNDah3oUXYefyb493WgFmb+lWmDIGQFKQ1NBECOC4RFLwLx17IFib46rxM12ReFYxcF5jYU7FhuhrVONQj3YgZD+eK5UD/k2kuoLi9wP5/z5R+H7XLxbONq3NJXSBbVi2ouVQvA42O588vjQjLOVNRk8N+Jo31w+c0fo3E058QajUKGIIYJeI4TaocBSCewJuXGwekU6cCQNxgMpCAeVFyIuCgCaN1yqFpRljIB+PV7kTdWa+cJ0h72CvGa+wm1Ia8NPFZTxKC+cAxAAEUVFfD+isUnn0M5zQoYMs3/EIdbDdi2+xO0BuEXqYbHNVO4uUovigrEudEoIdDqbARqXlWtLUBhAfZsfI1iXTXrRih7ESFE00kt5qdxLpLA7FFTdKz"} 
 </msg>
<msg timestamp="20220725 10:03:23.102" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:23.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:17.911" endtime="20220725 10:03:23.103"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>response=${resp}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:23.103" endtime="20220725 10:03:23.104"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.105" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 6TnlgLcVEbKewlXd6ABqvwhhp09BuxG0alaTKHzCrBAGGEJUVTqBF6oo4aDeJ7t2JTNG8j7VgZygzQzTtcSzPGvF2TBvSbZ+zDYNNzkB7omLc6nm9QAUxNXAycno6DrNSQW9fwKYn/Gyaj2CSOvY61mUUVFvYsdAnlttSaTXHK0IyTnN+qcbg5hW5uHfneAgrqiO81pF...</msg>
<status status="PASS" starttime="20220725 10:03:23.104" endtime="20220725 10:03:23.105"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:23.107" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 6TnlgLcVEbKewlXd6ABqvwhhp09BuxG0alaTKHzCrBAGGEJUVTqBF6oo4aDeJ7t2JTNG8j7VgZygzQzTtcSzPGvF2TBvSbZ+zDYNNzkB7omLc6nm9QAUxNXAycno6DrNSQW9fwKYn/Gyaj2CSOvY61mUUVFvYsdAnlttSaTXHK0IyTnN+qcbg5hW5uHfneAgrqiO81pFccBTp06Nzeg2N1OQZ3JvM25SxKvl1C8ydvAtIRTv2p8tkoHcXkb7nBs/NSbNDah3oUXYefyb493WgFmb+lWmDIGQFKQ1NBECOC4RFLwLx17IFib46rxM12ReFYxcF5jYU7FhuhrVONQj3YgZD+eK5UD/k2kuoLi9wP5/z5R+H7XLxbONq3NJXSBbVi2ouVQvA42O588vjQjLOVNRk8N+Jo31w+c0fo3E058QajUKGIIYJeI4TaocBSCewJuXGwekU6cCQNxgMpCAeVFyIuCgCaN1yqFpRljIB+PV7kTdWa+cJ0h72CvGa+wm1Ia8NPFZTxKC+cAxAAEUVFfD+isUnn0M5zQoYMs3/EIdbDdi2+xO0BuEXqYbHNVO4uUovigrEudEoIdDqbARqXlWtLUBhAfZsfI1iXTXrRih7ESFE00kt5qdxLpLA7FFTdKz</msg>
<msg timestamp="20220725 10:03:23.114" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:23.267" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:23.106" endtime="20220725 10:03:23.267"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:23.269" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:23.268" endtime="20220725 10:03:23.269"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.269" level="INFO">{"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน ภาพที่ถ่ายจากอุปกรณ์ไม่ตรงกับภาพในระบบ"},"data":{"score":12.31,"description":"","status":"success","responseCode":"000000"}}</msg>
<status status="PASS" starttime="20220725 10:03:23.269" endtime="20220725 10:03:23.269"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.271" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน...</msg>
<status status="PASS" starttime="20220725 10:03:23.270" endtime="20220725 10:03:23.271"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:23.272" endtime="20220725 10:03:23.272"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:23.105" endtime="20220725 10:03:23.272"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:23.273" level="INFO">${convert_result} = {'status': {'code': '2011', 'message': 'Face Match Failed', 'remark': '12.31', 'user_code': 'E0031', 'user_message_en': 'The photo is not matched with the system.', 'user_message_th': 'การเปรียบเทียบใ...</msg>
<status status="PASS" starttime="20220725 10:03:23.272" endtime="20220725 10:03:23.273"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:23.297" level="INFO">${values_code} = ['12.31']</msg>
<status status="PASS" starttime="20220725 10:03:23.273" endtime="20220725 10:03:23.297"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.297" level="INFO">${MESS_STATUS} = 12.31</msg>
<status status="PASS" starttime="20220725 10:03:23.297" endtime="20220725 10:03:23.298"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:23.322" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:23.298" endtime="20220725 10:03:23.322"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FR_RETURN_MESSAGE_FAIL}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.323" level="INFO">${FR_RETURN_MESSAGE_FAIL} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:23.322" endtime="20220725 10:03:23.323"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:23.347" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:23.323" endtime="20220725 10:03:23.347"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.348" level="INFO">${LN_FR_RESPONE_MESSAGE} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:23.347" endtime="20220725 10:03:23.348"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:17.704" endtime="20220725 10:03:23.348"></status>
</kw>
<kw name="Face_Rec_fail" library="Facial_RecognitionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:23.349" endtime="20220725 10:03:23.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.350" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:23.349" endtime="20220725 10:03:23.350"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.350" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:23.350" endtime="20220725 10:03:23.351"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${FACEREC_FAIL}","kyc_trans_id" : "${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.353" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:23.352" endtime="20220725 10:03:23.353"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:23.351" endtime="20220725 10:03:23.353"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:23.354" endtime="20220725 10:03:23.354"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:23.356" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220725 10:03:23.368" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:23.564" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:23.355" endtime="20220725 10:03:23.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:23.565" endtime="20220725 10:03:23.566"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:23.354" endtime="20220725 10:03:23.566"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:23.569" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:23.570" level="INFO">${TextFileContent} = Z6wO1yS26xqFiVfy1H00kP5Li9ocGkfWlp0sP2GBIkgPgAW6dV9kT/HrRfJOR+qaTEAx3H1MBxkbsh4Z5e45YzHcV3zy5OBdRI3kmeDhUz8eTRiOZD9YAq53712BpFmGRQYCxHwdVxKUi9D1z4HChZC7+s3P3T3J2BmpQ3wvJISuWVBgVIJfyVoRpvBeenqmIF+TSMN7...</msg>
<status status="PASS" starttime="20220725 10:03:23.568" endtime="20220725 10:03:23.571"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:23.573" level="INFO">${RESULT_ENCRYPT_DATA} = Z6wO1yS26xqFiVfy1H00kP5Li9ocGkfWlp0sP2GBIkgPgAW6dV9kT/HrRfJOR+qaTEAx3H1MBxkbsh4Z5e45YzHcV3zy5OBdRI3kmeDhUz8eTRiOZD9YAq53712BpFmGRQYCxHwdVxKUi9D1z4HChZC7+s3P3T3J2BmpQ3wvJISuWVBgVIJfyVoRpvBeenqmIF+TSMN7...</msg>
<status status="PASS" starttime="20220725 10:03:23.571" endtime="20220725 10:03:23.574"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:23.567" endtime="20220725 10:03:23.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:23.574" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:23.576" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:23.577" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:23.578" level="INFO">${body} = {'data': 'Z6wO1yS26xqFiVfy1H00kP5Li9ocGkfWlp0sP2GBIkgPgAW6dV9kT/HrRfJOR+qaTEAx3H1MBxkbsh4Z5e45YzHcV3zy5OBdRI3kmeDhUz8eTRiOZD9YAq53712BpFmGRQYCxHwdVxKUi9D1z4HChZC7+s3P3T3J2BmpQ3wvJISuWVBgVIJfyVoRpvBeen...</msg>
<status status="PASS" starttime="20220725 10:03:23.574" endtime="20220725 10:03:23.579"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220725 10:03:28.492" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '103148', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:28.493" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '655', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:28 GMT', 'x-amzn-RequestId': 'e4b37f0b-ac16-403d-af45-885120a8c075', 'x-amz-apigw-id': 'VzYvXG5USQ0FsbQ=', 'X-Amzn-Trace-Id': 'Root=1-62de07fb-5321104652298e872ac16df8', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 4391ed2fb40bbebec73a93fdecacb036.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'iunXTK1qXwi_Kfd35u5LbhpzZKczwRprzn__Zahcp69dUMJ-CFx_oQ=='} 
 body={"data":"tWKJHiB1rGfRkhV5GdPcLnQjArtPLdCWlOLImnPFvKMR9+zPK6fyoycQ2HLS2CBZyB71xeXfsTWdMGNLmAkekRKmOgvJnG1BfZeaneaxClhFI6jSMtADN04LmEiTf/KfXA7tBrSD+F0r7ZcE8n1RhaLeBQp2WA5MCnoyQtZHoq/1BlgT7ZYoJFdmwojeAb8UHh+5B2RT+o1uzY3HT4AKpfRv0ifKruIBtB25hv0rnFrjuGjxEiUQTqudtF5jPnEWwY59W33gDpOS3/Q4urVn+P6HrRt3d+KpsIjejcwz4epd8qOzDl7pUtFYIoRNF80bGr2dCBLBCXn7TPcJaypLXVkutlqIolwWp04qSGJfAZ0jiuV3+IOWR/jfERXfaOmQVADjOkdxSnMsakNiQYp8fBp9XwmYhJ83ksskw116bIfBDufdKBGm4Lkw91+yIAuXuX43XddqIzh8RwT3bF1alLF+uCS2apBXt2gC+MWWRKRsblDkVnxWtWAMQ1wocASw8tmB+jLChK64+2sQEt8m+70R/83kdhTkCFJo7aC2mozDIgSQ35QwYAOoGkvSPff44Z9Z0i17BTe0+TxwNL6RtkKlYpbmx91y8wkqNL4v9aQF67M114TJgmir0MG4cNJy30Bl"} 
 </msg>
<msg timestamp="20220725 10:03:28.494" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:28.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:23.579" endtime="20220725 10:03:28.494"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>response=${resp}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:28.495" endtime="20220725 10:03:28.495"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.496" level="INFO">${RESPONSE_ENCRYPT_TYPE} = tWKJHiB1rGfRkhV5GdPcLnQjArtPLdCWlOLImnPFvKMR9+zPK6fyoycQ2HLS2CBZyB71xeXfsTWdMGNLmAkekRKmOgvJnG1BfZeaneaxClhFI6jSMtADN04LmEiTf/KfXA7tBrSD+F0r7ZcE8n1RhaLeBQp2WA5MCnoyQtZHoq/1BlgT7ZYoJFdmwojeAb8UHh+5B2RT...</msg>
<status status="PASS" starttime="20220725 10:03:28.496" endtime="20220725 10:03:28.497"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:28.499" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text tWKJHiB1rGfRkhV5GdPcLnQjArtPLdCWlOLImnPFvKMR9+zPK6fyoycQ2HLS2CBZyB71xeXfsTWdMGNLmAkekRKmOgvJnG1BfZeaneaxClhFI6jSMtADN04LmEiTf/KfXA7tBrSD+F0r7ZcE8n1RhaLeBQp2WA5MCnoyQtZHoq/1BlgT7ZYoJFdmwojeAb8UHh+5B2RT+o1uzY3HT4AKpfRv0ifKruIBtB25hv0rnFrjuGjxEiUQTqudtF5jPnEWwY59W33gDpOS3/Q4urVn+P6HrRt3d+KpsIjejcwz4epd8qOzDl7pUtFYIoRNF80bGr2dCBLBCXn7TPcJaypLXVkutlqIolwWp04qSGJfAZ0jiuV3+IOWR/jfERXfaOmQVADjOkdxSnMsakNiQYp8fBp9XwmYhJ83ksskw116bIfBDufdKBGm4Lkw91+yIAuXuX43XddqIzh8RwT3bF1alLF+uCS2apBXt2gC+MWWRKRsblDkVnxWtWAMQ1wocASw8tmB+jLChK64+2sQEt8m+70R/83kdhTkCFJo7aC2mozDIgSQ35QwYAOoGkvSPff44Z9Z0i17BTe0+TxwNL6RtkKlYpbmx91y8wkqNL4v9aQF67M114TJgmir0MG4cNJy30Bl</msg>
<msg timestamp="20220725 10:03:28.506" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:28.659" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:28.498" endtime="20220725 10:03:28.659"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:28.660" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:28.660" endtime="20220725 10:03:28.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.661" level="INFO">{"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน ภาพที่ถ่ายจากอุปกรณ์ไม่ตรงกับภาพในระบบ"},"data":{"score":12.31,"description":"","status":"success","responseCode":"000000"}}</msg>
<status status="PASS" starttime="20220725 10:03:28.661" endtime="20220725 10:03:28.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.662" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2011","message":"Face Match Failed","remark":"12.31","user_code":"E0031","user_message_en":"The photo is not matched with the system.","user_message_th":"การเปรียบเทียบใบหน้าไม่ผ่าน...</msg>
<status status="PASS" starttime="20220725 10:03:28.661" endtime="20220725 10:03:28.662"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:28.662" endtime="20220725 10:03:28.663"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:28.497" endtime="20220725 10:03:28.663"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:28.663" level="INFO">${convert_result} = {'status': {'code': '2011', 'message': 'Face Match Failed', 'remark': '12.31', 'user_code': 'E0031', 'user_message_en': 'The photo is not matched with the system.', 'user_message_th': 'การเปรียบเทียบใ...</msg>
<status status="PASS" starttime="20220725 10:03:28.663" endtime="20220725 10:03:28.663"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:28.690" level="INFO">${values_code} = ['12.31']</msg>
<status status="PASS" starttime="20220725 10:03:28.664" endtime="20220725 10:03:28.690"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.691" level="INFO">${MESS_STATUS} = 12.31</msg>
<status status="PASS" starttime="20220725 10:03:28.690" endtime="20220725 10:03:28.691"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:28.714" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:28.691" endtime="20220725 10:03:28.714"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FR_RETURN_MESSAGE_FAIL}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.715" level="INFO">${FR_RETURN_MESSAGE_FAIL} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:28.714" endtime="20220725 10:03:28.715"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:28.738" level="INFO">${values_code} = ['Face Match Failed']</msg>
<status status="PASS" starttime="20220725 10:03:28.715" endtime="20220725 10:03:28.738"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.739" level="INFO">${LN_FR_RESPONE_MESSAGE} = Face Match Failed</msg>
<status status="PASS" starttime="20220725 10:03:28.738" endtime="20220725 10:03:28.739"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:23.348" endtime="20220725 10:03:28.739"></status>
</kw>
<kw name="Face_Rec_fail" library="Facial_RecognitionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:28.740" endtime="20220725 10:03:28.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.741" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:28.741" endtime="20220725 10:03:28.741"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.742" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:28.741" endtime="20220725 10:03:28.742"></status>
</kw>
<kw name="Create_File_Keep_Text_Facial" library="Encrypt_page">
<arguments>
<arg>{"image_source":"${FACEREC_FAIL}","kyc_trans_id" : "${TRANS_ID}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_facial_body.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.744" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_facial_body.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:28.743" endtime="20220725 10:03:28.745"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:28.742" endtime="20220725 10:03:28.745"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_facial_body.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:28.746" endtime="20220725 10:03:28.746"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:28.747" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_facial_body.txt</msg>
<msg timestamp="20220725 10:03:28.752" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:28.933" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:28.746" endtime="20220725 10:03:28.933"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:28.934" endtime="20220725 10:03:28.934"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:28.745" endtime="20220725 10:03:28.935"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:28.937" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:28.939" level="INFO">${TextFileContent} = UlEfyY7mXCqERDWe2ZgcX9JiaklIJVSLuUs3fw+QoG7RIDvjN0jpMJ8z04dYw/vXGFhIbKmHxswb+dgpLCW6Zk2WjbYbTKTNUDRS0a5FEoJxW1qE9Oc+zUEfzxdoFKzOD0MXGI6rlQHi5h7tqfzijUH8PQBPj7cG23EZFoWtpVP5XL9qXZR4lQDetUg9RwCY9BRGY1o6...</msg>
<status status="PASS" starttime="20220725 10:03:28.937" endtime="20220725 10:03:28.939"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:28.942" level="INFO">${RESULT_ENCRYPT_DATA} = UlEfyY7mXCqERDWe2ZgcX9JiaklIJVSLuUs3fw+QoG7RIDvjN0jpMJ8z04dYw/vXGFhIbKmHxswb+dgpLCW6Zk2WjbYbTKTNUDRS0a5FEoJxW1qE9Oc+zUEfzxdoFKzOD0MXGI6rlQHi5h7tqfzijUH8PQBPj7cG23EZFoWtpVP5XL9qXZR4lQDetUg9RwCY9BRGY1o6...</msg>
<status status="PASS" starttime="20220725 10:03:28.940" endtime="20220725 10:03:28.942"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:28.935" endtime="20220725 10:03:28.942"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:28.942" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:28.944" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:28.945" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:28.946" level="INFO">${body} = {'data': 'UlEfyY7mXCqERDWe2ZgcX9JiaklIJVSLuUs3fw+QoG7RIDvjN0jpMJ8z04dYw/vXGFhIbKmHxswb+dgpLCW6Zk2WjbYbTKTNUDRS0a5FEoJxW1qE9Oc+zUEfzxdoFKzOD0MXGI6rlQHi5h7tqfzijUH8PQBPj7cG23EZFoWtpVP5XL9qXZR4lQDetUg9Rw...</msg>
<status status="PASS" starttime="20220725 10:03:28.942" endtime="20220725 10:03:28.946"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_IMAGE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20220725 10:03:32.271" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 path_url=/tcrb-platform-kyc/v1/facial 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '103148', 'Content-Type': 'application/json'} 
 body=b'{"data": "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'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:32.272" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/facial 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '687', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:32 GMT', 'x-amzn-RequestId': '82ee5bc3-00e3-40f1-814f-fc3642d101da', 'x-amz-apigw-id': 'VzYwME2nyQ0FiQA=', 'X-Amzn-Trace-Id': 'Root=1-62de0801-5f0bf56f242c5b7b0586e2cf', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 b5697b33d5b1898c8ec9864d3568219c.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'V299esM_KAPpj_Bme5FJS6yjoOSnm9AXyD0NMbTLOxtLuOlHe4CUJg=='} 
 body={"data":"2uG9BmLCK5/yqd9Nxt0NA3VY5Fsz0jEAgIFOX2f4KToo7eIvoy9DpHQyIbF0FNFszXX2XxoKOe++DNL6nTk0wquoQVX+yv4HuSOsy74w14fNRxODDMazYw4QRcn5Ca4F5pKOMMAjxxRgXIDuM4tPC6iW9VlorFnOvudGpr/o905ZG7JHed3u6PeWTOc8yVUAESuL8dro9mv+XtHJG9wnEeTSInv2tH0QQHhoeHKfxGzhDRCrbuyXvDdvYdR6o+qmBn0oScGmAZsHXOQymYHxDKNPrVXkhEbzPXPMK5EmnI/76nXIuFyUn/A6mioRGwWzpjdfhMVwnOALek+Li+un3NfHi+PEJcT1D/YQ13bej47rKq4ZGBWAgLfHQw9vNz6yEapUXOijNepQj08fypweADrE+hFus+tAuBABjIaSsysGH9Eii+iEWIcTNnaB1+tn5ciu7QmtR6ShQUadsPTUrf2bWk3tDMWlGF4pKkOrgzcILoTZR3JzkyvuJg7DK/t09o6p88PxEpeP5WMhGUX01GxTrxRq1bY7eZHxFRwe7O0uTU6Wa19yVL6ZM3wQfwu4MtH4NJI00GQEXIjg34OX1fFTKbfJgxz7m8V0Fwo7LjOyukm7+07m4BC0IIyega5GG1mKVbk91G7p4hpAAy48cXoUNXqo4WcZIqE="} 
 </msg>
<msg timestamp="20220725 10:03:32.272" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:32.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:28.946" endtime="20220725 10:03:32.273"></status>
</kw>
<kw name="Request Should Be Successful" library="RequestsLibrary">
<doc>Fails if response status code is a client or server error (4xx, 5xx).</doc>
<arguments>
<arg>response=${resp}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:32.273" endtime="20220725 10:03:32.274"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${resp.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.276" level="INFO">${RESPONSE_ENCRYPT_TYPE} = 2uG9BmLCK5/yqd9Nxt0NA3VY5Fsz0jEAgIFOX2f4KToo7eIvoy9DpHQyIbF0FNFszXX2XxoKOe++DNL6nTk0wquoQVX+yv4HuSOsy74w14fNRxODDMazYw4QRcn5Ca4F5pKOMMAjxxRgXIDuM4tPC6iW9VlorFnOvudGpr/o905ZG7JHed3u6PeWTOc8yVUAESuL8dro...</msg>
<status status="PASS" starttime="20220725 10:03:32.275" endtime="20220725 10:03:32.276"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:32.279" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 2uG9BmLCK5/yqd9Nxt0NA3VY5Fsz0jEAgIFOX2f4KToo7eIvoy9DpHQyIbF0FNFszXX2XxoKOe++DNL6nTk0wquoQVX+yv4HuSOsy74w14fNRxODDMazYw4QRcn5Ca4F5pKOMMAjxxRgXIDuM4tPC6iW9VlorFnOvudGpr/o905ZG7JHed3u6PeWTOc8yVUAESuL8dro9mv+XtHJG9wnEeTSInv2tH0QQHhoeHKfxGzhDRCrbuyXvDdvYdR6o+qmBn0oScGmAZsHXOQymYHxDKNPrVXkhEbzPXPMK5EmnI/76nXIuFyUn/A6mioRGwWzpjdfhMVwnOALek+Li+un3NfHi+PEJcT1D/YQ13bej47rKq4ZGBWAgLfHQw9vNz6yEapUXOijNepQj08fypweADrE+hFus+tAuBABjIaSsysGH9Eii+iEWIcTNnaB1+tn5ciu7QmtR6ShQUadsPTUrf2bWk3tDMWlGF4pKkOrgzcILoTZR3JzkyvuJg7DK/t09o6p88PxEpeP5WMhGUX01GxTrxRq1bY7eZHxFRwe7O0uTU6Wa19yVL6ZM3wQfwu4MtH4NJI00GQEXIjg34OX1fFTKbfJgxz7m8V0Fwo7LjOyukm7+07m4BC0IIyega5GG1mKVbk91G7p4hpAAy48cXoUNXqo4WcZIqE=</msg>
<msg timestamp="20220725 10:03:32.288" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:32.443" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:32.278" endtime="20220725 10:03:32.443"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:32.444" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:32.444" endtime="20220725 10:03:32.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.445" level="INFO">{"status":{"code":"2010","message":"Face Match failed reached maximum times","remark":"","user_code":"E0009","user_message_en":"We are unable to proceed,since you have reached maximum limit of Face-Recognition attempts.","user_message_th":"ระบบไม่สามารถดำเนินการต่อได้ เนื่องจากคุณทำขั้นตอนนี้เกินจำนวนครั้งที่กำหนด"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:32.445" endtime="20220725 10:03:32.445"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.446" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2010","message":"Face Match failed reached maximum times","remark":"","user_code":"E0009","user_message_en":"We are unable to proceed,since you have reached maximum limit of Face-Re...</msg>
<status status="PASS" starttime="20220725 10:03:32.445" endtime="20220725 10:03:32.446"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:32.446" endtime="20220725 10:03:32.447"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:32.277" endtime="20220725 10:03:32.447"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:32.448" level="INFO">${convert_result} = {'status': {'code': '2010', 'message': 'Face Match failed reached maximum times', 'remark': '', 'user_code': 'E0009', 'user_message_en': 'We are unable to proceed,since you have reached maximum limit ...</msg>
<status status="PASS" starttime="20220725 10:03:32.447" endtime="20220725 10:03:32.448"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:32.474" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:32.448" endtime="20220725 10:03:32.474"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${MESS_STATUS}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.475" level="INFO">${MESS_STATUS} = </msg>
<status status="PASS" starttime="20220725 10:03:32.475" endtime="20220725 10:03:32.475"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:32.499" level="INFO">${values_code} = ['Face Match failed reached maximum times']</msg>
<status status="PASS" starttime="20220725 10:03:32.476" endtime="20220725 10:03:32.499"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FR_RETURN_MESSAGE_FAIL}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.501" level="INFO">${FR_RETURN_MESSAGE_FAIL} = Face Match failed reached maximum times</msg>
<status status="PASS" starttime="20220725 10:03:32.500" endtime="20220725 10:03:32.501"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:32.524" level="INFO">${values_code} = ['Face Match failed reached maximum times']</msg>
<status status="PASS" starttime="20220725 10:03:32.501" endtime="20220725 10:03:32.524"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LN_FR_RESPONE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.525" level="INFO">${LN_FR_RESPONE_MESSAGE} = Face Match failed reached maximum times</msg>
<status status="PASS" starttime="20220725 10:03:32.525" endtime="20220725 10:03:32.525"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:28.739" endtime="20220725 10:03:32.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>QR_code_page.Validate_QR_Code_for_test_qrstamp_scene</arg>
</arguments>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:32.527" endtime="20220725 10:03:32.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.527" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ'}</msg>
<status status="PASS" starttime="20220725 10:03:32.527" endtime="20220725 10:03:32.528"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.528" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:32.528" endtime="20220725 10:03:32.529"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.530" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:32.530" endtime="20220725 10:03:32.531"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:32.529" endtime="20220725 10:03:32.531"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:32.532" endtime="20220725 10:03:32.532"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:32.533" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:32.540" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:32.687" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:32.532" endtime="20220725 10:03:32.687"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:32.687" endtime="20220725 10:03:32.688"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:32.531" endtime="20220725 10:03:32.688"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:32.690" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:32.691" level="INFO">${TextFileContent} = Hof7ef7ITHmEFrySV97aiXYAkeS3HzqNKE7ttwXk7r4AyM0S2NzA3Mrp5CWbFi65dtmfL8yA2cM2c2knrTbfWbEmFHT1MkNIaHaS+cTeZYuUvjypl3qUh+kW4HSkt8I9QXsbLhM9tYE8UHwgQer1tsZowk1PEUmd8BPg94tgmV9niu4QW9UDyr29vgIRlHhQ+Ju1J3AC...</msg>
<status status="PASS" starttime="20220725 10:03:32.690" endtime="20220725 10:03:32.691"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:32.692" level="INFO">${RESULT_ENCRYPT_DATA} = Hof7ef7ITHmEFrySV97aiXYAkeS3HzqNKE7ttwXk7r4AyM0S2NzA3Mrp5CWbFi65dtmfL8yA2cM2c2knrTbfWbEmFHT1MkNIaHaS+cTeZYuUvjypl3qUh+kW4HSkt8I9QXsbLhM9tYE8UHwgQer1tsZowk1PEUmd8BPg94tgmV9niu4QW9UDyr29vgIRlHhQ+Ju1J3AC...</msg>
<status status="PASS" starttime="20220725 10:03:32.691" endtime="20220725 10:03:32.693"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:32.689" endtime="20220725 10:03:32.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:32.694" level="INFO">&amp;{body} = { data=Hof7ef7ITHmEFrySV97aiXYAkeS3HzqNKE7ttwXk7r4AyM0S2NzA3Mrp5CWbFi65dtmfL8yA2cM2c2knrTbfWbEmFHT1MkNIaHaS+cTeZYuUvjypl3qUh+kW4HSkt8I9QXsbLhM9tYE8UHwgQer1tsZowk1PEUmd8BPg94tgmV9niu4QW9UDyr29vgIRlHhQ+...</msg>
<status status="PASS" starttime="20220725 10:03:32.693" endtime="20220725 10:03:32.694"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:34.502" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiMDI4NDY4MjMtOGFhNC00YmU5LTk2MjEtZTgyNGM0ZTA0YWE5IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgxNzksImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODQ3OSwiaWF0IjoxNjU4NzE4MTc5fQ.n-2rj_q-ofOvDm9J6ifVbgBw-VrAZkGD18m6lgH_BKHeHsaFMVHRjMY2QLyJAP04mVG6c2EdD_hXE3l1aBu6AWSu4kDhbJI6HYsPhAkKK2nYum3RJHsVgKIHXEGttFugwEW_MOn8AU9fT9Rr1IkjLcc1OWiUUcZtEQ6cR_118qwliBbRoBdnSX3KiqWROS5u2mei-W5eFueG1PHmApC4uVoxrgul-fCow5n0WH0UpyORNI6wP5s38An5DLlc3fepIQoT0Me8I6uCbYt9ZXWcYgLehbKi-S90Y5UaOAhkBWhu1i3ipX7TdvdbhY_pBUpJnZyRtL4CFfG_Msdl2xZIeQ', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "Hof7ef7ITHmEFrySV97aiXYAkeS3HzqNKE7ttwXk7r4AyM0S2NzA3Mrp5CWbFi65dtmfL8yA2cM2c2knrTbfWbEmFHT1MkNIaHaS+cTeZYuUvjypl3qUh+kW4HSkt8I9QXsbLhM9tYE8UHwgQer1tsZowk1PEUmd8BPg94tgmV9niu4QW9UDyr29vgIRlHhQ+Ju1J3AC6JjeymmWINTPjE7/jR33mXc5z/5UlhatngdyqxqfD+FbLgaBoZcTe/Q1BIkNkh6NDXMEfGAVAe52H22qjVF28KTqXn1LLwnzgzRypm+98DfG//E6pxZcV2l//VkeXd0k"}' 
 </msg>
<msg timestamp="20220725 10:03:34.503" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '455', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:34 GMT', 'x-amzn-RequestId': '5d46e224-b6e6-44f9-85d5-9a6287a93ab5', 'x-amz-apigw-id': 'VzYwxFcxyQ0FvPQ=', 'X-Amzn-Trace-Id': 'Root=1-62de0804-68add4da286487f1082041f8', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 06bd866aa9a243874a68ae5c443c25c2.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'HuI_tCafBEGyBsduHce-Mm01lL3wGVQmUYdP9Ec5fdFYOaCcsr9zzg=='} 
 body={"data":"u+RcCp3L3cp2hQVGeC5uA5w6mFacNwO+qjO+WnnEwoWL+Z48kdSPMPH756ofjwq/l5xW5BXnMB9l0u07tNNlel/ydvBt2yhGH9cxTD+K5EflxVvmoDcJyuydstIs4ohvwoj1gzaTdYuygrdQPkQCjKRQ4KEHvG8qAjj2DgQ6xMXsD+0QFwfgT7LEUos0plDdDW/Xmj4PlWGVJni4Sb36ycXMPMfzLWXMhC7Wk+HQGuuoaYuSaM16umbvXXbO2Y0QcRmyNo50y6kaiUjSxt8HVjFAgGr2G/UvhQ8G578UVnpEOmc61L5pC4Lx9IbtDU/IuPno84h4GKhwnjMx/cCxfpO7Mbt60vjhrKEVWkDbLbEV+L/L1EZs+4DizaENHHLAMDQzuCFLcE3Y4L6v1Gj2b4fsHZbSDzlKmEofQqZAczNfCwjrxLP/a+gfcA=="} 
 </msg>
<msg timestamp="20220725 10:03:34.503" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:34.503" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:32.694" endtime="20220725 10:03:34.503"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.505" level="INFO">${RESPONSE_ENCRYPT_TYPE} = u+RcCp3L3cp2hQVGeC5uA5w6mFacNwO+qjO+WnnEwoWL+Z48kdSPMPH756ofjwq/l5xW5BXnMB9l0u07tNNlel/ydvBt2yhGH9cxTD+K5EflxVvmoDcJyuydstIs4ohvwoj1gzaTdYuygrdQPkQCjKRQ4KEHvG8qAjj2DgQ6xMXsD+0QFwfgT7LEUos0plDdDW/Xmj4P...</msg>
<status status="PASS" starttime="20220725 10:03:34.503" endtime="20220725 10:03:34.505"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:34.507" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text u+RcCp3L3cp2hQVGeC5uA5w6mFacNwO+qjO+WnnEwoWL+Z48kdSPMPH756ofjwq/l5xW5BXnMB9l0u07tNNlel/ydvBt2yhGH9cxTD+K5EflxVvmoDcJyuydstIs4ohvwoj1gzaTdYuygrdQPkQCjKRQ4KEHvG8qAjj2DgQ6xMXsD+0QFwfgT7LEUos0plDdDW/Xmj4PlWGVJni4Sb36ycXMPMfzLWXMhC7Wk+HQGuuoaYuSaM16umbvXXbO2Y0QcRmyNo50y6kaiUjSxt8HVjFAgGr2G/UvhQ8G578UVnpEOmc61L5pC4Lx9IbtDU/IuPno84h4GKhwnjMx/cCxfpO7Mbt60vjhrKEVWkDbLbEV+L/L1EZs+4DizaENHHLAMDQzuCFLcE3Y4L6v1Gj2b4fsHZbSDzlKmEofQqZAczNfCwjrxLP/a+gfcA==</msg>
<msg timestamp="20220725 10:03:34.514" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:34.666" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:34.506" endtime="20220725 10:03:34.666"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:34.668" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:34.667" endtime="20220725 10:03:34.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.669" level="INFO">{"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:34.669" endtime="20220725 10:03:34.669"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.670" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2024","message":"QR Used","remark":"","user_code":"E0016","user_message_en":"The QR code is used.","user_message_th":"คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว"},"data":nu...</msg>
<status status="PASS" starttime="20220725 10:03:34.670" endtime="20220725 10:03:34.671"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.671" endtime="20220725 10:03:34.673"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:34.505" endtime="20220725 10:03:34.673"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:34.674" level="INFO">${convert_result} = {'status': {'code': '2024', 'message': 'QR Used', 'remark': '', 'user_code': 'E0016', 'user_message_en': 'The QR code is used.', 'user_message_th': 'คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว...</msg>
<status status="PASS" starttime="20220725 10:03:34.674" endtime="20220725 10:03:34.674"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.699" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:03:34.674" endtime="20220725 10:03:34.699"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.699" level="INFO">${RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:03:34.699" endtime="20220725 10:03:34.699"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.723" level="INFO">${values_code} = ['2024']</msg>
<status status="PASS" starttime="20220725 10:03:34.700" endtime="20220725 10:03:34.723"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.723" level="INFO">${QR_RESPONSE_CODE} = 2024</msg>
<status status="PASS" starttime="20220725 10:03:34.723" endtime="20220725 10:03:34.724"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.747" level="INFO">${values_code} = ['QR Used']</msg>
<status status="PASS" starttime="20220725 10:03:34.724" endtime="20220725 10:03:34.747"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.748" level="INFO">${RESPONSE_MESSAGE} = QR Used</msg>
<status status="PASS" starttime="20220725 10:03:34.747" endtime="20220725 10:03:34.748"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.772" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:34.748" endtime="20220725 10:03:34.772"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.773" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:34.772" endtime="20220725 10:03:34.773"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.796" level="INFO">${values_code} = ['E0016']</msg>
<status status="PASS" starttime="20220725 10:03:34.773" endtime="20220725 10:03:34.797"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.798" level="INFO">${RESPONSE_USERCODE} = E0016</msg>
<status status="PASS" starttime="20220725 10:03:34.797" endtime="20220725 10:03:34.798"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.821" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:03:34.798" endtime="20220725 10:03:34.821"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.822" level="INFO">${RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:03:34.822" endtime="20220725 10:03:34.822"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.846" level="INFO">${values_code} = ['The QR code is used.']</msg>
<status status="PASS" starttime="20220725 10:03:34.823" endtime="20220725 10:03:34.846"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.847" level="INFO">${QR_RESPONSE_USER_EN} = The QR code is used.</msg>
<status status="PASS" starttime="20220725 10:03:34.847" endtime="20220725 10:03:34.847"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.872" level="INFO">${values_code} = ['คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว']</msg>
<status status="PASS" starttime="20220725 10:03:34.847" endtime="20220725 10:03:34.872"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.873" level="INFO">${RESPONSE_USER_TH} = คิวอาร์โค้ดไม่สามารถใช้ได้ เนื่องจากเคยถูกใช้ไปแล้ว</msg>
<status status="PASS" starttime="20220725 10:03:34.872" endtime="20220725 10:03:34.873"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:34.896" level="INFO">${values_code} = []</msg>
<status status="PASS" starttime="20220725 10:03:34.873" endtime="20220725 10:03:34.896"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.897" level="FAIL">Resolving variable '${values_code[0]}' failed: IndexError: list index out of range</msg>
<status status="FAIL" starttime="20220725 10:03:34.897" endtime="20220725 10:03:34.897"></status>
</kw>
<status status="FAIL" starttime="20220725 10:03:32.526" endtime="20220725 10:03:34.897"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:32.526" endtime="20220725 10:03:34.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Stamp_Used</arg>
<arg>10</arg>
</arguments>
<kw name="Save_Result_Stamp_Used" library="save_data_excel_page">
<arguments>
<arg>10</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.900" endtime="20220725 10:03:34.978"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=3</arg>
<arg>value=${QR_VALUE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.979" endtime="20220725 10:03:34.979"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.979" endtime="20220725 10:03:34.980"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.980" endtime="20220725 10:03:34.981"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.981" endtime="20220725 10:03:34.981"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.981" endtime="20220725 10:03:34.982"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.982" endtime="20220725 10:03:34.982"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.983" endtime="20220725 10:03:34.983"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=QR_Stamp_Used</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.983" endtime="20220725 10:03:34.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST STATUS}</arg>
</arguments>
<msg timestamp="20220725 10:03:34.984" level="INFO">PASS</msg>
<status status="PASS" starttime="20220725 10:03:34.984" endtime="20220725 10:03:34.984"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:34.984" endtime="20220725 10:03:35.057"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:35.057" endtime="20220725 10:03:35.057"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:34.899" endtime="20220725 10:03:35.057"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:34.898" endtime="20220725 10:03:35.057"></status>
</kw>
<doc>ทดสอบระบบ Stamp QR Used กรณีลูกค้า Gen QR code มาทำ kyc และได้สถานะเป็น Unsuccess (FACIAL FAIL) และ กลับมาทำ KYC อีกครั้ง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:02:56.769" endtime="20220725 10:03:35.057" critical="yes"></status>
</test>
<test id="s1-t6" name="Modify_Validate_customer_1">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:35.062" endtime="20220725 10:03:35.062"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.063" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:35.062" endtime="20220725 10:03:35.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:35.064" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:03:35.064" endtime="20220725 10:03:35.065"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:35.571" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:03:35.571" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:03:35 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': 'af0ecab0-bb25-4ad5-9b0b-98f294992b8d', 'x-amz-apigw-id': 'VzYxKFEoyQ0Fvog=', 'X-Amzn-Trace-Id': 'Root=1-62de0807-7dfde7a30c8da0dc346492f0'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431550258335504662949312","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:03:35.572" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:35.572" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:35.065" endtime="20220725 10:03:35.572"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.574" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:35.573" endtime="20220725 10:03:35.574"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.575" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:35.574" endtime="20220725 10:03:35.575"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.576" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:35.575" endtime="20220725 10:03:35.576"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.577" level="INFO">${QR_VALUE} = 2431550258335504662949312</msg>
<status status="PASS" starttime="20220725 10:03:35.576" endtime="20220725 10:03:35.577"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.578" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:03:35.577" endtime="20220725 10:03:35.578"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.579" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:03:35.578" endtime="20220725 10:03:35.579"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.581" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:03:35.580" endtime="20220725 10:03:35.581"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.061" endtime="20220725 10:03:35.581"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.585" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:35.584" endtime="20220725 10:03:35.585"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.583" endtime="20220725 10:03:35.585"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:35.586" endtime="20220725 10:03:35.586"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:35.587" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:35.593" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:35.753" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:35.586" endtime="20220725 10:03:35.753"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:35.754" endtime="20220725 10:03:35.755"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.585" endtime="20220725 10:03:35.755"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:35.757" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:35.758" level="INFO">${TextFileContent} = Rh6fgvqOmBhLix8dX5GhHGGEDw44a+ZPq4ADEuSkfP0CQVjMGWYydmTqshca8/L/Oc7HdY3L1uQirT/5+3t5BcMmTVgtjOGRK0vc5B5o0R0uG6IF2l0l4uc7fLbcDE2BcbZ9uGk=</msg>
<status status="PASS" starttime="20220725 10:03:35.757" endtime="20220725 10:03:35.758"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.759" level="INFO">${RESULT_ENCRYPT_DATA} = Rh6fgvqOmBhLix8dX5GhHGGEDw44a+ZPq4ADEuSkfP0CQVjMGWYydmTqshca8/L/Oc7HdY3L1uQirT/5+3t5BcMmTVgtjOGRK0vc5B5o0R0uG6IF2l0l4uc7fLbcDE2BcbZ9uGk=</msg>
<status status="PASS" starttime="20220725 10:03:35.758" endtime="20220725 10:03:35.759"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.756" endtime="20220725 10:03:35.759"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:35.760" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:35.759" endtime="20220725 10:03:35.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:35.763" level="INFO">&amp;{body} = { data=Rh6fgvqOmBhLix8dX5GhHGGEDw44a+ZPq4ADEuSkfP0CQVjMGWYydmTqshca8/L/Oc7HdY3L1uQirT/5+3t5BcMmTVgtjOGRK0vc5B5o0R0uG6IF2l0l4uc7fLbcDE2BcbZ9uGk= }</msg>
<status status="PASS" starttime="20220725 10:03:35.762" endtime="20220725 10:03:35.763"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:38.206" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "Rh6fgvqOmBhLix8dX5GhHGGEDw44a+ZPq4ADEuSkfP0CQVjMGWYydmTqshca8/L/Oc7HdY3L1uQirT/5+3t5BcMmTVgtjOGRK0vc5B5o0R0uG6IF2l0l4uc7fLbcDE2BcbZ9uGk="}' 
 </msg>
<msg timestamp="20220725 10:03:38.206" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:38 GMT', 'x-amzn-RequestId': 'acb24bd8-556f-435d-860f-18e7a874aeec', 'x-amz-apigw-id': 'VzYxRHu3yQ0Fi2Q=', 'X-Amzn-Trace-Id': 'Root=1-62de0807-61aa25012175e1076546e54a', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 d25c75f7c4aa79e2576bf81e2a7e567e.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'ZhrvHw2BdG0fveEOg28Wi_vhXYqqqS9xvyCGm-H9eVizEy5JUwD1dg=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:03:38.206" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:38.207" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:35.763" endtime="20220725 10:03:38.207"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.209" level="INFO">${RESPONSE_ENCRYPT_TYPE} = FGazzp+Mm8EUm+3DivKHA1Lpxv+MvnxDqTAZV7N7q1U7rBD+79VeaxtTLXyLPZs5JqlflfGlPrEnEzI9uvAertNWWW+M48ZCIYT7UWkkimd3x4roaXttNe4wz6NifSmJPjaSZr5zey3z9BT1Eeno9IA3csd/97CBNH3zKYvD6rw6jBMwu4vdFBZcVlZvJtU1TF+BIwCG...</msg>
<status status="PASS" starttime="20220725 10:03:38.207" endtime="20220725 10:03:38.209"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:38.213" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:03:38.221" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:38.373" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:38.211" endtime="20220725 10:03:38.373"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:38.375" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:38.374" endtime="20220725 10:03:38.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.375" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjcxMzBjYjIzLWZiNTctNGQyNS1iODkwLWIyMzdlNGQ2MTA1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg1MTcsImlhdCI6MTY1ODcxODIxNywianRpIjoiZTM3YzlhM2YtZWFkMi00MmNmLWE0MjUtNjYxYTNiNzhjNmUyIiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.M0kPKrzIpH82zWF9e0_kXeRr6rpMIqLOvIxlCb3DqiKCB3k2AdLv5wo8BSrfagvDzoFwebVpNgCVhNG4MSgtfMRT0P9ZUn8Vcu347N8ig7UUiRFri25RABs_7uvFxB_s4vdqH-v5PJp2ZnGjI___L0q-qLHUOXaKG0O-xaHdOWUSNPfi4MX-G4zmmm-V-BOvoDrH0ubERCj1pxvi-NwF90kdRuAa4rrRVq3j-2WPiHiBuz15hPBvDA_2HKmh0aTws_OmZ_q3vtq511o50ZlmLpOYwejCFZ60u8k9xPrqYZuVHx3R450MvpVmbyx-DvwxKBPTqNee_e8nVTIx77egiA","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.uBaSmlly1m_7UfJyc8qqvwoOmeU3I9jhKek0ITTqTozeyaIheq7oC0JLuFfLSfKYXS3MEfvibGYJ73JYeAgwdSKt_Exl9b4YYC6RwZSv04s10hb2_zy18jLN412IdDBSdJzT9SVX_OmWDYKKmUq3qzHFAhhDEj_pmNPNAq42zMFGzh3djIj52J-7hFipCHur-MstFWhwWwHPD7I21X9ziVnlTgtwUJRekSSJJnVkUhiK8J9v2mzTF3g9_uETM0WDQ4hEv4Fq9rC4seStqqUmJDMn_UjbBTciiJ8j3EIn-BwBMcZ9OOW5zYlqkaIUVaK6dFYcMjBK8gGtkoowan19wg.LZ0spdNI0ZBUUf2-.YLKcqkFsxysb0588rr6TOFzRkoN2ce14v4sgBU87SQSfNIqQW4VpCEvtmzw_tbAPrJVODV661f3HHEEW_lJre7lB4YUBihnulQ7WK8zQDKrWusuDhW6XhsoC4_H4Q6KkiTgTsyV37WgR6Kvc6uyH5gOk7yKVrIR3Nod7LOFAqmhlq2MLAiXXCU2Is8ewmP1mLGdDkvIQMnvihATW8i-JOz9_Kif5Sk42--j-5oBTGwZXnszgdYkniNBnb5WSBPDSDd6pT5RRfPz06CCjXLYkTaIYKKOP4VD4GVmvaH27oeEeRUP8KFvaJ3vG251ALBjqQU3cFOB-_QiVBuRiUdiV4MiyXZlAwUt5R61aXNkCV_dktb1M70n-KbHMUU5p-vpfMB1hkJvO-JmKv_9qa24AVZ7y51lQD8Sf7rj7ykF1p9w3DApV-OEu_xmzG3YInHnooz-daLa2OWgl7tvS-cVAt2N4_b3ps39UXZqvEb91Y6-VarETAeUImazkP6HCyB0pDMKLeNJn5XGogXApwC8JAcQWBTMdHL0fidYlTrcXZRJPn9L2KLEYnazSQ-Iac3saIaAor2k288WvawVaZ5Cfv7vULVjha3Lw8oQQX0TP9xD3BzvB1NavgiguWxtZ9AtC-GfywLzqmYMF5_fDZtfqYi0hDBWYsWJ6s9cM_15dEDSKWRGXuC01_XM69MMTxavmqeZ7F-o4FIRv6jVoHKGrbHYYaW4mB-8a0o472yS8kQR89vsVdiuS2UE_Xwzn44At1-Xs1FsJODIkTLp69r5hH-LDPmjJt1vzdphhaR4Gu6AzbE_TAsYHisVWewc9ezY2A_3iCGX4qXZV5wydB8AyxOewotVOWVAt_sV6v6sJ2vyXyO62G6U_FLEU0Dzdv50GNy-cdch3C-WomAwfo1nSu-udHHj9e5RB9BZwS_64RTc2xZsLDiTM-bznQ9xVnLb6bF61VqTCE1VjAsBv20U1Hk1O-l_C0XCEc9YpfW16-sSWawQZnccRrmLkuoqHs0rUgg-b6B80rz93jZ4TmAjCgz-AgelfGIeR2PpmppT9tY3ee_ytgsownRx6B1hBqDiUvOK9JcqMmXgLlZrg1hSryMnU2XHfRSo4IzQfrrUB3iv87XqW1P7AKBvs8aguBWfLjJsk8nLgB7_tu6p_1lhgPrN2cuawDRZUYvTVahnLep207R-jYpO-3ITm11tc4mVJ2ijgsMkd1yr-GmSQxPmD0yVboY3X1CPSnF6udcFjzI1g_eR0-xGKZf54MCLKi1um9hZTamAExUH4Q-sVFcdWPOKmZBW4.0LHml1XlhYr7esG84SYf6A","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w"}}</msg>
<status status="PASS" starttime="20220725 10:03:38.375" endtime="20220725 10:03:38.376"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.377" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:03:38.376" endtime="20220725 10:03:38.377"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:38.377" endtime="20220725 10:03:38.378"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:38.209" endtime="20220725 10:03:38.378"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:38.379" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:03:38.378" endtime="20220725 10:03:38.379"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:03:38.403" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:03:38.379" endtime="20220725 10:03:38.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.404" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w']</msg>
<status status="PASS" starttime="20220725 10:03:38.403" endtime="20220725 10:03:38.404"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.404" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:03:38.404" endtime="20220725 10:03:38.405"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.583" endtime="20220725 10:03:38.405"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:35.582" endtime="20220725 10:03:38.405"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:38.406" endtime="20220725 10:03:38.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.407" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w'}</msg>
<status status="PASS" starttime="20220725 10:03:38.406" endtime="20220725 10:03:38.407"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.407" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:38.407" endtime="20220725 10:03:38.408"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.410" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:38.409" endtime="20220725 10:03:38.410"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:38.408" endtime="20220725 10:03:38.410"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:38.411" endtime="20220725 10:03:38.411"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:38.413" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:38.418" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:38.581" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:38.412" endtime="20220725 10:03:38.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:38.582" endtime="20220725 10:03:38.582"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:38.411" endtime="20220725 10:03:38.582"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:38.584" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:38.584" level="INFO">${TextFileContent} = ycNW3oyo/+m1z3DOUQCm847jC9LN1ijMq087U+hCVYBCnU50jJGvSIMnR7i+GLtXm2Zd42yDB04710dOYLoXHt9hmJyy/E3Kw5+te99JGd/4QRiRi5eSh0yzpnLqhW4gMwV7cT9AAbLCswcrf08S0V2OcL3QTUupVEu36+PuM+wIrXpWuoVHeW0pIlp5r0z6jDBPUYMK...</msg>
<status status="PASS" starttime="20220725 10:03:38.584" endtime="20220725 10:03:38.584"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:38.585" level="INFO">${RESULT_ENCRYPT_DATA} = ycNW3oyo/+m1z3DOUQCm847jC9LN1ijMq087U+hCVYBCnU50jJGvSIMnR7i+GLtXm2Zd42yDB04710dOYLoXHt9hmJyy/E3Kw5+te99JGd/4QRiRi5eSh0yzpnLqhW4gMwV7cT9AAbLCswcrf08S0V2OcL3QTUupVEu36+PuM+wIrXpWuoVHeW0pIlp5r0z6jDBPUYMK...</msg>
<status status="PASS" starttime="20220725 10:03:38.585" endtime="20220725 10:03:38.585"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:38.583" endtime="20220725 10:03:38.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:38.586" level="INFO">&amp;{body} = { data=ycNW3oyo/+m1z3DOUQCm847jC9LN1ijMq087U+hCVYBCnU50jJGvSIMnR7i+GLtXm2Zd42yDB04710dOYLoXHt9hmJyy/E3Kw5+te99JGd/4QRiRi5eSh0yzpnLqhW4gMwV7cT9AAbLCswcrf08S0V2OcL3QTUupVEu36+PuM+wIrXpWuoVHeW0pIlp5r0z6j...</msg>
<status status="PASS" starttime="20220725 10:03:38.586" endtime="20220725 10:03:38.586"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:39.513" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "ycNW3oyo/+m1z3DOUQCm847jC9LN1ijMq087U+hCVYBCnU50jJGvSIMnR7i+GLtXm2Zd42yDB04710dOYLoXHt9hmJyy/E3Kw5+te99JGd/4QRiRi5eSh0yzpnLqhW4gMwV7cT9AAbLCswcrf08S0V2OcL3QTUupVEu36+PuM+wIrXpWuoVHeW0pIlp5r0z6jDBPUYMKBjeplReVLvwCsgGJBREPccD9TyZEXrAIPDgeA4Bibhvjiwiqx6d2OOe3b7P2c+7Sh2Mf99wNF3C9+pfPeix/yo5zE2PDt4d0cO36i/8UlvbuSJPUI/QUvRZ4C7wMBlMT"}' 
 </msg>
<msg timestamp="20220725 10:03:39.513" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:39 GMT', 'x-amzn-RequestId': '6d8b2632-5d33-434d-a09c-6e7f555285bc', 'x-amz-apigw-id': 'VzYxsFohyQ0FYcg=', 'X-Amzn-Trace-Id': 'Root=1-62de080a-25d51aa25a4e6def193f9281', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 061148a0ea305f6199bba8f216e438f4.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'HkwteEM7n3dPaXCP1GbIGZXtV0-j0eq6746ppW8xmT4vyzTo1etNXQ=='} 
 body={"data":"VOXXj2YoJKGhOv5e19kTJl2s7N4L/RULz7dVAsxUjFVaqNwq7l9b80+XcuUNmPI8zx4gApa6jLBEBCT7efywvEcn9wfMSU3ahf5tJ4poqX95Ooo2x35FmLg4YXsm55ffjHcvlM3TGt4lHgFaAycEfszCHD1ZmaWc1dmRX3Ff4PyMllFpj+Amq60c7yycsfCwTuPcpwoxpUc4B1r7jTBHaL2FT52xFAcbhd/W9dpmffWwnb2Un/vG4jSTBN4LtAe9+Oe6kRO8dU/u3SMQJcZGxYgahwHuXdyodgLJwX2aEAtQHI/thy06NlfHtv5oysTVtu+1iv/v2oGin+g6LNmjrhDg/VANv0hXcEsa1JmDWyvEnPT7GLfBuHt8PWic+3GcvP3jJjSj"} 
 </msg>
<msg timestamp="20220725 10:03:39.513" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:39.514" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:38.587" endtime="20220725 10:03:39.514"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.515" level="INFO">${RESPONSE_ENCRYPT_TYPE} = VOXXj2YoJKGhOv5e19kTJl2s7N4L/RULz7dVAsxUjFVaqNwq7l9b80+XcuUNmPI8zx4gApa6jLBEBCT7efywvEcn9wfMSU3ahf5tJ4poqX95Ooo2x35FmLg4YXsm55ffjHcvlM3TGt4lHgFaAycEfszCHD1ZmaWc1dmRX3Ff4PyMllFpj+Amq60c7yycsfCwTuPcpwox...</msg>
<status status="PASS" starttime="20220725 10:03:39.514" endtime="20220725 10:03:39.515"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:39.517" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text VOXXj2YoJKGhOv5e19kTJl2s7N4L/RULz7dVAsxUjFVaqNwq7l9b80+XcuUNmPI8zx4gApa6jLBEBCT7efywvEcn9wfMSU3ahf5tJ4poqX95Ooo2x35FmLg4YXsm55ffjHcvlM3TGt4lHgFaAycEfszCHD1ZmaWc1dmRX3Ff4PyMllFpj+Amq60c7yycsfCwTuPcpwoxpUc4B1r7jTBHaL2FT52xFAcbhd/W9dpmffWwnb2Un/vG4jSTBN4LtAe9+Oe6kRO8dU/u3SMQJcZGxYgahwHuXdyodgLJwX2aEAtQHI/thy06NlfHtv5oysTVtu+1iv/v2oGin+g6LNmjrhDg/VANv0hXcEsa1JmDWyvEnPT7GLfBuHt8PWic+3GcvP3jJjSj</msg>
<msg timestamp="20220725 10:03:39.524" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:39.675" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:39.516" endtime="20220725 10:03:39.675"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:39.677" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:39.676" endtime="20220725 10:03:39.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.677" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500024"}}</msg>
<status status="PASS" starttime="20220725 10:03:39.677" endtime="20220725 10:03:39.677"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.678" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:03:39.677" endtime="20220725 10:03:39.678"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:39.679" endtime="20220725 10:03:39.679"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:39.516" endtime="20220725 10:03:39.679"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:39.680" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:03:39.679" endtime="20220725 10:03:39.680"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.706" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:39.680" endtime="20220725 10:03:39.706"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.707" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:39.706" endtime="20220725 10:03:39.707"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.731" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:39.707" endtime="20220725 10:03:39.731"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.731" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:39.731" endtime="20220725 10:03:39.731"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.755" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:39.732" endtime="20220725 10:03:39.755"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.756" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:39.755" endtime="20220725 10:03:39.756"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.817" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:39.756" endtime="20220725 10:03:39.818"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.818" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:39.818" endtime="20220725 10:03:39.819"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.842" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:03:39.819" endtime="20220725 10:03:39.842"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.843" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:03:39.843" endtime="20220725 10:03:39.843"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.866" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:39.843" endtime="20220725 10:03:39.866"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.867" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:39.867" endtime="20220725 10:03:39.867"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.891" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:39.867" endtime="20220725 10:03:39.891"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.892" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:39.891" endtime="20220725 10:03:39.892"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.915" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:03:39.892" endtime="20220725 10:03:39.915"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.915" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:03:39.915" endtime="20220725 10:03:39.915"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:39.940" level="INFO">${values_code} = ['EQ2022072500024']</msg>
<status status="PASS" starttime="20220725 10:03:39.916" endtime="20220725 10:03:39.940"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.941" level="INFO">${TRANS_ID} = EQ2022072500024</msg>
<status status="PASS" starttime="20220725 10:03:39.940" endtime="20220725 10:03:39.941"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:38.405" endtime="20220725 10:03:39.941"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:39.942" endtime="20220725 10:03:39.943"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.943" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w'}</msg>
<status status="PASS" starttime="20220725 10:03:39.943" endtime="20220725 10:03:39.943"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.944" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:39.943" endtime="20220725 10:03:39.944"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:39.946" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:39.945" endtime="20220725 10:03:39.946"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:39.945" endtime="20220725 10:03:39.946"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:39.947" endtime="20220725 10:03:39.948"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:39.949" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:39.955" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:40.111" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:39.948" endtime="20220725 10:03:40.111"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:40.112" endtime="20220725 10:03:40.113"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:39.947" endtime="20220725 10:03:40.113"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:40.115" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:40.115" level="INFO">${TextFileContent} = IlftAF4p4eZ808vpNOeP5SuefE+I12aridQDIz0QEP0Y4n5Aex3T36Ml9GLfJ9WfQzRgVWgcgltkwEuG6adXsIbuzhP0476ZcQ/1avt0a4L0leI=</msg>
<status status="PASS" starttime="20220725 10:03:40.114" endtime="20220725 10:03:40.115"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:40.116" level="INFO">${RESULT_ENCRYPT_DATA} = IlftAF4p4eZ808vpNOeP5SuefE+I12aridQDIz0QEP0Y4n5Aex3T36Ml9GLfJ9WfQzRgVWgcgltkwEuG6adXsIbuzhP0476ZcQ/1avt0a4L0leI=</msg>
<status status="PASS" starttime="20220725 10:03:40.116" endtime="20220725 10:03:40.116"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:40.113" endtime="20220725 10:03:40.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:40.118" level="INFO">&amp;{body} = { data=IlftAF4p4eZ808vpNOeP5SuefE+I12aridQDIz0QEP0Y4n5Aex3T36Ml9GLfJ9WfQzRgVWgcgltkwEuG6adXsIbuzhP0476ZcQ/1avt0a4L0leI= }</msg>
<status status="PASS" starttime="20220725 10:03:40.117" endtime="20220725 10:03:40.118"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:40.816" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "IlftAF4p4eZ808vpNOeP5SuefE+I12aridQDIz0QEP0Y4n5Aex3T36Ml9GLfJ9WfQzRgVWgcgltkwEuG6adXsIbuzhP0476ZcQ/1avt0a4L0leI="}' 
 </msg>
<msg timestamp="20220725 10:03:40.816" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:40 GMT', 'x-amzn-RequestId': '5f5512b1-bc3b-4352-a746-65c385caf79e', 'x-amz-apigw-id': 'VzYx8HyxyQ0FZkA=', 'X-Amzn-Trace-Id': 'Root=1-62de080c-3f8db76d2e0d1bac0f35a9dd', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 2066c4a4b283168427860c3d91649476.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'Iuiau_Yxe6YcnSwVsSWu0zHcU9raB43BKcLbCfJjpT9CV6PeufoJXA=='} 
 body={"data":"FxPnOESKmn6z/vXZtewvuRRAaaDiWtT1tBeaqGCCwjfipugHuI7ti9Exr/CbKDFxpZ1yfYbfd45Tf6aHXjngXljFPUS1yjonv4zGwNhCsfFGJXXddo+9vcFQXb01aA+G637NzTomS/8vWiy54QpAQRFky0c1EisEUMppAJGgx4y2UGDswL8I5tisy8sj+q84AJe6HJLXJw8qViJ9qUMB5Z9k93F/HwIyJXNoJdLQE1x0T7glxNl02W68WK9hky6cajsu4ttOXIP2/wdNKuC0F/U="} 
 </msg>
<msg timestamp="20220725 10:03:40.816" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:40.817" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:40.118" endtime="20220725 10:03:40.817"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:40.818" level="INFO">${RESPONSE_ENCRYPT_TYPE} = FxPnOESKmn6z/vXZtewvuRRAaaDiWtT1tBeaqGCCwjfipugHuI7ti9Exr/CbKDFxpZ1yfYbfd45Tf6aHXjngXljFPUS1yjonv4zGwNhCsfFGJXXddo+9vcFQXb01aA+G637NzTomS/8vWiy54QpAQRFky0c1EisEUMppAJGgx4y2UGDswL8I5tisy8sj+q84AJe6HJLX...</msg>
<status status="PASS" starttime="20220725 10:03:40.817" endtime="20220725 10:03:40.818"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:40.820" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text FxPnOESKmn6z/vXZtewvuRRAaaDiWtT1tBeaqGCCwjfipugHuI7ti9Exr/CbKDFxpZ1yfYbfd45Tf6aHXjngXljFPUS1yjonv4zGwNhCsfFGJXXddo+9vcFQXb01aA+G637NzTomS/8vWiy54QpAQRFky0c1EisEUMppAJGgx4y2UGDswL8I5tisy8sj+q84AJe6HJLXJw8qViJ9qUMB5Z9k93F/HwIyJXNoJdLQE1x0T7glxNl02W68WK9hky6cajsu4ttOXIP2/wdNKuC0F/U=</msg>
<msg timestamp="20220725 10:03:40.827" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:40.982" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:40.820" endtime="20220725 10:03:40.982"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:40.984" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:40.983" endtime="20220725 10:03:40.984"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:40.984" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:40.984" endtime="20220725 10:03:40.985"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:40.985" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:40.985" endtime="20220725 10:03:40.985"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:40.986" endtime="20220725 10:03:40.986"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:40.819" endtime="20220725 10:03:40.986"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:40.986" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:03:40.986" endtime="20220725 10:03:40.987"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:41.014" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:40.987" endtime="20220725 10:03:41.014"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.015" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:41.014" endtime="20220725 10:03:41.015"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:39.941" endtime="20220725 10:03:41.015"></status>
</kw>
<kw name="Validate_customer_qr_code_journey" library="validate_customer_API_page">
<arguments>
<arg>13</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:41.016" endtime="20220725 10:03:41.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.017" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w'}</msg>
<status status="PASS" starttime="20220725 10:03:41.017" endtime="20220725 10:03:41.017"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.018" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:41.017" endtime="20220725 10:03:41.019"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:41.020" endtime="20220725 10:03:41.330"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:03:41.331" level="INFO">${get_cid} = 1480700041812</msg>
<status status="PASS" starttime="20220725 10:03:41.331" endtime="20220725 10:03:41.331"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:03:41.332" level="INFO">${name} = จิรัฎฐ์</msg>
<status status="PASS" starttime="20220725 10:03:41.332" endtime="20220725 10:03:41.332"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:03:41.333" level="INFO">${surname} = เอกฐิติวรนันท์</msg>
<status status="PASS" starttime="20220725 10:03:41.332" endtime="20220725 10:03:41.333"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:03:41.334" level="INFO">${name_en} = Jirath</msg>
<status status="PASS" starttime="20220725 10:03:41.333" endtime="20220725 10:03:41.334"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:03:41.334" level="INFO">${surname_en} = Eakthitiworranun</msg>
<status status="PASS" starttime="20220725 10:03:41.334" endtime="20220725 10:03:41.334"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:03:41.335" level="INFO">${bithdate} = 11-12-2529</msg>
<status status="PASS" starttime="20220725 10:03:41.335" endtime="20220725 10:03:41.335"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:03:41.336" level="INFO">${get_mobile} = 0962826619</msg>
<status status="PASS" starttime="20220725 10:03:41.335" endtime="20220725 10:03:41.336"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:03:41.336" level="INFO">${get_lasercode} = ME1128849829</msg>
<status status="PASS" starttime="20220725 10:03:41.336" endtime="20220725 10:03:41.336"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.337" level="INFO">${GET_CID} = 1480700041812</msg>
<status status="PASS" starttime="20220725 10:03:41.336" endtime="20220725 10:03:41.337"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.337" level="INFO">${FIRST_NAME} = จิรัฎฐ์</msg>
<status status="PASS" starttime="20220725 10:03:41.337" endtime="20220725 10:03:41.337"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.338" level="INFO">${SURNAME} = เอกฐิติวรนันท์</msg>
<status status="PASS" starttime="20220725 10:03:41.338" endtime="20220725 10:03:41.338"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.339" level="INFO">${FIRST_NAME_EN} = Jirath</msg>
<status status="PASS" starttime="20220725 10:03:41.339" endtime="20220725 10:03:41.339"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.340" level="INFO">${SURNAME_EN} = Eakthitiworranun</msg>
<status status="PASS" starttime="20220725 10:03:41.340" endtime="20220725 10:03:41.340"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.341" level="INFO">${BIRTH_DATE} = 11-12-2529</msg>
<status status="PASS" starttime="20220725 10:03:41.341" endtime="20220725 10:03:41.341"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.342" level="INFO">${GET_MOBILE} = 0962826619</msg>
<status status="PASS" starttime="20220725 10:03:41.341" endtime="20220725 10:03:41.342"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.342" level="INFO">${GET_LASER_CODE} = ME1128849829</msg>
<status status="PASS" starttime="20220725 10:03:41.342" endtime="20220725 10:03:41.342"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:41.342" endtime="20220725 10:03:41.343"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:41.019" endtime="20220725 10:03:41.343"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.344" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:41.344" endtime="20220725 10:03:41.345"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:41.343" endtime="20220725 10:03:41.345"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:41.345" endtime="20220725 10:03:41.345"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:41.346" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:41.352" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:41.531" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:41.346" endtime="20220725 10:03:41.532"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:41.533" endtime="20220725 10:03:41.533"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:41.345" endtime="20220725 10:03:41.534"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:41.536" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:41.537" level="INFO">${TextFileContent} = +QwkRNo3OovMXKgU00GurGk+WGDVp+wCxAcztGA419fD/h9QosNWVuPNIrDC6/ismjyIanWrZ7jSE+fCmXMxbSWMInLYM1HuA6no8Z94IAoh4ZG1xE30wBoAqBzCLfL6GO6wl+i6W2Fhbv5zpLgTd6a2sdRfI39zrreMsMIP5I7DOcUP9PuqWwo9N8gxonP6V7Cvdh84...</msg>
<status status="PASS" starttime="20220725 10:03:41.536" endtime="20220725 10:03:41.538"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:41.540" level="INFO">${RESULT_ENCRYPT_DATA} = +QwkRNo3OovMXKgU00GurGk+WGDVp+wCxAcztGA419fD/h9QosNWVuPNIrDC6/ismjyIanWrZ7jSE+fCmXMxbSWMInLYM1HuA6no8Z94IAoh4ZG1xE30wBoAqBzCLfL6GO6wl+i6W2Fhbv5zpLgTd6a2sdRfI39zrreMsMIP5I7DOcUP9PuqWwo9N8gxonP6V7Cvdh84...</msg>
<status status="PASS" starttime="20220725 10:03:41.538" endtime="20220725 10:03:41.540"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:41.534" endtime="20220725 10:03:41.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:41.541" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:41.542" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:41.543" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:41.544" level="INFO">${body} = {'data': '+QwkRNo3OovMXKgU00GurGk+WGDVp+wCxAcztGA419fD/h9QosNWVuPNIrDC6/ismjyIanWrZ7jSE+fCmXMxbSWMInLYM1HuA6no8Z94IAoh4ZG1xE30wBoAqBzCLfL6GO6wl+i6W2Fhbv5zpLgTd6a2sdRfI39zrreMsMIP5I7DOcUP9PuqWwo9N8gxon...</msg>
<status status="PASS" starttime="20220725 10:03:41.541" endtime="20220725 10:03:41.544"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:42.540" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiNzEzMGNiMjMtZmI1Ny00ZDI1LWI4OTAtYjIzN2U0ZDYxMDVmIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMTcsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUxNywiaWF0IjoxNjU4NzE4MjE3fQ.AOnj1vjEKdVprePQMBjZqF4uK8SoOsHEXseCNpC9zDygS7p_mXdeqbrQkaVawFmL2UIFA5mciB2DYBcoVQ7y9wiI0UCHRwbjexdvyMUA7KWSyR2B8in3Ub5V_IRxmYnh7RKuk7JuDKq2VBm38oAVB9jX3CoimP5z88viJ71f3wPcibMDrrKwGl6SshQwr6C4hQMNKZdKxJ6gXsACTIiFBHLomhRD11__U2cGqHGUJG9x3vOHmDxBN_LCYdFsn21FOuQ0mxdJ4D-gLen6Rb9HdM4J4gOa9YhSZsJVYZlLyyFN11hAjfGoB9k4jvlmYJifO3lPd6yIst8WvX6oLuAA8w', 'Content-Length': '63108', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:42.541" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '467', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:42 GMT', 'x-amzn-RequestId': '6e947abb-2d85-4bf1-b903-9ac776135db5', 'x-amz-apigw-id': 'VzYyKHvMSQ0FdFw=', 'X-Amzn-Trace-Id': 'Root=1-62de080d-77d6e0906902c33b362bd400', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 616973cc1dfe80dcd1b7e154b5e42f56.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'WQwyYd-TpmrybDmwCxYTvrA96LHbGIwnqyDTCUOQPL2jiUO9zUr2dQ=='} 
 body={"data":"DBK45yligldKSquOMFkA8goRLEaO4oaKqbd9lsrLy9D9x+0G7xdwv1UePOoFLLalybgZzihcxkOFVRtzxllPKwo2Pl5SPRhA2WDVnoOWGcMejIni6aD16WTb1uA9nh6Ef9BPFnynixWmvqDJUdle1JlIhHr/7KvCId8sACZWPE6fYWI6Pop/fRnsDIjrZrX75rJ+HIZbAMvzvawdqEGBLmQ44KuhEz3LM4TSZn/Z6V7gOwCOQIUqOlurAYla68XgIqI3XlVLk92T+UHeAlo/eUS3wY/DzFQ2jPK+VjOJcl6IPxr1za5U2nF3s3tr37ugtRlNsppIrRbLiuJmySR1TxX2y8sQ8vmBxueS5nfv20H+2BKylQhJZrfgwm9LN8J8LelhGjw69ACZtHMwb9G0lDrmAPgC8Lh1Q/kPo8FPHitcxDsc0jM0An+Xgs2p2snOYSQ8BA=="} 
 </msg>
<msg timestamp="20220725 10:03:42.541" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:42.541" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:41.544" endtime="20220725 10:03:42.541"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.542" level="INFO">${RESPONSE_ENCRYPT_TYPE} = DBK45yligldKSquOMFkA8goRLEaO4oaKqbd9lsrLy9D9x+0G7xdwv1UePOoFLLalybgZzihcxkOFVRtzxllPKwo2Pl5SPRhA2WDVnoOWGcMejIni6aD16WTb1uA9nh6Ef9BPFnynixWmvqDJUdle1JlIhHr/7KvCId8sACZWPE6fYWI6Pop/fRnsDIjrZrX75rJ+HIZb...</msg>
<status status="PASS" starttime="20220725 10:03:42.542" endtime="20220725 10:03:42.542"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:42.544" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text DBK45yligldKSquOMFkA8goRLEaO4oaKqbd9lsrLy9D9x+0G7xdwv1UePOoFLLalybgZzihcxkOFVRtzxllPKwo2Pl5SPRhA2WDVnoOWGcMejIni6aD16WTb1uA9nh6Ef9BPFnynixWmvqDJUdle1JlIhHr/7KvCId8sACZWPE6fYWI6Pop/fRnsDIjrZrX75rJ+HIZbAMvzvawdqEGBLmQ44KuhEz3LM4TSZn/Z6V7gOwCOQIUqOlurAYla68XgIqI3XlVLk92T+UHeAlo/eUS3wY/DzFQ2jPK+VjOJcl6IPxr1za5U2nF3s3tr37ugtRlNsppIrRbLiuJmySR1TxX2y8sQ8vmBxueS5nfv20H+2BKylQhJZrfgwm9LN8J8LelhGjw69ACZtHMwb9G0lDrmAPgC8Lh1Q/kPo8FPHitcxDsc0jM0An+Xgs2p2snOYSQ8BA==</msg>
<msg timestamp="20220725 10:03:42.553" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:42.707" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:42.543" endtime="20220725 10:03:42.707"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:42.708" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:42.708" endtime="20220725 10:03:42.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.709" level="INFO">{"status":{"code":"2018","message":"QR match fail","remark":"","user_code":"E0012","user_message_en":"The information of ID card and QR code is not matched.","user_message_th":"ข้อมูลบัตรประจำตัวประชาชนและ QR Code ไม่ตรงกัน"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:42.709" endtime="20220725 10:03:42.709"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.710" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"2018","message":"QR match fail","remark":"","user_code":"E0012","user_message_en":"The information of ID card and QR code is not matched.","user_message_th":"ข้อมูลบัตรประจำตัวประชา...</msg>
<status status="PASS" starttime="20220725 10:03:42.710" endtime="20220725 10:03:42.711"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.711" endtime="20220725 10:03:42.711"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:42.543" endtime="20220725 10:03:42.711"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:42.712" level="INFO">${convert_result} = {'status': {'code': '2018', 'message': 'QR match fail', 'remark': '', 'user_code': 'E0012', 'user_message_en': 'The information of ID card and QR code is not matched.', 'user_message_th': 'ข้อมูลบัตรป...</msg>
<status status="PASS" starttime="20220725 10:03:42.712" endtime="20220725 10:03:42.712"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.737" level="INFO">${values_code} = ['2018']</msg>
<status status="PASS" starttime="20220725 10:03:42.712" endtime="20220725 10:03:42.737"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.738" level="INFO">${RESPONSE_CODE} = 2018</msg>
<status status="PASS" starttime="20220725 10:03:42.737" endtime="20220725 10:03:42.738"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.760" level="INFO">${values_code} = ['QR match fail']</msg>
<status status="PASS" starttime="20220725 10:03:42.738" endtime="20220725 10:03:42.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.761" level="INFO">${RESPONSE_MESSAGE} = QR match fail</msg>
<status status="PASS" starttime="20220725 10:03:42.761" endtime="20220725 10:03:42.761"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.783" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:42.761" endtime="20220725 10:03:42.784"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.784" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:42.784" endtime="20220725 10:03:42.784"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.808" level="INFO">${values_code} = ['E0012']</msg>
<status status="PASS" starttime="20220725 10:03:42.785" endtime="20220725 10:03:42.808"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.808" level="INFO">${RESPONSE_USERCODE} = E0012</msg>
<status status="PASS" starttime="20220725 10:03:42.808" endtime="20220725 10:03:42.808"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.831" level="INFO">${values_code} = ['The information of ID card and QR code is not matched.']</msg>
<status status="PASS" starttime="20220725 10:03:42.809" endtime="20220725 10:03:42.831"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.832" level="INFO">${RESPONSE_USER_EN} = The information of ID card and QR code is not matched.</msg>
<status status="PASS" starttime="20220725 10:03:42.832" endtime="20220725 10:03:42.832"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:42.856" level="INFO">${values_code} = ['ข้อมูลบัตรประจำตัวประชาชนและ QR Code ไม่ตรงกัน']</msg>
<status status="PASS" starttime="20220725 10:03:42.833" endtime="20220725 10:03:42.856"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:42.857" level="INFO">${RESPONSE_USER_TH} = ข้อมูลบัตรประจำตัวประชาชนและ QR Code ไม่ตรงกัน</msg>
<status status="PASS" starttime="20220725 10:03:42.857" endtime="20220725 10:03:42.857"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:41.015" endtime="20220725 10:03:42.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Modify_validate_api</arg>
<arg>3</arg>
</arguments>
<kw name="Save_Result_Modify_validate_api" library="save_data_excel_page">
<arguments>
<arg>3</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.859" endtime="20220725 10:03:42.939"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.939" endtime="20220725 10:03:42.940"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.940" endtime="20220725 10:03:42.940"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.941" endtime="20220725 10:03:42.941"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.941" endtime="20220725 10:03:42.942"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.942" endtime="20220725 10:03:42.943"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.943" endtime="20220725 10:03:42.943"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.943" endtime="20220725 10:03:42.944"></status>
</kw>
<kw name="Jira_api_page.Update_Jira_Status">
<msg timestamp="20220725 10:03:42.953" level="FAIL">No keyword with name 'Jira_api_page.Update_Jira_Status' found.</msg>
<status status="FAIL" starttime="20220725 10:03:42.952" endtime="20220725 10:03:42.953"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:42.953" endtime="20220725 10:03:43.028"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:43.029" endtime="20220725 10:03:43.029"></status>
</kw>
<status status="FAIL" starttime="20220725 10:03:42.859" endtime="20220725 10:03:43.029"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:42.858" endtime="20220725 10:03:43.029"></status>
</kw>
<doc>ทดสอบระบบ Modify validate customer API กรณี ลูกค้า Gen QR code ด้วย เลขบัตรประชาชนของคนอื่น และมา dipchip ด้วยบัตรประชาชนของตนเอง</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:03:35.058" endtime="20220725 10:03:43.029" critical="yes"></status>
</test>
<test id="s1-t7" name="Modify_Validate_customer_2">
<kw name="Generate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_GEN_QR}</arg>
<arg>partner-secret=${GET_PARTNER_SECRET}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:43.032" endtime="20220725 10:03:43.033"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${BOT_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.034" level="INFO">Creating Session using : alias=eKYC, url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:43.033" endtime="20220725 10:03:43.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>cid=${AUM}</arg>
<arg>twins_status=</arg>
<arg>twins_gender=</arg>
<arg>journey_code=JN003</arg>
<arg>consent_onetrust_version=</arg>
<arg>consent_internal_version=</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:43.035" level="INFO">&amp;{body} = { cid=0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4= | twins_status= | twins_gender= | journey_code=JN003 | consent_onetrust_version= | consent_internal_version= }</msg>
<status status="PASS" starttime="20220725 10:03:43.034" endtime="20220725 10:03:43.035"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GEN_QRCODE}</arg>
<arg>headers=&amp;{HEADER_GEN_QR}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:43.500" level="INFO">POST Request : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 path_url=/tcrb-platform-apipartner/v1/qr/generate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'Content-Type': 'application/json', 'partner-code': 'TCMB', 'partner-secret': '5Uz3FHuQvjFLP/iCNiFd4z9r2IJ1qWyKOuEZzuDNNvXMie1x3iSyyFnPxzMTzSLPI7mjp/gCbEFeINTrtOdl70FebH72XykTYCZ/P6Id8m0jIyJAHx8Toz3aeo/AMEJffMdD1xM5B19sLyQX8avTz1OnLKXJIwr6QexsC3XxJtermq5t9tJ1U1TxVqWcTIM8BXbR6T0fb26uR+dNQmGOi4FNnli4cS2b+dtnmLMjIQB6GKXwqGvfyTtHSx9BggM=', 'x-apigw-api-id': 'es59o179ie', 'Content-Length': '196'} 
 body=b'{"cid": "0I8SfCnkwkptBl1Z50x6mYNe0lbdJCRxMApy/0EMeYFwu59LCQxgxs4=", "twins_status": "", "twins_gender": "", "journey_code": "JN003", "consent_onetrust_version": "", "consent_internal_version": ""}' 
 </msg>
<msg timestamp="20220725 10:03:43.500" level="INFO">POST Response : url=https://api-preprod.tcrb-onlinebanking-privated-bottech.com/tcrb-platform-apipartner/v1/qr/generate 
 status=200, reason=OK 
 headers={'Date': 'Mon, 25 Jul 2022 03:03:43 GMT', 'Content-Type': 'application/json', 'Content-Length': '267', 'Connection': 'keep-alive', 'Server': 'Server', 'x-amzn-RequestId': 'd880017b-b04a-48da-8445-88fc4fb805ff', 'x-amz-apigw-id': 'VzYyaFmlSQ0FteQ=', 'X-Amzn-Trace-Id': 'Root=1-62de080f-2d9c83c51078cfbf74991685'} 
 body={"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"qr":"2431517886624066999804523","qr_expired":"2022-07-26 23:59:59","qr_status":"active"}} 
 </msg>
<msg timestamp="20220725 10:03:43.500" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'api-preprod.tcrb-onlinebanking-privated-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:43.501" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:43.035" endtime="20220725 10:03:43.501"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${response.json()["status"]["code"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.502" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:43.501" endtime="20220725 10:03:43.502"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${response.json()["status"]["message"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.503" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:43.502" endtime="20220725 10:03:43.503"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${response.json()["status"]["remark"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.504" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:43.504" endtime="20220725 10:03:43.504"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_VALUE}</arg>
<arg>${response.json()["data"]["qr"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.505" level="INFO">${QR_VALUE} = 2431517886624066999804523</msg>
<status status="PASS" starttime="20220725 10:03:43.505" endtime="20220725 10:03:43.506"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_EXPIRE}</arg>
<arg>${response.json()["data"]["qr_expired"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.506" level="INFO">${QR_EXPIRE} = 2022-07-26 23:59:59</msg>
<status status="PASS" starttime="20220725 10:03:43.506" endtime="20220725 10:03:43.507"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_STATUS}</arg>
<arg>${response.json()["data"]["qr_status"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.507" level="INFO">${QR_STATUS} = active</msg>
<status status="PASS" starttime="20220725 10:03:43.507" endtime="20220725 10:03:43.507"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_API}</arg>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.509" level="INFO">${RESPONSE_API} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"\xe0\xb8\x94\xe0\xb8\xb3\xe0\xb9\x80\xe0\xb8\x99\xe0\xb8\xb4\xe0\xb8\x99\xe0\xb...</msg>
<status status="PASS" starttime="20220725 10:03:43.508" endtime="20220725 10:03:43.509"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.031" endtime="20220725 10:03:43.509"></status>
</kw>
<kw name="Start Project" library="Main">
<kw name="Login_Get_Token" library="Login_api_page">
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{"username":"ekyc003","password":"P@ssw0rd","partner_code":"TCRB-TABLET"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.513" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:43.512" endtime="20220725 10:03:43.513"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.511" endtime="20220725 10:03:43.513"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:43.514" endtime="20220725 10:03:43.514"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:43.515" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:43.521" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:43.687" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:43.514" endtime="20220725 10:03:43.688"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:43.689" endtime="20220725 10:03:43.689"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.513" endtime="20220725 10:03:43.689"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:43.691" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:43.691" level="INFO">${TextFileContent} = KJMPyXTJF2yd9ClYcZZ9469giOObbJQvkTjuVlOj5bQvF2TB0E1TrG5mgSmFoyBpd+UNeZUAY0b6ls+PApzw4GavFRfbTlMV3GsViAMmX7bZXcRjMMcTLzGmhJpZCx38LwLNBgA=</msg>
<status status="PASS" starttime="20220725 10:03:43.690" endtime="20220725 10:03:43.691"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.693" level="INFO">${RESULT_ENCRYPT_DATA} = KJMPyXTJF2yd9ClYcZZ9469giOObbJQvkTjuVlOj5bQvF2TB0E1TrG5mgSmFoyBpd+UNeZUAY0b6ls+PApzw4GavFRfbTlMV3GsViAMmX7bZXcRjMMcTLzGmhJpZCx38LwLNBgA=</msg>
<status status="PASS" starttime="20220725 10:03:43.692" endtime="20220725 10:03:43.694"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.690" endtime="20220725 10:03:43.694"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:43.695" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:43.694" endtime="20220725 10:03:43.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:43.698" level="INFO">&amp;{body} = { data=KJMPyXTJF2yd9ClYcZZ9469giOObbJQvkTjuVlOj5bQvF2TB0E1TrG5mgSmFoyBpd+UNeZUAY0b6ls+PApzw4GavFRfbTlMV3GsViAMmX7bZXcRjMMcTLzGmhJpZCx38LwLNBgA= }</msg>
<status status="PASS" starttime="20220725 10:03:43.698" endtime="20220725 10:03:43.698"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_LOGIN}</arg>
<arg>headers=&amp;{HEADER_LOGIN}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:46.010" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 path_url=/tcrb-platform-kyc/v1/login 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'hfverbnykjadwedfasvbetj', 'Content-Length': '148', 'Content-Type': 'application/json'} 
 body=b'{"data": "KJMPyXTJF2yd9ClYcZZ9469giOObbJQvkTjuVlOj5bQvF2TB0E1TrG5mgSmFoyBpd+UNeZUAY0b6ls+PApzw4GavFRfbTlMV3GsViAMmX7bZXcRjMMcTLzGmhJpZCx38LwLNBgA="}' 
 </msg>
<msg timestamp="20220725 10:03:46.010" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/login 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '5307', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:46 GMT', 'x-amzn-RequestId': '375dfb56-ee70-412f-8a06-3a9c8f88dce4', 'x-amz-apigw-id': 'VzYyfHhtyQ0FnUA=', 'X-Amzn-Trace-Id': 'Root=1-62de080f-6878cf2d51bb285409556f17', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 2e8acdffa9374e6a45e33a53b84b8648.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'c9K6c2U0BUIrj4COfQnM16fMwPqfyeomqxWZnGcHlrFgv_txuuoNrg=='} 
 body={"data":"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"} 
 </msg>
<msg timestamp="20220725 10:03:46.010" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:46.011" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:43.699" endtime="20220725 10:03:46.011"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.012" level="INFO">${RESPONSE_ENCRYPT_TYPE} = kNq0W69fRs9FTM6ZFoekSlYa/H78Ia6LpflZsGxDtBaEDVjDPiL7bfu2Z92Oq6XuymSEoDXCy1v2TgKcYTNQWqQ0fxDB6ss7umxbMdFFALNauXeqLrvgOtJhRUZIG8IkxKMvhcpo1UVJDzKZa974O3BrxWyaQ+TgfHLVa2pxwv9KETwXASHyjxS/6syajURXos+EIO0j...</msg>
<status status="PASS" starttime="20220725 10:03:46.011" endtime="20220725 10:03:46.012"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:46.014" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text 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</msg>
<msg timestamp="20220725 10:03:46.019" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:46.169" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:46.013" endtime="20220725 10:03:46.169"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:46.170" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:46.170" endtime="20220725 10:03:46.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.171" level="INFO">{"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBranch"}],"parameters":{"session_timeout":300,"card_reader_trial_time":3,"shutter_count_down":5},"access_token":"eyJraWQiOiJqZFo0Y1lWSENXV0diUkRGa3JLV3VIeWcwNEpsd2ZpUVg2YU1aM0piTUpNPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJldmVudF9pZCI6IjNhMjA2ZGNjLWE2N2EtNDAyOS05Njg1LWM2NjYxN2I5Y2FlNyIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJleHAiOjE2NTg3MTg1MjUsImlhdCI6MTY1ODcxODIyNSwianRpIjoiM2NmODk3YjgtOGY0ZS00NTcwLTg1ODAtYjZiNzY1OThkZjU2IiwiY2xpZW50X2lkIjoiMml0bHNrcnFwa2xmMWg0cDB0c2F2azFra20iLCJ1c2VybmFtZSI6ImVreWMwMDMifQ.ZIzk5lTZqjZFfdHrZoQ35hZXGkYnxLcnBFp3UKxesbozhC0o2lG5R-QC4NxlRJUocf4X1eT6WXpFyV0atGKD7XyVXx_ZGt5EbxmzmbL62rmdbzlb1LiF0h9PII5kYb6CcXKLfky5lMGdH83HUbgUvaldxAR7PxpZaD6QhxPwAfqabkrLBxQQSAe1Xx6oxlSbuZtFgPbthMd695-dNaj4RPB4ff2aXSotpqbm3V5dpDV6upzKXubgWTlzIEUqjAHq7-ZEJoWGJAVLFrF-j9E406bgN1TVw7qipnFeIccjq7peKd_hpgwHdMRdq-0AV64qBQ3jKuLKI8Z8T0CC2tv0fA","refresh_token":"eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.gTtNRAND12SunOUmJ2mZQiu0XiUnStQqZMtDZlsNGKsTZkYz-LSQwIlis5MjeNlYFrOEeadtIuq04BD-VEZdjS-Ev-K3U7Fjn4A4LWioKr_4XjHKDZ-PMx_0p-EiFcDbR4kuTywqYj1pzG25pfbA-7kxQen22w4qM4fFlxWJbb37YIp0bAlSQ87ccS0oI6hrBUx8cg_gOednDHRSbmXxToczux8FcChIwiDGocnKZ-YOgZWk4CQFEGGhchQgUr8tTP5FuayT8zLncuzwrwQElqS7OY2ethgFVXxeKrnzWtKYdTPnlKblyvBwIMVQziZPD3RAU1Dls28vZ7QDJD4axA.Cwf-rr66Qcfb7U2Q.D9mtM8568aAI96pcMEu3Q7HtW9z1IfAbt3xEUePcvQR4rFfIPnNbvViPGfA55Wg8jGkt2bRacyZzxhrFX6bUDV_glpE37WOJs9On6Rehv-eFBNOgmdTpp-qAD2t5I0c2VdASmI-zcT6-8vCsYELKn2MNxlnZU-9BtaZ6jbTRR1m1Q0ueGG-Nrsx_42N7iZZ-Wu_IIOpQr0gLzwe5Pe695D3Q4CW1zmkSZ5MsWq8QfuZV4ZD-uvo8GY22oEBJSnwO5IjmGBQEUMhWcL7RAEltUnWOLwBb1-lMvf6-9Dq2N38qCEA-c6u0EKiJcQiJGqzI6zh4tkXxmJPPOlgrv65LvOexMxUa02-nqSjloi0_LLfge4ipPjjRuwzQZbBUTWtdDeNZCqnanUm-DGwG0ixFgSF_7ybMBmRiqmRiSmxDC8iPwZGV_ibDyguHR9Ni1TBo3q6R9TwumAuxO_jcTBgdsdrQMxUrruXfHiPc3WmvA7gdiSovNCBpmrIY19pI1hUeZUyCyS5w_7o5vzE8N6_fFwi-mef06gsoBPgqxnL1-1lr66HU9SB9-PuY12K22c3k6QYMjeHnzt1XqZDXUuHfEyZV2dlsNP3eOdR256bW3KbG_p1JjfCG_z07229DRUV6QDPwEGxbI90iuOVBCLmuRfRnrdU0SW-FK6kM0hHF8uP5MMlVz44244KEp-OMSP3G54fENnHLxB4MswoaSwk3nfAQBOHAmAHZ-D62kYm4x6SRuQa1yfL4cnFSWofKgRoPD69qSM7zzedX7E54P70CVTT3SglNY4f3phGg4_qm-Ls8CwSAipzYrbLyzk7AuhWjqit7XzMOaT0V12am7ROiNMEYk7T3OeyEUasnh1QSsdgnY-uSRX7HMPJuF0BSw8NINMtjdOMdzdsqYG0vE2B89UqbB1FK5N65n_f7ZK5JtB4f3vHPkPYamObzTsfPNs6Ah8_Wt07-dqHvKryEvyrMVIlWCdGsgKNUK8sA3-R221EYpLWVShgkq8nvxYJ6CdNvlReufPD7M-rZQktAOS28N65DnPzlOU0mAxX1wsmGc5larBPhPMuvRDx8jWmUOxN601FOnL-TpCFnWU1AK2ODF1DnjH5vxQxC5-2xxuZF0gAS5wU5IxIr_zRelWiUTYjFxaGpl7O0uQDUJtbVnYnEmdY29jV0R1LD64gbYx8KNkbHcycPxV_rO5CZgHqsvJMPMdvi68cptuUdDfKQk_oYmaD5BjGB-smMnDbEiC9N24BW4eCS_lvv_5eM6ZmnXOgJypDRF8uW37XqoygPOKZV5e0qS-_q.tTzhEhj4M7a3MjIZ137toQ","id_token":"eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw"}}</msg>
<status status="PASS" starttime="20220725 10:03:46.171" endtime="20220725 10:03:46.171"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.172" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":null,"user_code":null,"user_message_en":null,"user_message_th":null},"data":{"name":"TB0003","surname":"","username":"ekyc003","role":[{"name":"StfBr...</msg>
<status status="PASS" starttime="20220725 10:03:46.172" endtime="20220725 10:03:46.172"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:46.173" endtime="20220725 10:03:46.173"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:46.012" endtime="20220725 10:03:46.173"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:46.174" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': None, 'user_code': None, 'user_message_en': None, 'user_message_th': None}, 'data': {'name': 'TB0003', 'surname': '', 'username': 'ekyc003', 'r...</msg>
<status status="PASS" starttime="20220725 10:03:46.173" endtime="20220725 10:03:46.174"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..id_token</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20220725 10:03:46.199" level="INFO">${values} = ['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWt...</msg>
<status status="PASS" starttime="20220725 10:03:46.174" endtime="20220725 10:03:46.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.200" level="INFO">['eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw']</msg>
<status status="PASS" starttime="20220725 10:03:46.200" endtime="20220725 10:03:46.200"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOGIN_IDTOKEN}</arg>
<arg>${values[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.201" level="INFO">${LOGIN_IDTOKEN} = eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrb...</msg>
<status status="PASS" starttime="20220725 10:03:46.200" endtime="20220725 10:03:46.201"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.511" endtime="20220725 10:03:46.201"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:43.510" endtime="20220725 10:03:46.201"></status>
</kw>
<kw name="Validate_QR_Code_for_test_qrstamp_scene" library="QR_code_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:46.202" endtime="20220725 10:03:46.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.203" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw'}</msg>
<status status="PASS" starttime="20220725 10:03:46.203" endtime="20220725 10:03:46.203"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.204" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:46.203" endtime="20220725 10:03:46.205"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "qr": "${QR_VALUE}", "latitude": "13.8694526", "longitude": "100.7180486", "agent_id": "ekyc003", "agent_name": "TB0003 ", "device_name": "SM-P585Y/samsung", "device_ip": "192.168.2.42", "imei": "abc" }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.206" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:46.206" endtime="20220725 10:03:46.207"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:46.205" endtime="20220725 10:03:46.207"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:46.208" endtime="20220725 10:03:46.208"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:46.209" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:46.215" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:46.369" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:46.208" endtime="20220725 10:03:46.370"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:46.371" endtime="20220725 10:03:46.371"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:46.207" endtime="20220725 10:03:46.371"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:46.373" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:46.374" level="INFO">${TextFileContent} = CaQRuVa5pus4lOeXxML2bzByTc8lv0M+T2rugYgOuiEUQS2Z5nDJ2ZnktByhj+qt35QpIpDBeZKdki+Cu9wOHfKBHxox2sm+6JFjLHpTyv6yt2BDZM1YLV2mcW7E4mxoOaah1xXm+HHh7KAMNMGzQ2voWY0Cvi/GVKoeY2dM/XknuTbxPZb1dtLBtFoPk+QR33BlNRys...</msg>
<status status="PASS" starttime="20220725 10:03:46.373" endtime="20220725 10:03:46.374"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:46.375" level="INFO">${RESULT_ENCRYPT_DATA} = CaQRuVa5pus4lOeXxML2bzByTc8lv0M+T2rugYgOuiEUQS2Z5nDJ2ZnktByhj+qt35QpIpDBeZKdki+Cu9wOHfKBHxox2sm+6JFjLHpTyv6yt2BDZM1YLV2mcW7E4mxoOaah1xXm+HHh7KAMNMGzQ2voWY0Cvi/GVKoeY2dM/XknuTbxPZb1dtLBtFoPk+QR33BlNRys...</msg>
<status status="PASS" starttime="20220725 10:03:46.374" endtime="20220725 10:03:46.375"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:46.372" endtime="20220725 10:03:46.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:46.377" level="INFO">&amp;{body} = { data=CaQRuVa5pus4lOeXxML2bzByTc8lv0M+T2rugYgOuiEUQS2Z5nDJ2ZnktByhj+qt35QpIpDBeZKdki+Cu9wOHfKBHxox2sm+6JFjLHpTyv6yt2BDZM1YLV2mcW7E4mxoOaah1xXm+HHh7KAMNMGzQ2voWY0Cvi/GVKoeY2dM/XknuTbxPZb1dtLBtFoPk+QR3...</msg>
<status status="PASS" starttime="20220725 10:03:46.376" endtime="20220725 10:03:46.377"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_VALIDATE_QRCODE}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
<arg>expected_status=anything</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:47.070" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 path_url=/tcrb-platform-kyc/v1/qr/validate 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw', 'Content-Length': '340', 'Content-Type': 'application/json'} 
 body=b'{"data": "CaQRuVa5pus4lOeXxML2bzByTc8lv0M+T2rugYgOuiEUQS2Z5nDJ2ZnktByhj+qt35QpIpDBeZKdki+Cu9wOHfKBHxox2sm+6JFjLHpTyv6yt2BDZM1YLV2mcW7E4mxoOaah1xXm+HHh7KAMNMGzQ2voWY0Cvi/GVKoeY2dM/XknuTbxPZb1dtLBtFoPk+QR33BlNRyssZJo3KzisWab0sWeTficMYxpY34WoTZ0M/NFU0UEca43J3Ppbq4rY0LHmAF7nZ2YeDMIGhZs9PG2dt2D2zx0EdzN9ujpU6oapDF+6WS8YKN3bXj32k8O1vT0TqWjNAIe"}' 
 </msg>
<msg timestamp="20220725 10:03:47.071" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/qr/validate 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '403', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:47 GMT', 'x-amzn-RequestId': 'cb1b19a0-b9a6-401c-af66-36ad158a57a5', 'x-amz-apigw-id': 'VzYy6FhzSQ0Fsvw=', 'X-Amzn-Trace-Id': 'Root=1-62de0812-5b4a824133b040ba04461f2d', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 2066c4a4b283168427860c3d91649476.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'y3EoC8PfK0XUZz33BtBmnzbP5DV2ps-UX_Wp39JkOG1HlvuPrg_w9w=='} 
 body={"data":"xGpdPvv47GxmD38HxGD7rRF8VWN/vdYVVdD/lD9ZOAuAYRoUAsng9xQKf5Nd/mKYDzU7JWYMN/fVTJ9eXfO9QiITssjsqFju1I8rehcqdg6SDDBTPjNbX1zfDqa7ovg5bBQPYDa87mFO02aewE1GXukFGzRrmcePZD/Ovt8O4fiDY7DVwjq3X10OP9tcofWA897o+3coFoi6LUTVsaNd3U+ckh+TT0Abl5n32D8a6PyzD5jnaZ2Vk/xxWhy+LNjzMcF/wREwAyWVNbnVMNdac4SvPi5iU+kKHKJmuj/wcs65NpIcvyKQbePUo3VyOKYVTwFmmT1YyArstUTFTE4CqtI6U0g6Bxdbhns8FhIFQY+2HkRrucYY64brqRP5T1JZdVrsA3TO"} 
 </msg>
<msg timestamp="20220725 10:03:47.071" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:47.071" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:46.378" endtime="20220725 10:03:47.072"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.073" level="INFO">${RESPONSE_ENCRYPT_TYPE} = xGpdPvv47GxmD38HxGD7rRF8VWN/vdYVVdD/lD9ZOAuAYRoUAsng9xQKf5Nd/mKYDzU7JWYMN/fVTJ9eXfO9QiITssjsqFju1I8rehcqdg6SDDBTPjNbX1zfDqa7ovg5bBQPYDa87mFO02aewE1GXukFGzRrmcePZD/Ovt8O4fiDY7DVwjq3X10OP9tcofWA897o+3co...</msg>
<status status="PASS" starttime="20220725 10:03:47.072" endtime="20220725 10:03:47.073"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:47.076" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text xGpdPvv47GxmD38HxGD7rRF8VWN/vdYVVdD/lD9ZOAuAYRoUAsng9xQKf5Nd/mKYDzU7JWYMN/fVTJ9eXfO9QiITssjsqFju1I8rehcqdg6SDDBTPjNbX1zfDqa7ovg5bBQPYDa87mFO02aewE1GXukFGzRrmcePZD/Ovt8O4fiDY7DVwjq3X10OP9tcofWA897o+3coFoi6LUTVsaNd3U+ckh+TT0Abl5n32D8a6PyzD5jnaZ2Vk/xxWhy+LNjzMcF/wREwAyWVNbnVMNdac4SvPi5iU+kKHKJmuj/wcs65NpIcvyKQbePUo3VyOKYVTwFmmT1YyArstUTFTE4CqtI6U0g6Bxdbhns8FhIFQY+2HkRrucYY64brqRP5T1JZdVrsA3TO</msg>
<msg timestamp="20220725 10:03:47.084" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:47.234" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:47.075" endtime="20220725 10:03:47.234"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:47.236" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:47.235" endtime="20220725 10:03:47.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.236" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup","kyc_trans_id":"EQ2022072500025"}}</msg>
<status status="PASS" starttime="20220725 10:03:47.236" endtime="20220725 10:03:47.236"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.237" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"journey_code":"JN003","journey_name":"EKYC QR Signup...</msg>
<status status="PASS" starttime="20220725 10:03:47.237" endtime="20220725 10:03:47.237"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:47.237" endtime="20220725 10:03:47.238"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:47.074" endtime="20220725 10:03:47.238"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:47.239" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'journey_code': 'JN003', 'journey_name'...</msg>
<status status="PASS" starttime="20220725 10:03:47.238" endtime="20220725 10:03:47.239"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.264" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:47.239" endtime="20220725 10:03:47.264"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.265" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:47.265" endtime="20220725 10:03:47.265"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.290" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:47.266" endtime="20220725 10:03:47.290"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.290" level="INFO">${QR_RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:47.290" endtime="20220725 10:03:47.291"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.314" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:47.291" endtime="20220725 10:03:47.314"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.315" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:47.314" endtime="20220725 10:03:47.315"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.340" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:47.315" endtime="20220725 10:03:47.340"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.341" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:47.340" endtime="20220725 10:03:47.341"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.362" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:03:47.341" endtime="20220725 10:03:47.362"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.363" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:03:47.362" endtime="20220725 10:03:47.363"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.385" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:47.364" endtime="20220725 10:03:47.385"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.386" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:47.385" endtime="20220725 10:03:47.386"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.452" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:47.386" endtime="20220725 10:03:47.452"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${QR_RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.453" level="INFO">${QR_RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:47.453" endtime="20220725 10:03:47.453"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.478" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:03:47.454" endtime="20220725 10:03:47.478"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.479" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:03:47.478" endtime="20220725 10:03:47.479"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..kyc_trans_id</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:47.502" level="INFO">${values_code} = ['EQ2022072500025']</msg>
<status status="PASS" starttime="20220725 10:03:47.479" endtime="20220725 10:03:47.502"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.503" level="INFO">${TRANS_ID} = EQ2022072500025</msg>
<status status="PASS" starttime="20220725 10:03:47.503" endtime="20220725 10:03:47.503"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:46.202" endtime="20220725 10:03:47.503"></status>
</kw>
<kw name="Agree_term_and_conditions" library="Get_term_and_conditionAPI_page">
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:47.504" endtime="20220725 10:03:47.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.505" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw'}</msg>
<status status="PASS" starttime="20220725 10:03:47.505" endtime="20220725 10:03:47.505"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.506" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:47.506" endtime="20220725 10:03:47.507"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id" : "${TRANS_ID}", "accept" : true }</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.509" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:47.508" endtime="20220725 10:03:47.509"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:47.507" endtime="20220725 10:03:47.509"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:47.510" endtime="20220725 10:03:47.510"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:47.512" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:47.517" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:47.670" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:47.511" endtime="20220725 10:03:47.671"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:47.671" endtime="20220725 10:03:47.672"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:47.509" endtime="20220725 10:03:47.673"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:47.675" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:47.675" level="INFO">${TextFileContent} = kLkaW9ffrAcnrR3a1Ar19E+8uwu6fQdN7nWhSFaiT1dgp3zXnBjRY7g3GsEVdBQUnBKCc7kGIaNZwWMsFE8gjNMoCO+7QNcYDeUuNYhfaNfJe78=</msg>
<status status="PASS" starttime="20220725 10:03:47.674" endtime="20220725 10:03:47.675"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:47.676" level="INFO">${RESULT_ENCRYPT_DATA} = kLkaW9ffrAcnrR3a1Ar19E+8uwu6fQdN7nWhSFaiT1dgp3zXnBjRY7g3GsEVdBQUnBKCc7kGIaNZwWMsFE8gjNMoCO+7QNcYDeUuNYhfaNfJe78=</msg>
<status status="PASS" starttime="20220725 10:03:47.675" endtime="20220725 10:03:47.676"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:47.673" endtime="20220725 10:03:47.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${RESULT_ENCRYPT_DATA}</arg>
</arguments>
<assign>
<var>&amp;{body}</var>
</assign>
<msg timestamp="20220725 10:03:47.678" level="INFO">&amp;{body} = { data=kLkaW9ffrAcnrR3a1Ar19E+8uwu6fQdN7nWhSFaiT1dgp3zXnBjRY7g3GsEVdBQUnBKCc7kGIaNZwWMsFE8gjNMoCO+7QNcYDeUuNYhfaNfJe78= }</msg>
<status status="PASS" starttime="20220725 10:03:47.677" endtime="20220725 10:03:47.678"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_GET_TERM_AND_CONDITION}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:48.254" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 path_url=/tcrb-platform-kyc/v1/termandcondition 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw', 'Content-Length': '124', 'Content-Type': 'application/json'} 
 body=b'{"data": "kLkaW9ffrAcnrR3a1Ar19E+8uwu6fQdN7nWhSFaiT1dgp3zXnBjRY7g3GsEVdBQUnBKCc7kGIaNZwWMsFE8gjNMoCO+7QNcYDeUuNYhfaNfJe78="}' 
 </msg>
<msg timestamp="20220725 10:03:48.255" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/termandcondition 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '291', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:48 GMT', 'x-amzn-RequestId': '9264f734-61bb-4930-8ccf-7227d0bff5ed', 'x-amz-apigw-id': 'VzYzIECTSQ0Fb-Q=', 'X-Amzn-Trace-Id': 'Root=1-62de0813-30dca5423336540b436d7dd0', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 218f4cb21f8bb515531930bd18f9dfee.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': '3w3DKx7rI9MRXAP4Wwb5IlbQ0dfQBkVErE_PDybd00ON_O69lCoB1g=='} 
 body={"data":"I1OpecGd+bd7McWfq6ayTjAqnYOFifHy9VPX1CPinakiL7jDHhhMxlXKBIupyOxtOX6qDzaasfa0BXpPeYBLnZWulu/kmapzaLUtRo9G8w7U3X4vO2cSIJJ3D4sJwR6bXlawIo2PFPmqDvYI9TxeMrzakRcx/xPrv2Cr3nHJg/e96XXkuEJudIDthjORw0DE5fuoxIU9tGxtC7NyDiKNfrzlEDtSc8DaFKMQgpYG5y2FwGfEceEiLU6ylBneqAT/Mh3+79g1GRkEYYlH5ONA6dU="} 
 </msg>
<msg timestamp="20220725 10:03:48.255" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:48.255" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:47.679" endtime="20220725 10:03:48.255"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.256" level="INFO">${RESPONSE_ENCRYPT_TYPE} = I1OpecGd+bd7McWfq6ayTjAqnYOFifHy9VPX1CPinakiL7jDHhhMxlXKBIupyOxtOX6qDzaasfa0BXpPeYBLnZWulu/kmapzaLUtRo9G8w7U3X4vO2cSIJJ3D4sJwR6bXlawIo2PFPmqDvYI9TxeMrzakRcx/xPrv2Cr3nHJg/e96XXkuEJudIDthjORw0DE5fuoxIU9...</msg>
<status status="PASS" starttime="20220725 10:03:48.255" endtime="20220725 10:03:48.256"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:48.258" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text I1OpecGd+bd7McWfq6ayTjAqnYOFifHy9VPX1CPinakiL7jDHhhMxlXKBIupyOxtOX6qDzaasfa0BXpPeYBLnZWulu/kmapzaLUtRo9G8w7U3X4vO2cSIJJ3D4sJwR6bXlawIo2PFPmqDvYI9TxeMrzakRcx/xPrv2Cr3nHJg/e96XXkuEJudIDthjORw0DE5fuoxIU9tGxtC7NyDiKNfrzlEDtSc8DaFKMQgpYG5y2FwGfEceEiLU6ylBneqAT/Mh3+79g1GRkEYYlH5ONA6dU=</msg>
<msg timestamp="20220725 10:03:48.264" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:48.411" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:48.257" endtime="20220725 10:03:48.412"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:48.413" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:48.412" endtime="20220725 10:03:48.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.414" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:48.414" endtime="20220725 10:03:48.414"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.415" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":null}</msg>
<status status="PASS" starttime="20220725 10:03:48.415" endtime="20220725 10:03:48.415"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:48.415" endtime="20220725 10:03:48.416"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.257" endtime="20220725 10:03:48.416"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:48.416" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': None}</msg>
<status status="PASS" starttime="20220725 10:03:48.416" endtime="20220725 10:03:48.417"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:48.444" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:48.417" endtime="20220725 10:03:48.444"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GETTERM_RESPONES_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.445" level="INFO">${GETTERM_RESPONES_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:48.444" endtime="20220725 10:03:48.445"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:47.504" endtime="20220725 10:03:48.445"></status>
</kw>
<kw name="Validate_customer_qr_code_journey" library="validate_customer_API_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
<arg>Authorization=${LOGIN_IDTOKEN}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:48.446" endtime="20220725 10:03:48.446"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${HEADER_PLATFORM_KYC}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.447" level="INFO">{'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw'}</msg>
<status status="PASS" starttime="20220725 10:03:48.447" endtime="20220725 10:03:48.447"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URL_CORE_SERVICE}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.448" level="INFO">Creating Session using : alias=eKYC, url=https://tablet-preprod.onlinebanking-partner-bottech.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20220725 10:03:48.447" endtime="20220725 10:03:48.448"></status>
</kw>
<kw name="Get_Data_Customer_MainCase" library="Get_data_excel">
<arguments>
<arg>${row_in_excel}</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME}</arg>
<arg>doc_id=doc1</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:48.449" endtime="20220725 10:03:48.762"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=4</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_cid}</var>
</assign>
<msg timestamp="20220725 10:03:48.762" level="INFO">${get_cid} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:03:48.762" endtime="20220725 10:03:48.763"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name}</var>
</assign>
<msg timestamp="20220725 10:03:48.763" level="INFO">${name} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:03:48.763" endtime="20220725 10:03:48.763"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname}</var>
</assign>
<msg timestamp="20220725 10:03:48.764" level="INFO">${surname} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:03:48.763" endtime="20220725 10:03:48.764"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${name_en}</var>
</assign>
<msg timestamp="20220725 10:03:48.764" level="INFO">${name_en} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:03:48.764" endtime="20220725 10:03:48.764"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${surname_en}</var>
</assign>
<msg timestamp="20220725 10:03:48.765" level="INFO">${surname_en} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:03:48.764" endtime="20220725 10:03:48.765"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${bithdate}</var>
</assign>
<msg timestamp="20220725 10:03:48.765" level="INFO">${bithdate} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:03:48.765" endtime="20220725 10:03:48.765"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_mobile}</var>
</assign>
<msg timestamp="20220725 10:03:48.766" level="INFO">${get_mobile} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:03:48.765" endtime="20220725 10:03:48.766"></status>
</kw>
<kw name="Read Excel Cell" library="ExcelLibrary">
<doc>Returns content of a cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>sheet_name=eKYC-HAPPY</arg>
</arguments>
<assign>
<var>${get_lasercode}</var>
</assign>
<msg timestamp="20220725 10:03:48.767" level="INFO">${get_lasercode} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:03:48.766" endtime="20220725 10:03:48.767"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_CID}</arg>
<arg>${get_cid}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.767" level="INFO">${GET_CID} = 1100600292875</msg>
<status status="PASS" starttime="20220725 10:03:48.767" endtime="20220725 10:03:48.767"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME}</arg>
<arg>${name}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.768" level="INFO">${FIRST_NAME} = พัชรพล</msg>
<status status="PASS" starttime="20220725 10:03:48.768" endtime="20220725 10:03:48.768"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME}</arg>
<arg>${surname}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.768" level="INFO">${SURNAME} = ศุภศิริรัตน์</msg>
<status status="PASS" starttime="20220725 10:03:48.768" endtime="20220725 10:03:48.769"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FIRST_NAME_EN}</arg>
<arg>${name_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.769" level="INFO">${FIRST_NAME_EN} = Patcharapol</msg>
<status status="PASS" starttime="20220725 10:03:48.769" endtime="20220725 10:03:48.769"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${SURNAME_EN}</arg>
<arg>${surname_en}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.770" level="INFO">${SURNAME_EN} = Supasirirat</msg>
<status status="PASS" starttime="20220725 10:03:48.769" endtime="20220725 10:03:48.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BIRTH_DATE}</arg>
<arg>${bithdate}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.770" level="INFO">${BIRTH_DATE} = 27-07-2537</msg>
<status status="PASS" starttime="20220725 10:03:48.770" endtime="20220725 10:03:48.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_MOBILE}</arg>
<arg>${get_mobile}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.771" level="INFO">${GET_MOBILE} = 0875787441</msg>
<status status="PASS" starttime="20220725 10:03:48.770" endtime="20220725 10:03:48.771"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GET_LASER_CODE}</arg>
<arg>${get_lasercode}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.771" level="INFO">${GET_LASER_CODE} = JT3102714867</msg>
<status status="PASS" starttime="20220725 10:03:48.771" endtime="20220725 10:03:48.771"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:48.772" endtime="20220725 10:03:48.772"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.449" endtime="20220725 10:03:48.772"></status>
</kw>
<kw name="Create_File_Keep_Text" library="Encrypt_page">
<arguments>
<arg>{ "kyc_trans_id":"${TRANS_ID}", "alley": " ", "birth_date": "${BIRTH_DATE}", "cid":"${GET_CID}", "date_of_issue": "04-06-2559", "district": "อำเภอบางกรวย", "expired_date": "26-07-2567", "first_name_en": "${FIRST_NAME_EN}", "first_name_th": "${FIRST_NAME}", "house_no": "425", "issue_by": "พระโขนง/กรุงเทพมหานคร", "lane": " ", "last_name_en": "${SURNAME_EN}", "last_name_th": "${SURNAME}", "middle_name_en": "middle", "middle_name_th": "กลาง", "moo": " ", "province": "บางกะปิ", "request_no": 123456789, "road": "นวมินทร์", "sex": "ชาย", "sub_district": "บางสีทอง", "title_en": "Mr.", "title_th": "นาย", "img": "${IMG}"}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>keep_text.txt</arg>
<arg>${data_for_save}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.774" level="INFO" html="yes">Created file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/keep_text.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220725 10:03:48.773" endtime="20220725 10:03:48.774"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.772" endtime="20220725 10:03:48.774"></status>
</kw>
<kw name="Encrypt_Function_with_long_Text" library="Encrypt_page">
<arguments>
<arg>keep_text.txt</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>START ENCRYPT</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:48.775" endtime="20220725 10:03:48.775"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>encrypt</arg>
<arg>default</arg>
<arg>file</arg>
<arg>file</arg>
<arg>${input_txt_file}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:48.776" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar encrypt default file file keep_text.txt</msg>
<msg timestamp="20220725 10:03:48.782" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:48.962" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:48.775" endtime="20220725 10:03:48.962"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FINISH ENCRYPT !!</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:48.963" endtime="20220725 10:03:48.964"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.775" endtime="20220725 10:03:48.964"></status>
</kw>
<kw name="Read_File_Encrypt" library="Encrypt_page">
<arguments>
<arg>encrypt_text.txt</arg>
</arguments>
<kw name="Get File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${data_encrypt_file}</arg>
</arguments>
<assign>
<var>${TextFileContent}</var>
</assign>
<msg timestamp="20220725 10:03:48.967" level="INFO" html="yes">Getting file '&lt;a href="file:///Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt"&gt;/Users/patcharapol/Documents/GitHub/eKYC_preprod/encrypt_text.txt&lt;/a&gt;'.</msg>
<msg timestamp="20220725 10:03:48.968" level="INFO">${TextFileContent} = aICePtwdqDsdAI9j6I3yHoKMar9uBInlmHUdQ3zvzqZMQS9IoPZYjiAv7CYLq74UyzPyRt7G+GyC9hzopr93St5rCsriuqlr/StkNU2Uz8ib6+LYzvKjdTgbMxN1vSrpxq6owQntNvH55PSg1KCEcu1sdDXli8z5p2tQizfJ1T2VhYPnIB7HQxi/VrzrIoV35nBPW37I...</msg>
<status status="PASS" starttime="20220725 10:03:48.966" endtime="20220725 10:03:48.968"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESULT_ENCRYPT_DATA}</arg>
<arg>${TextFileContent}</arg>
</arguments>
<msg timestamp="20220725 10:03:48.969" level="INFO">${RESULT_ENCRYPT_DATA} = aICePtwdqDsdAI9j6I3yHoKMar9uBInlmHUdQ3zvzqZMQS9IoPZYjiAv7CYLq74UyzPyRt7G+GyC9hzopr93St5rCsriuqlr/StkNU2Uz8ib6+LYzvKjdTgbMxN1vSrpxq6owQntNvH55PSg1KCEcu1sdDXli8z5p2tQizfJ1T2VhYPnIB7HQxi/VrzrIoV35nBPW37I...</msg>
<status status="PASS" starttime="20220725 10:03:48.968" endtime="20220725 10:03:48.969"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.965" endtime="20220725 10:03:48.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary">
<doc>*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</doc>
<arguments>
<arg>{"data": "${RESULT_ENCRYPT_DATA}"}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20220725 10:03:48.971" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:48.973" level="INFO">To JSON using : content={"data": ""} </msg>
<msg timestamp="20220725 10:03:48.973" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20220725 10:03:48.974" level="INFO">${body} = {'data': 'aICePtwdqDsdAI9j6I3yHoKMar9uBInlmHUdQ3zvzqZMQS9IoPZYjiAv7CYLq74UyzPyRt7G+GyC9hzopr93St5rCsriuqlr/StkNU2Uz8ib6+LYzvKjdTgbMxN1vSrpxq6owQntNvH55PSg1KCEcu1sdDXli8z5p2tQizfJ1T2VhYPnIB7HQxi/VrzrIo...</msg>
<status status="PASS" starttime="20220725 10:03:48.971" endtime="20220725 10:03:48.974"></status>
</kw>
<kw name="Post On Session" library="RequestsLibrary">
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<arguments>
<arg>alias=${ALIAS}</arg>
<arg>url=${URI_POST_VALIDATE_CUSTOMER}</arg>
<arg>headers=&amp;{HEADER_PLATFORM_KYC}</arg>
<arg>json=${body}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20220725 10:03:51.177" level="INFO">POST Request : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 path_url=/tcrb-platform-kyc/v1/validate_customer 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'X-Correlation-Id': 'QA', 'client-ip': '192.168.1.1', 'location': 'QA_HOME', 'partner-code': 'TCRB-TABLET', 'user': 'automate', 'Authorization': 'eyJraWQiOiJyOVBxa2RWNGVjRXBKNUd6NitUXC9cL0JWb3l0VXlJV3Q5cnZ2N2hFdDFrMUk9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwZWNiNGRiOC0yNTA0LTQ2M2YtODgzYi1kNWYzZThlYjgxNDAiLCJhdWQiOiIyaXRsc2tycXBrbGYxaDRwMHRzYXZrMWtrbSIsImV2ZW50X2lkIjoiM2EyMDZkY2MtYTY3YS00MDI5LTk2ODUtYzY2NjE3YjljYWU3IiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE2NTg3MTgyMjUsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tXC9hcC1zb3V0aGVhc3QtMV9ldUpucDlvTU4iLCJjb2duaXRvOnVzZXJuYW1lIjoiZWt5YzAwMyIsImV4cCI6MTY1ODcxODUyNSwiaWF0IjoxNjU4NzE4MjI1fQ.DMClVGIPItcTdeQIvIYkYvwtDQXW-j-X28OKMtzMh1A9zOoDT09ePzbPC9q1f1jXeWwt6Tq0jibUinTpQfJiYJB30d4WcTzvF2rxci60boqs0Fp10Evbua1whQ8_5dagBfBDQXwajyFfJDU8B61qKCko4kZ0sEO503kTEbBtRCzI9IXh_vOXnq9xuj6NVXidtYL-acMP7HdfJlbCpqLNgWOMC74IJbRC7LCrH18JEVUQC3YFER-UhPCDx707QKekdnI9QGfdLlNFnoWmexAr9lG0Kt5uRoKcXSYflFZwnH-WTqQ5IPRWGKg4UZqcNs10UGB1TX-adyYF1Gftm8Z2fw', 'Content-Length': '63096', 'Content-Type': 'application/json'} 
 body=b'{"data": "'... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20220725 10:03:51.177" level="INFO">POST Response : url=https://tablet-preprod.onlinebanking-partner-bottech.com/tcrb-platform-kyc/v1/validate_customer 
 status=200, reason=OK 
 headers={'Content-Type': 'application/json', 'Content-Length': '363', 'Connection': 'keep-alive', 'Date': 'Mon, 25 Jul 2022 03:03:51 GMT', 'x-amzn-RequestId': '037677f7-0096-4c3b-bc7a-93260aab983f', 'x-amz-apigw-id': 'VzYzVG9eSQ0FnrQ=', 'X-Amzn-Trace-Id': 'Root=1-62de0815-5fe2d5fd633576835ea30e41', 'X-Cache': 'Miss from cloudfront', 'Via': '1.1 218f4cb21f8bb515531930bd18f9dfee.cloudfront.net (CloudFront)', 'X-Amz-Cf-Pop': 'BKK50-C2', 'X-Amz-Cf-Id': 'pxdqmlXnzEfOzXjMA247AUSY2rTWs0F1b78C8o4tG7Fg8JD69m04Tw=='} 
 body={"data":"iD21zTEVDKbc4/r0kIXqiSqlmsykuuZcVy5SUnTktl0RTYjiJOVJaWAidsnWnKnuTeiXdBbSVwGPB7ja2OTIvSsN1skR596N7Sh+8/5YNyR0qljSLzZEZfmCHSmIkt5iSmcuXDUkekzYs8LAz/gsoyDc7GkLSHFuj1p33Hu/C0C1myRa/k4Wqu1/ItFjDMAaqhDz4FC1BdUVR9JdwkJKagxd8oUxuKjePF+Wkgv7Y7IvDZp2tj4qrpv+FygySxAm53NO0hnrhvCrSrscHbJPYlenkNMlNOtjzO863GUu4XHo+4SuJ1X4PKDUF5iIOMq/wE6T4A3eo/wih/5HijdCXrfoBx6Ocg=="} 
 </msg>
<msg timestamp="20220725 10:03:51.177" level="INFO">/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/urllib3/connectionpool.py:1013: InsecureRequestWarning: Unverified HTTPS request is being made to host 'tablet-preprod.onlinebanking-partner-bottech.com'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20220725 10:03:51.177" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20220725 10:03:48.974" endtime="20220725 10:03:51.177"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
<arg>${response.json()["data"]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.179" level="INFO">${RESPONSE_ENCRYPT_TYPE} = iD21zTEVDKbc4/r0kIXqiSqlmsykuuZcVy5SUnTktl0RTYjiJOVJaWAidsnWnKnuTeiXdBbSVwGPB7ja2OTIvSsN1skR596N7Sh+8/5YNyR0qljSLzZEZfmCHSmIkt5iSmcuXDUkekzYs8LAz/gsoyDc7GkLSHFuj1p33Hu/C0C1myRa/k4Wqu1/ItFjDMAaqhDz4FC1...</msg>
<status status="PASS" starttime="20220725 10:03:51.178" endtime="20220725 10:03:51.179"></status>
</kw>
<kw name="Decrypt_Function" library="Encrypt_page">
<arguments>
<arg>${RESPONSE_ENCRYPT_TYPE}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>java</arg>
<arg>-jar</arg>
<arg>${PATH_JAR_NEW}</arg>
<arg>decrypt</arg>
<arg>default</arg>
<arg>text</arg>
<arg>text</arg>
<arg>${input_decrypt_data}</arg>
<arg>alias=myproc</arg>
</arguments>
<msg timestamp="20220725 10:03:51.180" level="INFO">Starting process:
java -jar tcrb-ekyc-cipher-3.5.jar decrypt default text text iD21zTEVDKbc4/r0kIXqiSqlmsykuuZcVy5SUnTktl0RTYjiJOVJaWAidsnWnKnuTeiXdBbSVwGPB7ja2OTIvSsN1skR596N7Sh+8/5YNyR0qljSLzZEZfmCHSmIkt5iSmcuXDUkekzYs8LAz/gsoyDc7GkLSHFuj1p33Hu/C0C1myRa/k4Wqu1/ItFjDMAaqhDz4FC1BdUVR9JdwkJKagxd8oUxuKjePF+Wkgv7Y7IvDZp2tj4qrpv+FygySxAm53NO0hnrhvCrSrscHbJPYlenkNMlNOtjzO863GUu4XHo+4SuJ1X4PKDUF5iIOMq/wE6T4A3eo/wih/5HijdCXrfoBx6Ocg==</msg>
<msg timestamp="20220725 10:03:51.187" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220725 10:03:51.345" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220725 10:03:51.179" endtime="20220725 10:03:51.345"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>myproc</arg>
</arguments>
<assign>
<var>${result_decrypt}</var>
</assign>
<msg timestamp="20220725 10:03:51.347" level="INFO">${result_decrypt} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220725 10:03:51.346" endtime="20220725 10:03:51.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.347" level="INFO">{"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":true}}</msg>
<status status="PASS" starttime="20220725 10:03:51.347" endtime="20220725 10:03:51.347"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
<arg>${result_decrypt.stdout}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.349" level="INFO">${OUTPUT_VALUE_FROM_ENCRYPT} = {"status":{"code":"0","message":"Success","remark":"","user_code":"S0001","user_message_en":"Success","user_message_th":"ดำเนินการสำเร็จ"},"data":{"mobile_number":"0875787441","consent_new_version":tr...</msg>
<status status="PASS" starttime="20220725 10:03:51.348" endtime="20220725 10:03:51.349"></status>
</kw>
<kw name="Terminate All Processes" library="Process">
<doc>Terminates all still running processes started by this library.</doc>
<arguments>
<arg>kill=True</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.349" endtime="20220725 10:03:51.350"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:51.179" endtime="20220725 10:03:51.350"></status>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<doc>Convert String to JSON object</doc>
<arguments>
<arg>${OUTPUT_VALUE_FROM_ENCRYPT}</arg>
</arguments>
<assign>
<var>${convert_result}</var>
</assign>
<msg timestamp="20220725 10:03:51.351" level="INFO">${convert_result} = {'status': {'code': '0', 'message': 'Success', 'remark': '', 'user_code': 'S0001', 'user_message_en': 'Success', 'user_message_th': 'ดำเนินการสำเร็จ'}, 'data': {'mobile_number': '0875787441', 'consent...</msg>
<status status="PASS" starttime="20220725 10:03:51.350" endtime="20220725 10:03:51.351"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.375" level="INFO">${values_code} = ['0']</msg>
<status status="PASS" starttime="20220725 10:03:51.351" endtime="20220725 10:03:51.375"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_CODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.376" level="INFO">${RESPONSE_CODE} = 0</msg>
<status status="PASS" starttime="20220725 10:03:51.375" endtime="20220725 10:03:51.376"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..message</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.398" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:51.376" endtime="20220725 10:03:51.398"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_MESSAGE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.399" level="INFO">${RESPONSE_MESSAGE} = Success</msg>
<status status="PASS" starttime="20220725 10:03:51.398" endtime="20220725 10:03:51.399"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..remark</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.422" level="INFO">${values_code} = ['']</msg>
<status status="PASS" starttime="20220725 10:03:51.399" endtime="20220725 10:03:51.422"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_REMARK}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.423" level="INFO">${RESPONSE_REMARK} = </msg>
<status status="PASS" starttime="20220725 10:03:51.422" endtime="20220725 10:03:51.423"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_code</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.446" level="INFO">${values_code} = ['S0001']</msg>
<status status="PASS" starttime="20220725 10:03:51.423" endtime="20220725 10:03:51.446"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USERCODE}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.446" level="INFO">${RESPONSE_USERCODE} = S0001</msg>
<status status="PASS" starttime="20220725 10:03:51.446" endtime="20220725 10:03:51.446"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_en</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.469" level="INFO">${values_code} = ['Success']</msg>
<status status="PASS" starttime="20220725 10:03:51.447" endtime="20220725 10:03:51.469"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_EN}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.470" level="INFO">${RESPONSE_USER_EN} = Success</msg>
<status status="PASS" starttime="20220725 10:03:51.469" endtime="20220725 10:03:51.470"></status>
</kw>
<kw name="Get Value From Json" library="JSONLibrary">
<doc>Get Value From JSON using JSONPath</doc>
<arguments>
<arg>${convert_result}</arg>
<arg>$..user_message_th</arg>
</arguments>
<assign>
<var>${values_code}</var>
</assign>
<msg timestamp="20220725 10:03:51.491" level="INFO">${values_code} = ['ดำเนินการสำเร็จ']</msg>
<status status="PASS" starttime="20220725 10:03:51.470" endtime="20220725 10:03:51.491"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${RESPONSE_USER_TH}</arg>
<arg>${values_code[0]}</arg>
</arguments>
<msg timestamp="20220725 10:03:51.493" level="INFO">${RESPONSE_USER_TH} = ดำเนินการสำเร็จ</msg>
<status status="PASS" starttime="20220725 10:03:51.492" endtime="20220725 10:03:51.493"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:48.445" endtime="20220725 10:03:51.493"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="teardown">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>save_data_excel_page.Save_Result_Modify_validate_api</arg>
<arg>4</arg>
</arguments>
<kw name="Save_Result_Modify_validate_api" library="save_data_excel_page">
<arguments>
<arg>4</arg>
</arguments>
<kw name="Open Excel Document" library="ExcelLibrary">
<doc>Opens xlsx document file.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
<arg>doc_id=doc10</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.495" endtime="20220725 10:03:51.572"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=5</arg>
<arg>value=${RESPONSE_CODE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.572" endtime="20220725 10:03:51.572"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=6</arg>
<arg>value=${RESPONSE_MESSAGE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.573" endtime="20220725 10:03:51.573"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=7</arg>
<arg>value=${RESPONSE_REMARK}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.573" endtime="20220725 10:03:51.574"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=11</arg>
<arg>value=${RESPONSE_API}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.574" endtime="20220725 10:03:51.574"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=8</arg>
<arg>value=${RESPONSE_USERCODE}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.574" endtime="20220725 10:03:51.575"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=9</arg>
<arg>value=${RESPONSE_USER_EN}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.575" endtime="20220725 10:03:51.575"></status>
</kw>
<kw name="Write Excel Cell" library="ExcelLibrary">
<doc>Writes value to the cell.</doc>
<arguments>
<arg>row_num=${row}</arg>
<arg>col_num=10</arg>
<arg>value=${RESPONSE_USER_TH}</arg>
<arg>sheet_name=Modify_validate</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.576" endtime="20220725 10:03:51.576"></status>
</kw>
<kw name="Jira_api_page.Update_Jira_Status">
<msg timestamp="20220725 10:03:51.584" level="FAIL">No keyword with name 'Jira_api_page.Update_Jira_Status' found.</msg>
<status status="FAIL" starttime="20220725 10:03:51.584" endtime="20220725 10:03:51.584"></status>
</kw>
<kw name="Save Excel Document" library="ExcelLibrary">
<doc>Saves the current document to disk.</doc>
<arguments>
<arg>filename=${FILE_NAME_QR}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.584" endtime="20220725 10:03:51.663"></status>
</kw>
<kw name="Close All Excel Documents" library="ExcelLibrary">
<doc>Closes all opened documents.</doc>
<status status="PASS" starttime="20220725 10:03:51.663" endtime="20220725 10:03:51.663"></status>
</kw>
<status status="FAIL" starttime="20220725 10:03:51.494" endtime="20220725 10:03:51.663"></status>
</kw>
<status status="PASS" starttime="20220725 10:03:51.494" endtime="20220725 10:03:51.663"></status>
</kw>
<doc>ทดสอบระบบ Modify validate customer API กรณี ลูกค้า Gen QR code และ Dipchip ด้วยบัตรประชาชนคนเดียวกัน</doc>
<tags>
<tag>Regression</tag>
</tags>
<status status="PASS" starttime="20220725 10:03:43.030" endtime="20220725 10:03:51.664" critical="yes"></status>
</test>
<kw name="Log To Console" library="BuiltIn" type="teardown">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${TRANS_ID}</arg>
</arguments>
<status status="PASS" starttime="20220725 10:03:51.665" endtime="20220725 10:03:51.666"></status>
</kw>
<status status="PASS" starttime="20220725 10:01:23.249" endtime="20220725 10:03:51.666"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="7" fail="0">Regression</stat>
</tag>
<suite>
<stat pass="7" fail="0" id="s1" name="19.QR journey">19.QR journey</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220725 10:01:37.914" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:43.871" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:47.204" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:01:53.803" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:16.509" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:33.370" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:46.821" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:50.600" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:02:52.328" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:02.984" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:05.441" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:06.707" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:10.667" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:17.907" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:23.574" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:28.942" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:41.541" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
<msg timestamp="20220725 10:03:48.971" level="WARN">Keyword 'RequestsLibrary.To Json' is deprecated. Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</msg>
</errors>
</robot>
